{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpeg","path":"medias/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"d79627d7669343caf6f87536ee6a34d2caac6985","modified":1615106771974},{"_id":"source/404/index.md","hash":"19328e87fab73eec4342e76d456d721daaf84d51","modified":1615025000860},{"_id":"source/_data/friends.json","hash":"93061f196a60daf05aeb287a0fda7d399c5ccb67","modified":1615025456147},{"_id":"source/about/index.md","hash":"5d88969cd4cf63f2c3845633c5fd60367db0a7ee","modified":1615120580535},{"_id":"source/_posts/test.md","hash":"3f560fdebe359c62f78543888f8e539ec7c96e99","modified":1615107036464},{"_id":"source/archives/index.md","hash":"f36b9422241bdab4097cf343e47ed639cb704870","modified":1615108124769},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1615107431155},{"_id":"source/tags/index.md","hash":"6c223043ba32b7c76c33eafceeff9ed879520bfb","modified":1615109055255},{"_id":"source/friends/index.md","hash":"6e1710744cd6ee34cd876af8b9a51b32e8677df8","modified":1615107472423},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1615024759583},{"_id":"themes/matery/.DS_Store","hash":"02beeff4559b1d58ba5f2a3e24611ee4361290b9","modified":1615026678652},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1615024759583},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1615024759583},{"_id":"themes/matery/_config.yml","hash":"1198ebae9c313ee10111c785bcdf7d24c02aac13","modified":1615120616623},{"_id":"themes/matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1615024759584},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1615024759585},{"_id":"themes/matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1615024759585},{"_id":"themes/matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1615024759585},{"_id":"themes/matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1615024759595},{"_id":"themes/matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1615024759584},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1615024759595},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1615024759596},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1615024759596},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1615024759596},{"_id":"themes/matery/layout/contact.ejs","hash":"cff60f87f69155707f3a33731c7fac945cf7cd93","modified":1615024759596},{"_id":"themes/matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1615024759596},{"_id":"themes/matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1615024759597},{"_id":"themes/matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1615024759597},{"_id":"themes/matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1615024759597},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1615024759598},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1615024759598},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1615024759585},{"_id":"themes/matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1615024759600},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1615024759585},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1615024759585},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1615024759586},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1615024759586},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1615024759586},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1615024759586},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1615024759586},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1615024759586},{"_id":"themes/matery/README_CN.md","hash":"a1e060bb4cf2ccca5cad12d02cc3c37f8028fdfb","modified":1615024759584},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1615024759587},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1615024759587},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1615024759587},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1615024759587},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1615024759587},{"_id":"themes/matery/source/.DS_Store","hash":"728704de0145e5101fd252a647d99ca8b270cc02","modified":1615026678651},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1615024759588},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1615024759588},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1615024759588},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1615024759588},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1615024759589},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1615024759589},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1615024759589},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1615024759589},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1615024759590},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1615024759590},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1615024759590},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1615024759590},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1615024759591},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1615024759591},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1615024759591},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1615024759591},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1615024759592},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1615024759592},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1615024759592},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1615024759592},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1615024759592},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1615024759593},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1615024759593},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1615024759593},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1615024759593},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1615024759593},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1615024759594},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1615024759594},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1615024759594},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1615024759594},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1615024759594},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1615024759595},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1615024759595},{"_id":"themes/matery/source/css/matery.css","hash":"c4f59752be28c542f6a95bc5d12d1e89bd249dc4","modified":1615110535820},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1615024759598},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1615024759599},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1615024759599},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1615024759600},{"_id":"themes/matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1615024759600},{"_id":"themes/matery/source/medias/avatar.jpeg","hash":"d5c7bbc1e67cbfbb81f736db003c57a8a00d792b","modified":1615026055898},{"_id":"themes/matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1615024759601},{"_id":"themes/matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1615024759673},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1615024759658},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1615024759601},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1615024759602},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1615024759602},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1615024759673},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1615024759603},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1615024759602},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1615024759625},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1615024759625},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1615024759625},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1615024759625},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1615024759626},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1615024759626},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1615024759626},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1615024759626},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1615024759626},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1615024759627},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1615024759631},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1615024759634},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1615024759634},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1615024759635},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1615024759639},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1615024759633},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1615024759642},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1615024759643},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1615024759642},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1615024759642},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1615024759643},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1615024759645},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1615024759649},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1615024759646},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1615024759661},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1615024759663},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1615024759665},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1615024759665},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1615024759667},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1615024759669},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1615024759668},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1615024759669},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1615024759671},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1615024759670},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1615024759672},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1615024759672},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1615024759673},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1615024759674},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1615024759613},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1615024759615},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1615024759615},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1615024759615},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1615024759636},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1615024759637},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1615024759637},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1615024759637},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1615024759637},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1615024759638},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1615024759637},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1615024759638},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1615024759638},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1615024759636},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1615024759643},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1615024759644},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1615024759644},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1615024759644},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1615024759645},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1615024759645},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1615024759644},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1615024759635},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1615024759627},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1615024759652},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1615024759634},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1615024759650},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1615024759654},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1615024759655},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1615024759663},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1615024759660},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1615024759661},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1615024759662},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1615024759664},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1615024759666},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1615024759666},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1615024759667},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1615024759668},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1615024759670},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1615024759671},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1615024759603},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1615024759673},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1615024759612},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1615024759612},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1615024759605},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1615024759612},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1615024759625},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1615024759625},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1615024759659},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1615024759640},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1615024759633},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1615024759641},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1615024759651},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1615024759653},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1615024759658},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1615024759614},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1615024759624},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1615024759657},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1615024759617},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1615024759656},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1615024759649},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1615024759631},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1615024759623},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1615024759610},{"_id":"public/search.xml","hash":"7f7589f6d8be747f4102499116467aff613e81b5","modified":1615119142351},{"_id":"public/about/index.html","hash":"74d9ba2ca20f391984020283142ce575dc9fed88","modified":1615120633425},{"_id":"public/404/index.html","hash":"4cf22f5795627c5957e89f9a5d639cba21eb54ca","modified":1615120633425},{"_id":"public/archives/index.html","hash":"e01fbd54256b552f8d84f5983dcff90b0548dcac","modified":1615120633425},{"_id":"public/friends/index.html","hash":"1792c85472002161da1b2362a829606609a2ca89","modified":1615120633425},{"_id":"public/categories/index.html","hash":"8b4a0c1791ac271632395aae0b114d4724c9acb5","modified":1615120633425},{"_id":"public/tags/index.html","hash":"1c07188a91daf0d81bddf556b9c51e8018667abf","modified":1615120633425},{"_id":"public/uncategorized/test/index.html","hash":"4b8dd4f9648ea1877d3632361d4ff2870f16db05","modified":1615109841690},{"_id":"public/uncategorized/hello-world/index.html","hash":"abd5a58e1f0d234d8c6627e19d0e7754d90f8489","modified":1615109332127},{"_id":"public/index.html","hash":"db2e0c16543f8d4caa8430dddee19b87615f8e4a","modified":1615120633425},{"_id":"public/archives/2021/index.html","hash":"316d81860fe7f3772e474d26248f6cc3584c27a1","modified":1615120633425},{"_id":"public/archives/2021/03/index.html","hash":"7ffea30852ebf4585a27347e62a87470006b6839","modified":1615120633425},{"_id":"public/tags/Golang/index.html","hash":"3d87576a2a280b0b411a0fd3e5fbc084043109d7","modified":1615120633425},{"_id":"public/tags/tags/index.html","hash":"3c341a927ac4d995563a6f6d38fd458b05bfaba9","modified":1615109841690},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1615114584063},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1615114584063},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1615114584063},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1615114584063},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1615114584063},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1615114584063},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1615114584063},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1615114584063},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1615114584063},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1615114584063},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1615114584063},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1615114584063},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1615114584063},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1615114584063},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1615114584063},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1615114584063},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1615114584063},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1615114584063},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1615114584063},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1615114584063},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1615114584063},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1615114584063},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1615114584063},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1615114584063},{"_id":"public/medias/avatar.jpeg","hash":"d5c7bbc1e67cbfbb81f736db003c57a8a00d792b","modified":1615114584063},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1615114584063},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1615114584063},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1615114584063},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1615114584063},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1615114584063},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1615114584063},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1615114584063},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1615114584063},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1615114584063},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1615114584063},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1615114584063},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1615114584063},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1615114584063},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1615114584063},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1615114584063},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1615114584063},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1615114584063},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1615114584063},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1615114584063},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1615114584063},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1615114584063},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1615114584063},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1615114584063},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1615114584063},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1615114584063},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1615114584063},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1615114584063},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1615114584063},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1615114584063},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1615114584063},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1615114584063},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1615114584063},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1615114584063},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1615114584063},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1615114584063},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1615114584063},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1615114584063},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1615114584063},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1615114584063},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1615114584063},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1615114584063},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1615114584063},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1615114584063},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1615114584063},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1615114584063},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1615114584063},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1615114584063},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1615114584063},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1615114584063},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1615114584063},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1615114584063},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1615114584063},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1615114584063},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1615114584063},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1615114584063},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1615114584063},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1615114584063},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1615114584063},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1615114584063},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1615114584063},{"_id":"public/css/matery.css","hash":"c4f59752be28c542f6a95bc5d12d1e89bd249dc4","modified":1615114584063},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1615114584063},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1615114584063},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1615114584063},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1615114584063},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1615114584063},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1615114584063},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1615114584063},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1615114584063},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1615114584063},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1615114584063},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1615114584063},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1615114584063},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1615114584063},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1615114584063},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1615114584063},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1615114584063},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1615114584063},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1615114584063},{"_id":"source/_posts/Golang-sync-atomic包的原子操作是怎么保证的.md","hash":"fe805150430ac3ea84de3450b3a81e569ab3eda2","modified":1615109821575},{"_id":"public/uncategorized/golang-sync-atomic-bao-de-yuan-zi-cao-zuo-shi-zen-me-bao-zheng-de/index.html","hash":"26c63e1fb8b5002918f9d9ff9308d7af7d2212b8","modified":1615109332127},{"_id":"public/hou-duan-kai-fa/golang-sync-atomic-bao-de-yuan-zi-cao-zuo-shi-zen-me-bao-zheng-de/index.html","hash":"369f85a825fc9d495d9e62915e4c1f8c2ada6da9","modified":1615120633425},{"_id":"public/tags/atomic包/index.html","hash":"3ba44e534827be7ec77ed6e03aa926068dcd6dd7","modified":1615120633425},{"_id":"public/categories/后端开发/index.html","hash":"f080567bd657a8fbe0a3c0b1e731e6e192186f41","modified":1615120633425},{"_id":"source/_posts/2021-03-07-Golang-9宫格头像生成.md","hash":"970df3bc6d658008c321cabe9a742240a673f8ca","modified":1615114246069},{"_id":"source/_posts/2021-03-07-Mysql-Explain字段含义.md","hash":"f2a45d5bccf9967df4c8a5a5d7865ef07e6314d4","modified":1615113577861},{"_id":"source/_posts/2021-03-07-Golang三行代码发送钉钉机器人消息.md","hash":"74db428866c6fca0eafce759cc40744b7e8b13ee","modified":1615114466098},{"_id":"source/_posts/2021-03-07-Golang-sync-atomic包的原子操作是怎么保证的.md","hash":"fe805150430ac3ea84de3450b3a81e569ab3eda2","modified":1615109821575},{"_id":"source/_posts/2021-03-07-Mysql-备份与恢复.md","hash":"2a6d96c6d32657733f0b2ac7c1ffbf3e282f57be","modified":1615112831193},{"_id":"source/_posts/2021-03-07-Mysql-InnoDB存储引擎.md","hash":"699df249125564213d5684b3de4e92a8c712386a","modified":1615113082863},{"_id":"source/_posts/2021-03-07-Mysql-事务.md","hash":"cd6f54cfb699837a738dab37a51c96a9916cd525","modified":1615112900669},{"_id":"source/_posts/2021-03-07-Mysql-碎片整理遇到的那些事.md","hash":"2b101f2c429821e2a7be6447cddf7c16c4508303","modified":1615113663921},{"_id":"source/_posts/2021-03-07-Mysql-存储引擎和体系结构.md","hash":"183b018e912f5946a16648fbe4572a87d01e07b1","modified":1615113122057},{"_id":"source/_posts/2021-03-07-Mysql-文件.md","hash":"567990aee95336750ffa130b716e4b9c88c8cadd","modified":1615113045896},{"_id":"source/_posts/2021-03-07-Mysql-索引与算法.md","hash":"5817e2101240cb6d8c643300e19835ff67dae52e","modified":1615112961870},{"_id":"source/_posts/2021-03-07-Mysql-表.md","hash":"0e3ddb6a888e5350fa4fe1398a97f65c4beb4a98","modified":1615113002932},{"_id":"source/_posts/2021-03-07-Redis-SortedSet排行榜同分.md","hash":"418f6136c443b601d61c086fe468e776c3baf29e","modified":1615114103004},{"_id":"source/_posts/2021-03-07-Mysql-自增列AUTO-INCREMENT.md","hash":"1d26cb3c11eb9a64b01157390d4affb4c0ee272e","modified":1615114397283},{"_id":"source/_posts/2021-03-07-Mysql-面试100问.md","hash":"a53d0a04b9e8c6688ba15435e4c8c886addab759","modified":1615113966543},{"_id":"source/_posts/2021-03-07-算法导论-一个数组中实现两个栈.md","hash":"14bf239cab8d2d6b8edfd1bad36daf1b38d4f516","modified":1615113848197},{"_id":"source/_posts/2021-03-07-你的AES加密结果相同吗.md","hash":"02517a03ee42074b76b38c7a79c5da8488af9070","modified":1615110531814},{"_id":"source/_posts/2021-03-07-ip转int，int转ip.md","hash":"75b5e7dbc265c9e8e2994d845be9bb6567843d03","modified":1615112755847},{"_id":"source/_posts/2021-03-07-算法导论-两个栈实现队列.md","hash":"7646a11155425059c55fb838dc7d055ef3739db0","modified":1615113845209},{"_id":"source/_posts/2021-03-07-算法导论-两个队列实现栈.md","hash":"36521501b5e731620d83567aa7b9905920ea9ced","modified":1615113843828},{"_id":"source/_posts/2021-03-07-算法导论-单数组实现双端队列.md","hash":"921cc92fcf062529e58aa067d857777cd5311a14","modified":1615113846698},{"_id":"public/shu-ju-ku/mysql-zi-zeng-lie-auto-increment/index.html","hash":"f2aba5b7838fb4f646005da25c5121c4156d0451","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/golang-9-gong-ge-tou-xiang-sheng-cheng/index.html","hash":"b6b18c2690eea7baea3e53b2b3bfeeba4bef86a9","modified":1615120633425},{"_id":"public/zhong-jian-jian/redis-sortedset-pai-xing-bang-tong-fen/index.html","hash":"b9e99ffad0aa68c5e04dc8f380b570e1d1ee2496","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-mian-shi-100-wen/index.html","hash":"53cccb4ae3b6640df87c64f8f4a98a560a646c85","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-sui-pian-zheng-li-yu-dao-de-na-xie-shi/index.html","hash":"61b03843bb0eea027f593a715ccd61aca8746952","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-explain-zi-duan-han-yi/index.html","hash":"5df27316490924d0be6d601ee72eb164ffb8185a","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-cun-chu-yin-qing-he-ti-xi-jie-gou/index.html","hash":"7500d6ea02e9eadcfed4f3de5e961c26018a90e6","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-innodb-cun-chu-yin-qing/index.html","hash":"cd127231b241c5ec96f7ad3bb6903985f8385a5d","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-wen-jian/index.html","hash":"e9d005de046f9e7c62acc57a3ad0d7f712cfad9c","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-biao/index.html","hash":"d72d27fc4d38cb35b7b7fe51c287f95ee6bf94a0","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-suo-yin-yu-suan-fa/index.html","hash":"387eadea99d57afe93799b0c5fa5884ce8a32c55","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-shi-wu/index.html","hash":"0a6a73076d345a9852e3f074ac4e6da6a92e9255","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-bei-fen-yu-hui-fu/index.html","hash":"8f623e77289f70bca047d026ce07babefb5bf888","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/ip-zhuan-int-int-zhuan-ip/index.html","hash":"21c001e7603d8781a5ab2dfd48c9e001c4274101","modified":1615114584063},{"_id":"public/suan-fa/suan-fa-dao-lun-yi-ge-shu-zu-zhong-shi-xian-liang-ge-zhan/index.html","hash":"05080f8e61235a7d692e12f87c5cb490ca9decb7","modified":1615120633425},{"_id":"public/suan-fa/suan-fa-dao-lun-dan-shu-zu-shi-xian-shuang-duan-dui-lie/index.html","hash":"b33fb33671dd1b9f65fee7326c33c5ae1ac7bc77","modified":1615120633425},{"_id":"public/suan-fa/suan-fa-dao-lun-liang-ge-zhan-shi-xian-dui-lie/index.html","hash":"ed90b03384b8c14cb5d7a1cf5aed5943b2e5846a","modified":1615120633425},{"_id":"public/suan-fa/suan-fa-dao-lun-liang-ge-dui-lie-shi-xian-zhan/index.html","hash":"2c59dabcf4822488dac9358e66f4f261ed02bcc7","modified":1615120633425},{"_id":"public/xiao-lu-gong-ju/golang-san-xing-dai-ma-fa-song-ding-ding-ji-qi-ren-xiao-xi/index.html","hash":"27550a06fe00d29db957ef3be14b5a5a0502e175","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/ni-de-aes-jia-mi-jie-guo-xiang-tong-ma/index.html","hash":"f37dce2f7326cc72cdedefdd84a59ab12aa9eb5a","modified":1615120633425},{"_id":"public/page/2/index.html","hash":"046fda6fc30996b09a74bc27de7fb58124647a87","modified":1615120633425},{"_id":"public/tags/AES/index.html","hash":"d42d7f0be0da11b595645a3bf1f953605bbc5471","modified":1615120633425},{"_id":"public/tags/工具/index.html","hash":"1ee054ca8152b0b3b7dc75516ab3e29e156fccd9","modified":1615120633425},{"_id":"public/tags/IP/index.html","hash":"43313c0f2ca2d684936de81dae37e6314d784264","modified":1615120633425},{"_id":"public/tags/Utils/index.html","hash":"4cb1416a8e387cae3850b7c00fa0cadbc6596392","modified":1615120633425},{"_id":"public/tags/Mysql/index.html","hash":"98cc279c33fe7de19c5772c50fe017caae011b65","modified":1615120633425},{"_id":"public/tags/算法导论/index.html","hash":"5f4f119c1fc8fd8fc288b1f9cbb6cde73204eaea","modified":1615120633425},{"_id":"public/tags/面试/index.html","hash":"4fde893794ca78113cc563a5d8a6d6fa68cb5fd2","modified":1615120633425},{"_id":"public/tags/Redis/index.html","hash":"90eea43641244a4c7bbea91252dd62d5b10ca8b2","modified":1615120633425},{"_id":"public/tags/图片/index.html","hash":"2186c55667933ead1e5423f2e14f8c9e997014e3","modified":1615120633425},{"_id":"public/archives/page/2/index.html","hash":"2e49d1d8c9760bd8bf756c7dc0f4a3aa6450062a","modified":1615120633425},{"_id":"public/archives/2021/page/2/index.html","hash":"8db89d4b665f9aee2cf8b22da66388becb21aad6","modified":1615120633425},{"_id":"public/archives/2021/03/page/2/index.html","hash":"59e4a7900229d8143a05b8c41e0267c9fd14a46d","modified":1615120633425},{"_id":"public/categories/效率工具/index.html","hash":"2cb1384a3a0ebe68bf942735a99c13f523a551ff","modified":1615120633425},{"_id":"public/categories/算法/index.html","hash":"b8dbd25c393b62c68f66e2c68d46fe0605c7aab4","modified":1615120633425},{"_id":"public/categories/数据库/index.html","hash":"e37828b2fb3a2ec51cc3abcb5a882ef452a3be81","modified":1615120633425},{"_id":"public/categories/中间件/index.html","hash":"d4129b03043b3167e0b2a1b695a5339dced7c0e2","modified":1615120633425},{"_id":"source/_posts/2021-03-07-Git-常用命令整理.md","hash":"9184d64944b02b9e71a5e22f6e11ea69cdaaf3c9","modified":1615117960710},{"_id":"source/_posts/2021-03-07-Linux-vim基本操作命令.md","hash":"6ef755bdff5f13b7080246aa4bf56794a95e4cac","modified":1615117805975},{"_id":"source/_posts/2021-03-07-Golang-三行代码发送钉钉机器人消息.md","hash":"f512e9b37a081af8fb6c9c7f3dcfee9c20f4bf09","modified":1615117619743},{"_id":"source/_posts/2021-03-07-Golang-字符串高效拼接.md","hash":"fef786bb88b303efbf7588d898abe2f0b9fa6dbe","modified":1615117370827},{"_id":"source/_posts/2021-03-07-Mac-安装sshpass.md","hash":"38e4355094382932fe0a4da3ce940fa5171ecef8","modified":1615116423445},{"_id":"source/_posts/2021-03-07-Linux-常用命令整理.md","hash":"60907a31ae6c3ef1613222903f2d3185094268d1","modified":1615118517821},{"_id":"source/_posts/2021-03-07-Mysql-主从同步原理.md","hash":"60768cbba7903ea15224fcce3537652c997b0a8b","modified":1615117855031},{"_id":"source/_posts/2021-03-07-Python-BloomFilter实现.md","hash":"239fec018e9a18a3a4ff0be677f5d559b3317031","modified":1615117582470},{"_id":"source/_posts/2021-03-07-Mysql-锁.md","hash":"5dbf63b8da074f4b46d6e17ad4b6ceb148bb7b9b","modified":1615118197675},{"_id":"source/_posts/2021-03-07-Python-PIL—Color.md","hash":"da088c02734764873488a8ac30f3a3cb341a8c28","modified":1615117010566},{"_id":"source/_posts/2021-03-07-Python-PIL—Mode-ImageFilter对比实践.md","hash":"feb101ab12a8c298a8dd0b57624ba4f719faae36","modified":1615117177839},{"_id":"source/_posts/2021-03-07-Python-Windows多版本安装.md","hash":"589fdb44ec754822a750b4abf5ef22c74961504c","modified":1615118294322},{"_id":"source/_posts/2021-03-07-Python-PIL—ImageFilter函数.md","hash":"841352a68f942667ddf294716c89141b6df1e3db","modified":1615116992334},{"_id":"source/_posts/2021-03-07-Python-PIL—Transpose-Blend-Split-Composite.md","hash":"d8a06c8250b9683f0b774c7eceba4bec82645d94","modified":1615117104381},{"_id":"source/_posts/2021-03-07-Python-基础知识整理.md","hash":"e2a34d94ec24b89b2997b2538d9f23b31c44402a","modified":1615116630262},{"_id":"source/_posts/2021-03-07-Python-随机函数.md","hash":"585a279ea7512812e0b7e1dc00167b133441c7f3","modified":1615118512558},{"_id":"source/_posts/2021-03-07-Python-官网例子读懂MRO继承.md","hash":"43625bddb100f82fd0fa8efd4dd0255d40927745","modified":1615118149684},{"_id":"source/_posts/2021-03-07-Redis-exists有可能超出你的预期.md","hash":"2ffa4e7c81491877f9ab58ea14bd748ad3d8b7ec","modified":1615117284046},{"_id":"source/_posts/2021-03-07-Redis-expire比exists更好用.md","hash":"c49e15560112c8267f5db075bab4120b210c479c","modified":1615116794868},{"_id":"source/_posts/2021-03-07-常用在线网站.md","hash":"4ea97427ec58c328ad120197a9b90973e3f0473f","modified":1615116091387},{"_id":"source/_posts/2021-03-07-Redis-两次redis操作用不用pipeline.md","hash":"8691d0cc4f74b195b5d3bfec057dbc9c79df4016","modified":1615116698192},{"_id":"source/_posts/2021-03-07-杂-ip转int，int转ip.md","hash":"5409c7372eb31c937188bf374e79fbb954af453b","modified":1615117659834},{"_id":"source/_posts/2021-03-07-程序人生-优秀的工程师文化.md","hash":"56f3aae73a101eb0f0df8016394c8ef2ec35839b","modified":1615116533190},{"_id":"source/_posts/2021-03-07-软件-Airflow安装与简单使用.md","hash":"b18a8562aabe9892a0737cd17d52bbb4e2f03955","modified":1615118765443},{"_id":"source/_posts/2021-03-07-杂-整数的二进制中有几个1.md","hash":"1a59d89494b9cc896cca63ef33ccfcebe57fdea3","modified":1615118053728},{"_id":"source/_posts/2021-03-07-软件-Airflow进阶.md","hash":"010c2c9970834e130543a3bcae811e134ea76864","modified":1615118710165},{"_id":"public/uncatesgorized/ruan-jian-airflow-an-zhuang-yu-jian-dan-shi-yong/index.html","hash":"15ee678c6e531c283fe5465b1d8eb9686cdc6fbb","modified":1615120633425},{"_id":"public/uncatesgorized/ruan-jian-airflow-jin-jie/index.html","hash":"cbdae08f271ecb23587d645ed037cde5ddfb93dc","modified":1615120633425},{"_id":"public/xiao-lu-gong-ju/python-windows-duo-ban-ben-an-zhuang/index.html","hash":"0b864826360402ed8c67e5f9bd758f1980289cd4","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-sui-ji-han-shu/index.html","hash":"be5a39dbd979f94a4df2bfe1760d16a5f19afe0d","modified":1615120633425},{"_id":"public/uncatesgorized/za-zheng-shu-de-er-jin-zhi-zhong-you-ji-ge-1/index.html","hash":"6154c44b71cf90b27036535933c6ff02f9992242","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-suo/index.html","hash":"318e6dfb4e608b5e9a92aeeaa262f1afc58975e3","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-guan-wang-li-zi-du-dong-mro-ji-cheng/index.html","hash":"5f9143e0ec1e5653846036bd5d9618b352ed8053","modified":1615120633425},{"_id":"public/uncatesgorized/linux-chang-yong-ming-ling-zheng-li/index.html","hash":"68ad9da14503dd4b9ac30b22b12eb93aab9a85c0","modified":1615120633425},{"_id":"public/uncatesgorized/git-chang-yong-ming-ling-zheng-li/index.html","hash":"8cf54a75f70230ecbba283c2c2bed75abff627c0","modified":1615120633425},{"_id":"public/uncatesgorized/linux-vim-ji-ben-cao-zuo-ming-ling/index.html","hash":"900002bb692fff551882744e0b58da75421cac7e","modified":1615120633425},{"_id":"public/shu-ju-ku/mysql-zhu-cong-tong-bu-yuan-li/index.html","hash":"a88477f5b6a9d85b0a4857ab5dcbf23bb7149555","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/golang-zi-fu-chuan-gao-xiao-pin-jie/index.html","hash":"db45015b271b2aeff8e639e9a5686f57d31a54f7","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-pil-mode-imagefilter-dui-bi-shi-jian/index.html","hash":"f1652b4ebe53470026a48f1b2ffcf9c6fff22a7e","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/redis-exists-you-ke-neng-chao-chu-ni-de-yu-qi/index.html","hash":"59117fb5f0a1b5a4d577cdd0ae640ead995ec559","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-pil-transpose-blend-split-composite/index.html","hash":"895580292fc8014a6eb6aad25b34bc24e35e71be","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-pil-color/index.html","hash":"f8b94f846eca379fbb6d8f5f3ad1a145caa45efe","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-pil-imagefilter-han-shu/index.html","hash":"ecdcbc3421dfbd41d481027de4719dbaf7ad4c3e","modified":1615120633425},{"_id":"public/uncatesgorized/python-ji-chu-zhi-shi-zheng-li/index.html","hash":"e97952f8da730a04b70a8ee58aa04562bcafce7b","modified":1615120633425},{"_id":"public/uncatesgorized/cheng-xu-ren-sheng-you-xiu-de-gong-cheng-shi-wen-hua/index.html","hash":"c5d56c62e842716fee214866d07f60a7e017497a","modified":1615120633425},{"_id":"public/uncatesgorized/mac-an-zhuang-sshpass/index.html","hash":"83d02ae5750567e78658e4393814064b8707f246","modified":1615120633425},{"_id":"public/zhong-jian-jian/redis-liang-ci-redis-cao-zuo-yong-bu-yong-pipeline/index.html","hash":"46bca607099415755c34a5ece29789ac1288f054","modified":1615120633425},{"_id":"public/zhong-jian-jian/redis-expire-bi-exists-geng-hao-yong/index.html","hash":"a483db0e0a93233df53f4c4416426db5a5d7a2df","modified":1615120633425},{"_id":"public/xiao-lu-gong-ju/chang-yong-zai-xian-wang-zhan/index.html","hash":"db1bba2b6665131a0450125be050fc3f993c79eb","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/python-bloomfilter-shi-xian/index.html","hash":"74790bb00a25d2daea47427c31f2923fe44bec8c","modified":1615120633425},{"_id":"public/hou-duan-kai-fa/za-ip-zhuan-int-int-zhuan-ip/index.html","hash":"2589839e9383af1af9ee55fb01f5c11dd6e9509b","modified":1615120633425},{"_id":"public/archives/page/3/index.html","hash":"c5eb68be10873f5fa989fdd2325e36d17bdfccb4","modified":1615120633425},{"_id":"public/archives/2021/page/3/index.html","hash":"499ff39ff6aa2a817ef66381796e42751fc984c6","modified":1615120633425},{"_id":"public/archives/2021/03/page/3/index.html","hash":"0d521168356dc467e2bb0944bdf566c116a1a69b","modified":1615120633425},{"_id":"public/page/3/index.html","hash":"fe39681696192d8837326cf0267f231f37a567aa","modified":1615120633425},{"_id":"public/tags/Mac/index.html","hash":"393d27c696f8192643e5c69848d969b555f1e467","modified":1615120633425},{"_id":"public/tags/Python/index.html","hash":"fc4db2c7645d07b5dc9c81a6ca6b3a045da8842c","modified":1615120633425},{"_id":"public/tags/sshpass/index.html","hash":"4ecff8814a83a5d3ff4d30db671f0eb4edf42cfc","modified":1615120633425},{"_id":"public/tags/程序人生/index.html","hash":"520303487960a04a36322589ab514f8c7912523e","modified":1615120633425},{"_id":"public/tags/PIL/index.html","hash":"de93fbef23ee01076123e9b54da2108833c1b57b","modified":1615120633425},{"_id":"public/tags/Linux/index.html","hash":"0bf2f64898a160028f54c44f1e657d8c9f3685eb","modified":1615120633425},{"_id":"public/tags/算法/index.html","hash":"949476ee7e876c903aa2122cc612679b26bbd6f4","modified":1615120633425},{"_id":"public/tags/Airflow/index.html","hash":"883705b1280ef2dbf41f0851594e6568d3bff0f3","modified":1615120633425},{"_id":"public/tags/Git/index.html","hash":"20cfdbd6f0a094b4573cf9835fbc90abd15c4f1c","modified":1615120633425},{"_id":"public/tags/Vim/index.html","hash":"3e10ff5be7129e612887def3bb7e00a016b4bc2b","modified":1615120633425}],"Category":[{"name":"后端","_id":"cklyyhqw4000020s6dtmihbsy"},{"name":"后端开发","_id":"cklyyoqgf000320s6dzy09bsn"},{"name":"工具","_id":"cklyz06dv00066rs6bprm2s42"},{"name":"效率工具","_id":"cklyz0o2n000b6rs663bae4b8"},{"name":"算法","_id":"cklz02lpr000g6rs631v5a8j4"},{"name":"数据库","_id":"cklz0h8qn001l6rs65vzc8b68"},{"name":"中间件","_id":"cklz18iaz003k6rs6ein759kb"},{"name":"后端开发","parent":"cklz18iaz003k6rs6ein759kb","_id":"cklz2j7qq0008jvs6elxphcs3"},{"name":"中间件","parent":"cklyyoqgf000320s6dzy09bsn","_id":"cklz38924001ejvs6h4d51al6"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\n---\n","updated":"2021-03-07T12:36:20.535Z","path":"about/index.html","_id":"cklyxsf1h0000q1s6hmymbxgc","comments":1,"layout":"page","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"404","date":"2020-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-03-06T10:03:20.860Z","path":"404/index.html","comments":1,"_id":"cklyxsf1m0002q1s6b6o8hxbf","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"archives","date":"2021-03-07T09:08:12.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-03-07 17:08:12\ntype: \"archives\"\nlayout: \"archives\"\n---\n","updated":"2021-03-07T09:08:44.769Z","path":"archives/index.html","comments":1,"_id":"cklyxsf1q0005q1s6hqgybdze","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-03-07T08:57:52.423Z","path":"friends/index.html","comments":1,"_id":"cklyxsf1r0006q1s6b7lg4677","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-03-07T08:57:11.155Z","path":"categories/index.html","comments":1,"_id":"cklyxsf1s0007q1s67gl523gg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-03-07T09:24:15.255Z","path":"tags/index.html","_id":"cklyxsf1s000aq1s6epd3doue","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"你的AES加密结果相同吗","comments":1,"date":"2021-03-07T09:41:43.000Z","author":null,"_content":"## AES加密后的结果，数据接收方解不出来，是哪里的问题？\n\n#### AES的安全性：\n\n> 在[密码学](https://zh.wikipedia.org/wiki/密碼學)的意义上，只要存在一个方法，比[穷举法](https://zh.wikipedia.org/wiki/蛮力攻击)还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。\n\n#### AES加密方式有五种：\n\n- **电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。\n\n- **密码分组链接模式（Cipher Block Chaining (CBC)）**，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。\n\n  优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。\n\n  缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。\n\n  初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）\n\n- **计算器模式（Counter (CTR)）**, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。\n\n- **密码反馈模式（Cipher FeedBack (CFB)）**\n\n- **输出反馈模式（Output FeedBack (OFB)）**,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。\n\n#### 密钥长度三种：\n\n​\t密钥越长，安全强度越高，运算开销就会越大。\n\n- AES-128：16byte\n- AES-192：24byte\n- AES-256：32byte\n\n#### Padding：\n\n- PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。\n- PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。\n- NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。\n\n#### 实际使用中要注意的地方\n\n1. 密钥、初始向量相同。\n2. 加密模式相同。\n3. Padding模式相同。\n\n### 实现\n\n```go\nfunc aesEncrypt(orig string, key string) string {\n\t// 转成字节数组\n\torigData := []byte(orig)\n\tk := []byte(key)\n\t// 分组秘钥\n\tblock, err := aes.NewCipher(k)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"key 长度必须 16/24/32长度: %s\", err.Error()))\n\t}\n\t// 获取秘钥块的长度\n\tblockSize := block.BlockSize()\n\t// 补全码\n\torigData = PKCS7Padding(origData, blockSize)\n\t// 加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, k[:blockSize])\n\t// 创建数组\n\tcryted := make([]byte, len(origData))\n\t// 加密\n\tblockMode.CryptBlocks(cryted, origData)\n\treturn base64.RawURLEncoding.EncodeToString(cryted)\n\n}\n\nfunc aesDecrypt(cryted string, key string) string {\n\tcrytedByte, _ := base64.RawURLEncoding.DecodeString(cryted)\n\tk := []byte(key)\n\n\t// 分组秘钥\n\tblock, err := aes.NewCipher(k)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"key 长度必须 16/24/32长度: %s\", err.Error()))\n\t}\n\t// 获取秘钥块的长度\n\tblockSize := block.BlockSize()\n\t// 加密模式\n\tblockMode := cipher.NewCBCDecrypter(block, k[:blockSize])\n\t// 创建数组\n\torig := make([]byte, len(crytedByte))\n\t// 解密\n\tblockMode.CryptBlocks(orig, crytedByte)\n\t// 去补全码\n\torig = PKCS7UnPadding(orig)\n\treturn string(orig)\n}\n```\n\n#### 结束了吗？\n\n加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，**hex**和**base64**。如果使用了base64进行编码，那么还有一个需要双方约定的地方。\n\n\n### Base64\n\nBase64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。\n\n注意：后端与js通信时base64模式的选择🐶\n\n| 模式           | 区别                                                    | 备注 |\n| -------------- | ------------------------------------------------------- | ---- |\n| StdEncoding    | 字符串由A-Za-z0-9+/组成，字节长度不能被3整除，用=补足   |      |\n| RawStdEncoding | 字符串由A-Za-z0-9+/组成，字节长度不能被3整除，不用=补足 |      |\n| URLEncoding    | 字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用=补足   |      |\n| RawURLEncoding | 字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用=补足 |      |\n\n```go\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\nconst encodeURL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n```\n\n```go\n//编码\nbase64.StdEncoding.EncodeToString(data)\nbase64.StdEncoding.DecodeString(data)\nbase64.RawStdEncoding.EncodeToString(data)\nbase64.RawStdEncoding.DecodeString(data)\n//解码\nbase64.URLEncoding.EncodeToString(data)\nbase64.URLEncoding.DecodeString(data)\nbase64.RawURLEncoding.EncodeToString(data)\nbase64.RawURLEncoding.DecodeString(data)\n```\n\n\n","source":"_posts/2021-03-07-你的AES加密结果相同吗.md","raw":"---\ntitle: 你的AES加密结果相同吗\ncomments: true\ndate: 2021-03-07 17:41:43\nauthor:\ntags: \n - Golang\n - AES\ncategories:\n - 后端开发\n---\n## AES加密后的结果，数据接收方解不出来，是哪里的问题？\n\n#### AES的安全性：\n\n> 在[密码学](https://zh.wikipedia.org/wiki/密碼學)的意义上，只要存在一个方法，比[穷举法](https://zh.wikipedia.org/wiki/蛮力攻击)还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。\n\n#### AES加密方式有五种：\n\n- **电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。\n\n- **密码分组链接模式（Cipher Block Chaining (CBC)）**，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。\n\n  优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。\n\n  缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。\n\n  初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）\n\n- **计算器模式（Counter (CTR)）**, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。\n\n- **密码反馈模式（Cipher FeedBack (CFB)）**\n\n- **输出反馈模式（Output FeedBack (OFB)）**,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。\n\n#### 密钥长度三种：\n\n​\t密钥越长，安全强度越高，运算开销就会越大。\n\n- AES-128：16byte\n- AES-192：24byte\n- AES-256：32byte\n\n#### Padding：\n\n- PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。\n- PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。\n- NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。\n\n#### 实际使用中要注意的地方\n\n1. 密钥、初始向量相同。\n2. 加密模式相同。\n3. Padding模式相同。\n\n### 实现\n\n```go\nfunc aesEncrypt(orig string, key string) string {\n\t// 转成字节数组\n\torigData := []byte(orig)\n\tk := []byte(key)\n\t// 分组秘钥\n\tblock, err := aes.NewCipher(k)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"key 长度必须 16/24/32长度: %s\", err.Error()))\n\t}\n\t// 获取秘钥块的长度\n\tblockSize := block.BlockSize()\n\t// 补全码\n\torigData = PKCS7Padding(origData, blockSize)\n\t// 加密模式\n\tblockMode := cipher.NewCBCEncrypter(block, k[:blockSize])\n\t// 创建数组\n\tcryted := make([]byte, len(origData))\n\t// 加密\n\tblockMode.CryptBlocks(cryted, origData)\n\treturn base64.RawURLEncoding.EncodeToString(cryted)\n\n}\n\nfunc aesDecrypt(cryted string, key string) string {\n\tcrytedByte, _ := base64.RawURLEncoding.DecodeString(cryted)\n\tk := []byte(key)\n\n\t// 分组秘钥\n\tblock, err := aes.NewCipher(k)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"key 长度必须 16/24/32长度: %s\", err.Error()))\n\t}\n\t// 获取秘钥块的长度\n\tblockSize := block.BlockSize()\n\t// 加密模式\n\tblockMode := cipher.NewCBCDecrypter(block, k[:blockSize])\n\t// 创建数组\n\torig := make([]byte, len(crytedByte))\n\t// 解密\n\tblockMode.CryptBlocks(orig, crytedByte)\n\t// 去补全码\n\torig = PKCS7UnPadding(orig)\n\treturn string(orig)\n}\n```\n\n#### 结束了吗？\n\n加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，**hex**和**base64**。如果使用了base64进行编码，那么还有一个需要双方约定的地方。\n\n\n### Base64\n\nBase64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。\n\n注意：后端与js通信时base64模式的选择🐶\n\n| 模式           | 区别                                                    | 备注 |\n| -------------- | ------------------------------------------------------- | ---- |\n| StdEncoding    | 字符串由A-Za-z0-9+/组成，字节长度不能被3整除，用=补足   |      |\n| RawStdEncoding | 字符串由A-Za-z0-9+/组成，字节长度不能被3整除，不用=补足 |      |\n| URLEncoding    | 字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用=补足   |      |\n| RawURLEncoding | 字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用=补足 |      |\n\n```go\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\nconst encodeURL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n```\n\n```go\n//编码\nbase64.StdEncoding.EncodeToString(data)\nbase64.StdEncoding.DecodeString(data)\nbase64.RawStdEncoding.EncodeToString(data)\nbase64.RawStdEncoding.DecodeString(data)\n//解码\nbase64.URLEncoding.EncodeToString(data)\nbase64.URLEncoding.DecodeString(data)\nbase64.RawURLEncoding.EncodeToString(data)\nbase64.RawURLEncoding.DecodeString(data)\n```\n\n\n","slug":"你的AES加密结果相同吗","published":1,"updated":"2021-03-07T09:48:51.814Z","_id":"cklz07gsv000p6rs66pxpc2wo","layout":"post","photos":[],"link":"","content":"<h2 id=\"AES加密后的结果，数据接收方解不出来，是哪里的问题？\"><a href=\"#AES加密后的结果，数据接收方解不出来，是哪里的问题？\" class=\"headerlink\" title=\"AES加密后的结果，数据接收方解不出来，是哪里的问题？\"></a>AES加密后的结果，数据接收方解不出来，是哪里的问题？</h2><h4 id=\"AES的安全性：\"><a href=\"#AES的安全性：\" class=\"headerlink\" title=\"AES的安全性：\"></a>AES的安全性：</h4><blockquote>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8\">密码学</a>的意义上，只要存在一个方法，比<a href=\"https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB\">穷举法</a>还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。</p>\n</blockquote>\n<h4 id=\"AES加密方式有五种：\"><a href=\"#AES加密方式有五种：\" class=\"headerlink\" title=\"AES加密方式有五种：\"></a>AES加密方式有五种：</h4><ul>\n<li><p>**电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。</p>\n</li>\n<li><p><strong>密码分组链接模式（Cipher Block Chaining (CBC)）</strong>，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p>\n<p>优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</p>\n<p>缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</p>\n<p>初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p>\n</li>\n<li><p><strong>计算器模式（Counter (CTR)）</strong>, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。</p>\n</li>\n<li><p><strong>密码反馈模式（Cipher FeedBack (CFB)）</strong></p>\n</li>\n<li><p><strong>输出反馈模式（Output FeedBack (OFB)）</strong>,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p>\n</li>\n</ul>\n<h4 id=\"密钥长度三种：\"><a href=\"#密钥长度三种：\" class=\"headerlink\" title=\"密钥长度三种：\"></a>密钥长度三种：</h4><p>​    密钥越长，安全强度越高，运算开销就会越大。</p>\n<ul>\n<li>AES-128：16byte</li>\n<li>AES-192：24byte</li>\n<li>AES-256：32byte</li>\n</ul>\n<h4 id=\"Padding：\"><a href=\"#Padding：\" class=\"headerlink\" title=\"Padding：\"></a>Padding：</h4><ul>\n<li>PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。</li>\n<li>PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。</li>\n<li>NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。</li>\n</ul>\n<h4 id=\"实际使用中要注意的地方\"><a href=\"#实际使用中要注意的地方\" class=\"headerlink\" title=\"实际使用中要注意的地方\"></a>实际使用中要注意的地方</h4><ol>\n<li>密钥、初始向量相同。</li>\n<li>加密模式相同。</li>\n<li>Padding模式相同。</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">aesEncrypt</span><span class=\"token punctuation\">(</span>orig <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 转成字节数组</span>\n\torigData <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n\tk <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 分组秘钥</span>\n\tblock<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">NewCipher</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key 长度必须 16/24/32长度: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获取秘钥块的长度</span>\n\tblockSize <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">BlockSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 补全码</span>\n\torigData <span class=\"token operator\">=</span> <span class=\"token function\">PKCS7Padding</span><span class=\"token punctuation\">(</span>origData<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密模式</span>\n\tblockMode <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCBCEncrypter</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blockSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 创建数组</span>\n\tcryted <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>origData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密</span>\n\tblockMode<span class=\"token punctuation\">.</span><span class=\"token function\">CryptBlocks</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">,</span> origData<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> base64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">aesDecrypt</span><span class=\"token punctuation\">(</span>cryted <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\tcrytedByte<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> base64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">)</span>\n\tk <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 分组秘钥</span>\n\tblock<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">NewCipher</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key 长度必须 16/24/32长度: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获取秘钥块的长度</span>\n\tblockSize <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">BlockSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密模式</span>\n\tblockMode <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCBCDecrypter</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blockSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 创建数组</span>\n\torig <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>crytedByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 解密</span>\n\tblockMode<span class=\"token punctuation\">.</span><span class=\"token function\">CryptBlocks</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">,</span> crytedByte<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 去补全码</span>\n\torig <span class=\"token operator\">=</span> <span class=\"token function\">PKCS7UnPadding</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"结束了吗？\"><a href=\"#结束了吗？\" class=\"headerlink\" title=\"结束了吗？\"></a>结束了吗？</h4><p>加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，<strong>hex</strong>和<strong>base64</strong>。如果使用了base64进行编码，那么还有一个需要双方约定的地方。</p>\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><p>Base64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。</p>\n<p>注意：后端与js通信时base64模式的选择🐶</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>区别</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>StdEncoding</td>\n<td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>RawStdEncoding</td>\n<td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，不用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>URLEncoding</td>\n<td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>RawURLEncoding</td>\n<td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用=补足</td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> encodeStd <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span>\n<span class=\"token keyword\">const</span> encodeURL <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//编码</span>\nbase64<span class=\"token punctuation\">.</span>StdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>StdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawStdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawStdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//解码</span>\nbase64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"AES加密后的结果，数据接收方解不出来，是哪里的问题？\"><a href=\"#AES加密后的结果，数据接收方解不出来，是哪里的问题？\" class=\"headerlink\" title=\"AES加密后的结果，数据接收方解不出来，是哪里的问题？\"></a>AES加密后的结果，数据接收方解不出来，是哪里的问题？</h2><h4 id=\"AES的安全性：\"><a href=\"#AES的安全性：\" class=\"headerlink\" title=\"AES的安全性：\"></a>AES的安全性：</h4><blockquote>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8\">密码学</a>的意义上，只要存在一个方法，比<a href=\"https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB\">穷举法</a>还要更有效率，就能被视为一种“破解”。故一个针对AES 128位密钥的攻击若“只”需要2^120^计算复杂度（少于穷举法　2^128^），128位密钥的AES就算被破解了。从应用的角度来看，这种程度的破解依然太不切实际。</p>\n</blockquote>\n<h4 id=\"AES加密方式有五种：\"><a href=\"#AES加密方式有五种：\" class=\"headerlink\" title=\"AES加密方式有五种：\"></a>AES加密方式有五种：</h4><ul>\n<li><p>**电码本模式（Electronic Codebook Book (ECB)**，将整个明文分成若干段相同的小段，然后对每一小段进行加密。</p>\n</li>\n<li><p><strong>密码分组链接模式（Cipher Block Chaining (CBC)）</strong>，先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p>\n<p>优点：能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</p>\n<p>缺点：（1）不利于并行计算；（2）传递误差——前一个出错则后续全错；（3）第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</p>\n<p>初始化IV的选取方式：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p>\n</li>\n<li><p><strong>计算器模式（Counter (CTR)）</strong>, 完全的流模式。将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 。</p>\n</li>\n<li><p><strong>密码反馈模式（Cipher FeedBack (CFB)）</strong></p>\n</li>\n<li><p><strong>输出反馈模式（Output FeedBack (OFB)）</strong>,密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p>\n</li>\n</ul>\n<h4 id=\"密钥长度三种：\"><a href=\"#密钥长度三种：\" class=\"headerlink\" title=\"密钥长度三种：\"></a>密钥长度三种：</h4><p>​    密钥越长，安全强度越高，运算开销就会越大。</p>\n<ul>\n<li>AES-128：16byte</li>\n<li>AES-192：24byte</li>\n<li>AES-256：32byte</li>\n</ul>\n<h4 id=\"Padding：\"><a href=\"#Padding：\" class=\"headerlink\" title=\"Padding：\"></a>Padding：</h4><ul>\n<li>PKCS5：PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。</li>\n<li>PKCS7：PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。</li>\n<li>NOPADDING：指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。</li>\n</ul>\n<h4 id=\"实际使用中要注意的地方\"><a href=\"#实际使用中要注意的地方\" class=\"headerlink\" title=\"实际使用中要注意的地方\"></a>实际使用中要注意的地方</h4><ol>\n<li>密钥、初始向量相同。</li>\n<li>加密模式相同。</li>\n<li>Padding模式相同。</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">aesEncrypt</span><span class=\"token punctuation\">(</span>orig <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 转成字节数组</span>\n\torigData <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n\tk <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 分组秘钥</span>\n\tblock<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">NewCipher</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key 长度必须 16/24/32长度: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获取秘钥块的长度</span>\n\tblockSize <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">BlockSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 补全码</span>\n\torigData <span class=\"token operator\">=</span> <span class=\"token function\">PKCS7Padding</span><span class=\"token punctuation\">(</span>origData<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密模式</span>\n\tblockMode <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCBCEncrypter</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blockSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 创建数组</span>\n\tcryted <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>origData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密</span>\n\tblockMode<span class=\"token punctuation\">.</span><span class=\"token function\">CryptBlocks</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">,</span> origData<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> base64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">aesDecrypt</span><span class=\"token punctuation\">(</span>cryted <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\tcrytedByte<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> base64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>cryted<span class=\"token punctuation\">)</span>\n\tk <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 分组秘钥</span>\n\tblock<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">NewCipher</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key 长度必须 16/24/32长度: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获取秘钥块的长度</span>\n\tblockSize <span class=\"token operator\">:=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">BlockSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 加密模式</span>\n\tblockMode <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCBCDecrypter</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>blockSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 创建数组</span>\n\torig <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>crytedByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 解密</span>\n\tblockMode<span class=\"token punctuation\">.</span><span class=\"token function\">CryptBlocks</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">,</span> crytedByte<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 去补全码</span>\n\torig <span class=\"token operator\">=</span> <span class=\"token function\">PKCS7UnPadding</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>orig<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"结束了吗？\"><a href=\"#结束了吗？\" class=\"headerlink\" title=\"结束了吗？\"></a>结束了吗？</h4><p>加密或解密结果通常是byte数组，需要进一步转换为字符串。这时候通常又有两种选择，<strong>hex</strong>和<strong>base64</strong>。如果使用了base64进行编码，那么还有一个需要双方约定的地方。</p>\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><p>Base64编码好处：简短、不可读性，即所编码的数据不会被人用肉眼所直接看到。</p>\n<p>注意：后端与js通信时base64模式的选择🐶</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>区别</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>StdEncoding</td>\n<td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>RawStdEncoding</td>\n<td>字符串由A-Za-z0-9+/组成，字节长度不能被3整除，不用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>URLEncoding</td>\n<td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，用=补足</td>\n<td></td>\n</tr>\n<tr>\n<td>RawURLEncoding</td>\n<td>字符串由A-Za-z0-9-_组成，字节长度不能被3整除，不用=补足</td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> encodeStd <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span>\n<span class=\"token keyword\">const</span> encodeURL <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//编码</span>\nbase64<span class=\"token punctuation\">.</span>StdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>StdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawStdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawStdEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//解码</span>\nbase64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nbase64<span class=\"token punctuation\">.</span>RawURLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n"},{"title":"Golang sync/atomic包的原子操作是怎么保证的","date":"2021-03-07T09:28:35.000Z","author":null,"_content":"在Go语言标准库中，`sync/atomic`包将底层硬件提供的原子级内存操作封装成了Go的函数。\n\n`Mutex`由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在`lock-free`的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。\n\n### 数据类型\n\n- int32\n- int64\n- uint32\n- uint64\n- uintptr\n- unsafe.Pointer\n\n### 操作类型\n\n- 增或减 AddXXX\n\n  ```go\n  *addr += delta\n  return *addr\n  ```\n\n- 比较并交换 CompareAndSwapXXX\n\n  ```go\n  if *addr == old {\n  \t*addr = new\n  \treturn true\n  }\n  return false\n  ```\n\n- 载入 LoadXXX\n\n  ```go\n  return *addr\n  ```\n\n- 存储 StoreXXX\n\n  ```go\n  *addr = val\n  ```\n\n- 交换 SwapXXX\n\n  ```go\n  old = *addr\n  *addr = new\n  return old\n  ```\n\n\n\n### 什么操作叫做原子操作？\n\n一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。\n\n在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。\n\n### 用锁行不行？\n原子操作由**底层硬件**支持，而锁则由操作系统的**调度器**实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用`atomic.Value`封装好的实现。\n\n#### 值类型操作\n\n- 如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。\n\n```go\n//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功\n//利用for循环以进行多次尝试\nvar value int32\n\nfunc addValue1(delta int32){\n\tfor{\n\t\t//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的\n\t\t//那么这个读操作很可能会读取到一个只被修改了一半的数据\n\t\tv := value\n\t\tif atomic.CompareAndSwapInt32(&value, v, v + delta){\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n\n- 用Load函数防止只读取一半有效数据的发生\n\n```go\nfunc addValue2(delta int32){\n    for{\n    \t//使用载入\n\t\tv := atomic.LoadInt32(&value)\n        if atomic.CompareAndSwapInt32(&value, v, v + delta){\n            //在函数的结果值为true时,退出循环\n            break\n        }\n    }\n}\n```\n\n#### struct类型操作\n\n- 如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。\n- 面对这种多线程下变量的读写问题，1.4 版本的时候 `atomic.Value`登场，它使得我们可以不依赖于不保证兼容性的`unsafe.Pointer`类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。\n\n```go\n// 使用示例\n\ntype Config struct {\n\tAddr string\n\tPort string\n}\n\nfunc (c Config) String() string {\n\treturn c.Addr + \":\" + c.Port\n}\n\nfunc loadConfig() Config {\n\t// do something\n\treturn Config{}\n}\nfunc automicValue() {\n\tvar config atomic.Value\n\twg := sync.WaitGroup{}\n\tgo func() {\n\t\tfor {\n\t\t\ttime.Sleep(time.Millisecond)\n\t\t\tconfig.Store(loadConfig())\n\t\t}\n\t}()\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tc := config.Load().(Config)\n\t\t\tfmt.Println(c)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n}\n```\n\n#### atomic.Value 设计与实现\n\n`atomic`包中除了`atomic.Value`外，其余都是早期由汇编写成的，`atomic.Value`类型的底层实现也是建立在已有的`atomic`包的基础上。\n\n> ##### goroutine抢占\n>\n> Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由`runtime.GOMAXPROCS`指定。\n>\n> 调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。\n>\n> 所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。\n\n```go\n//atomic.Value源码\n\ntype Value struct {\n\tv interface{} // 所以可以存储任何类型的数据\n}\n\n// 空 interface{} 的内部表示格式，作用是将interface{}类型分解，得到其中两个字段\ntype ifaceWords struct {\n\ttyp  unsafe.Pointer\n\tdata unsafe.Pointer\n}\n\n// 取数据就是正常走流程\nfunc (v *Value) Load() (x interface{}) {\n\tvp := (*ifaceWords)(unsafe.Pointer(v))\n\ttyp := LoadPointer(&vp.typ)\n\tif typ == nil || uintptr(typ) == ^uintptr(0) {\n\t\t// 第一次还没写入\n\t\treturn nil\n\t}\n  // 构造新的interface{}返回出去\n\tdata := LoadPointer(&vp.data)\n\txp := (*ifaceWords)(unsafe.Pointer(&x))\n\txp.typ = typ\n\txp.data = data\n\treturn\n}\n\n// 写数据（如何保证数据完整性）\nfunc (v *Value) Store(x interface{}) {\n\tif x == nil {\n\t\tpanic(\"sync/atomic: store of nil value into Value\")\n\t}\n  // 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换\n\tvp := (*ifaceWords)(unsafe.Pointer(v)) // 旧值\n\txp := (*ifaceWords)(unsafe.Pointer(&x)) // 新值\n\tfor { // 配合CompareAndSwap达到乐观锁的功效\n\t\ttyp := LoadPointer(&vp.typ)\n\t\tif typ == nil { // 第一次写入\n\t\t\truntime_procPin() // 禁止抢占\n\t\t\tif !CompareAndSwapPointer(&vp.typ, nil, unsafe.Pointer(^uintptr(0))) {\n\t\t\t\truntime_procUnpin() // 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// 首次赋值\n\t\t\tStorePointer(&vp.data, xp.data)\n\t\t\tStorePointer(&vp.typ, xp.typ)\n\t\t\truntime_procUnpin() // 写入成功，解除占用状态\n\t\t\treturn\n\t\t}\n\t\tif uintptr(typ) == ^uintptr(0) {\n\t\t\t// 第一次写入还未完成，继续等待\n\t\t\tcontinue\n\t\t}\n\t\t// 两次需要写入相同类型\n\t\tif typ != xp.typ {\n\t\t\tpanic(\"sync/atomic: store of inconsistently typed value into Value\")\n\t\t}\n\t\tStorePointer(&vp.data, xp.data)\n\t\treturn\n\t}\n}\n\n// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。\nfunc runtime_procPin()\n// 解除G的禁止抢占状态，之后G可被抢占。\nfunc runtime_procUnpin()\n\n```\n\n---\n\n#### 参考文章\n\n[Go语言中文网](https://studygolang.com/pkgdoc)\n\n[Go 语言标准库中 atomic.Value 的前世今生](https://blog.betacat.io/post/golang-atomic-value-exploration/)\n\n[你不知道的Go unsafe.Pointer uintptr原理和玩法](https://www.cnblogs.com/sunsky303/p/11820500.html)\n\n[理解Go 1.13中sync.Pool的设计与实现](https://segmentfault.com/a/1190000021944703)\n\n[Go Slice 最大容量大小是怎么来的](https://segmentfault.com/a/1190000017783070)\n\n[Golang 的 协程调度机制 与 GOMAXPROCS 性能调优](https://juejin.cn/post/6844903662553137165)\n\n[Golang同步：原子操作使用](https://www.kancloud.cn/digest/batu-go/153537)","source":"_posts/2021-03-07-Golang-sync-atomic包的原子操作是怎么保证的.md","raw":"---\ntitle: Golang sync/atomic包的原子操作是怎么保证的\ndate: 2021-03-07 17:28:35\nauthor: \ntags: \n - Golang\n - atomic包\ncategories: \n - 后端开发\n---\n在Go语言标准库中，`sync/atomic`包将底层硬件提供的原子级内存操作封装成了Go的函数。\n\n`Mutex`由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在`lock-free`的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。\n\n### 数据类型\n\n- int32\n- int64\n- uint32\n- uint64\n- uintptr\n- unsafe.Pointer\n\n### 操作类型\n\n- 增或减 AddXXX\n\n  ```go\n  *addr += delta\n  return *addr\n  ```\n\n- 比较并交换 CompareAndSwapXXX\n\n  ```go\n  if *addr == old {\n  \t*addr = new\n  \treturn true\n  }\n  return false\n  ```\n\n- 载入 LoadXXX\n\n  ```go\n  return *addr\n  ```\n\n- 存储 StoreXXX\n\n  ```go\n  *addr = val\n  ```\n\n- 交换 SwapXXX\n\n  ```go\n  old = *addr\n  *addr = new\n  return old\n  ```\n\n\n\n### 什么操作叫做原子操作？\n\n一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。\n\n在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。\n\n### 用锁行不行？\n原子操作由**底层硬件**支持，而锁则由操作系统的**调度器**实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用`atomic.Value`封装好的实现。\n\n#### 值类型操作\n\n- 如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。\n\n```go\n//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功\n//利用for循环以进行多次尝试\nvar value int32\n\nfunc addValue1(delta int32){\n\tfor{\n\t\t//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的\n\t\t//那么这个读操作很可能会读取到一个只被修改了一半的数据\n\t\tv := value\n\t\tif atomic.CompareAndSwapInt32(&value, v, v + delta){\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n\n- 用Load函数防止只读取一半有效数据的发生\n\n```go\nfunc addValue2(delta int32){\n    for{\n    \t//使用载入\n\t\tv := atomic.LoadInt32(&value)\n        if atomic.CompareAndSwapInt32(&value, v, v + delta){\n            //在函数的结果值为true时,退出循环\n            break\n        }\n    }\n}\n```\n\n#### struct类型操作\n\n- 如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。\n- 面对这种多线程下变量的读写问题，1.4 版本的时候 `atomic.Value`登场，它使得我们可以不依赖于不保证兼容性的`unsafe.Pointer`类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。\n\n```go\n// 使用示例\n\ntype Config struct {\n\tAddr string\n\tPort string\n}\n\nfunc (c Config) String() string {\n\treturn c.Addr + \":\" + c.Port\n}\n\nfunc loadConfig() Config {\n\t// do something\n\treturn Config{}\n}\nfunc automicValue() {\n\tvar config atomic.Value\n\twg := sync.WaitGroup{}\n\tgo func() {\n\t\tfor {\n\t\t\ttime.Sleep(time.Millisecond)\n\t\t\tconfig.Store(loadConfig())\n\t\t}\n\t}()\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tc := config.Load().(Config)\n\t\t\tfmt.Println(c)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n}\n```\n\n#### atomic.Value 设计与实现\n\n`atomic`包中除了`atomic.Value`外，其余都是早期由汇编写成的，`atomic.Value`类型的底层实现也是建立在已有的`atomic`包的基础上。\n\n> ##### goroutine抢占\n>\n> Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由`runtime.GOMAXPROCS`指定。\n>\n> 调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。\n>\n> 所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。\n\n```go\n//atomic.Value源码\n\ntype Value struct {\n\tv interface{} // 所以可以存储任何类型的数据\n}\n\n// 空 interface{} 的内部表示格式，作用是将interface{}类型分解，得到其中两个字段\ntype ifaceWords struct {\n\ttyp  unsafe.Pointer\n\tdata unsafe.Pointer\n}\n\n// 取数据就是正常走流程\nfunc (v *Value) Load() (x interface{}) {\n\tvp := (*ifaceWords)(unsafe.Pointer(v))\n\ttyp := LoadPointer(&vp.typ)\n\tif typ == nil || uintptr(typ) == ^uintptr(0) {\n\t\t// 第一次还没写入\n\t\treturn nil\n\t}\n  // 构造新的interface{}返回出去\n\tdata := LoadPointer(&vp.data)\n\txp := (*ifaceWords)(unsafe.Pointer(&x))\n\txp.typ = typ\n\txp.data = data\n\treturn\n}\n\n// 写数据（如何保证数据完整性）\nfunc (v *Value) Store(x interface{}) {\n\tif x == nil {\n\t\tpanic(\"sync/atomic: store of nil value into Value\")\n\t}\n  // 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换\n\tvp := (*ifaceWords)(unsafe.Pointer(v)) // 旧值\n\txp := (*ifaceWords)(unsafe.Pointer(&x)) // 新值\n\tfor { // 配合CompareAndSwap达到乐观锁的功效\n\t\ttyp := LoadPointer(&vp.typ)\n\t\tif typ == nil { // 第一次写入\n\t\t\truntime_procPin() // 禁止抢占\n\t\t\tif !CompareAndSwapPointer(&vp.typ, nil, unsafe.Pointer(^uintptr(0))) {\n\t\t\t\truntime_procUnpin() // 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// 首次赋值\n\t\t\tStorePointer(&vp.data, xp.data)\n\t\t\tStorePointer(&vp.typ, xp.typ)\n\t\t\truntime_procUnpin() // 写入成功，解除占用状态\n\t\t\treturn\n\t\t}\n\t\tif uintptr(typ) == ^uintptr(0) {\n\t\t\t// 第一次写入还未完成，继续等待\n\t\t\tcontinue\n\t\t}\n\t\t// 两次需要写入相同类型\n\t\tif typ != xp.typ {\n\t\t\tpanic(\"sync/atomic: store of inconsistently typed value into Value\")\n\t\t}\n\t\tStorePointer(&vp.data, xp.data)\n\t\treturn\n\t}\n}\n\n// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。\nfunc runtime_procPin()\n// 解除G的禁止抢占状态，之后G可被抢占。\nfunc runtime_procUnpin()\n\n```\n\n---\n\n#### 参考文章\n\n[Go语言中文网](https://studygolang.com/pkgdoc)\n\n[Go 语言标准库中 atomic.Value 的前世今生](https://blog.betacat.io/post/golang-atomic-value-exploration/)\n\n[你不知道的Go unsafe.Pointer uintptr原理和玩法](https://www.cnblogs.com/sunsky303/p/11820500.html)\n\n[理解Go 1.13中sync.Pool的设计与实现](https://segmentfault.com/a/1190000021944703)\n\n[Go Slice 最大容量大小是怎么来的](https://segmentfault.com/a/1190000017783070)\n\n[Golang 的 协程调度机制 与 GOMAXPROCS 性能调优](https://juejin.cn/post/6844903662553137165)\n\n[Golang同步：原子操作使用](https://www.kancloud.cn/digest/batu-go/153537)","slug":"Golang-sync-atomic包的原子操作是怎么保证的","published":1,"updated":"2021-03-07T09:37:01.575Z","_id":"cklz07vg4000t6rs6btkp978s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在Go语言标准库中，<code>sync/atomic</code>包将底层硬件提供的原子级内存操作封装成了Go的函数。</p>\n<p><code>Mutex</code>由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在<code>lock-free</code>的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>int32</li>\n<li>int64</li>\n<li>uint32</li>\n<li>uint64</li>\n<li>uintptr</li>\n<li>unsafe.Pointer</li>\n</ul>\n<h3 id=\"操作类型\"><a href=\"#操作类型\" class=\"headerlink\" title=\"操作类型\"></a>操作类型</h3><ul>\n<li><p>增或减 AddXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token operator\">*</span>addr <span class=\"token operator\">+=</span> delta\n<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>addr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>比较并交换 CompareAndSwapXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">==</span> old <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token builtin\">new</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>载入 LoadXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>addr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>存储 StoreXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> val<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>交换 SwapXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>addr\n<span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token builtin\">new</span>\n<span class=\"token keyword\">return</span> old<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"什么操作叫做原子操作？\"><a href=\"#什么操作叫做原子操作？\" class=\"headerlink\" title=\"什么操作叫做原子操作？\"></a>什么操作叫做原子操作？</h3><p>一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。</p>\n<p>在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。</p>\n<h3 id=\"用锁行不行？\"><a href=\"#用锁行不行？\" class=\"headerlink\" title=\"用锁行不行？\"></a>用锁行不行？</h3><p>原子操作由<strong>底层硬件</strong>支持，而锁则由操作系统的<strong>调度器</strong>实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用<code>atomic.Value</code>封装好的实现。</p>\n<h4 id=\"值类型操作\"><a href=\"#值类型操作\" class=\"headerlink\" title=\"值类型操作\"></a>值类型操作</h4><ul>\n<li>如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功</span>\n<span class=\"token comment\">//利用for循环以进行多次尝试</span>\n<span class=\"token keyword\">var</span> value <span class=\"token builtin\">int32</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">addValue1</span><span class=\"token punctuation\">(</span>delta <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的</span>\n\t\t<span class=\"token comment\">//那么这个读操作很可能会读取到一个只被修改了一半的数据</span>\n\t\tv <span class=\"token operator\">:=</span> value\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>用Load函数防止只读取一半有效数据的发生</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">addValue2</span><span class=\"token punctuation\">(</span>delta <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//使用载入</span>\n\t\tv <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//在函数的结果值为true时,退出循环</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"struct类型操作\"><a href=\"#struct类型操作\" class=\"headerlink\" title=\"struct类型操作\"></a>struct类型操作</h4><ul>\n<li>如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。</li>\n<li>面对这种多线程下变量的读写问题，1.4 版本的时候 <code>atomic.Value</code>登场，它使得我们可以不依赖于不保证兼容性的<code>unsafe.Pointer</code>类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 使用示例</span>\n\n<span class=\"token keyword\">type</span> Config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tAddr <span class=\"token builtin\">string</span>\n\tPort <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Config<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>Port\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Config <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// do something</span>\n\t<span class=\"token keyword\">return</span> Config<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">automicValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> config atomic<span class=\"token punctuation\">.</span>Value\n\twg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n\t\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tc <span class=\"token operator\">:=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Config<span class=\"token punctuation\">)</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"atomic-Value-设计与实现\"><a href=\"#atomic-Value-设计与实现\" class=\"headerlink\" title=\"atomic.Value 设计与实现\"></a>atomic.Value 设计与实现</h4><p><code>atomic</code>包中除了<code>atomic.Value</code>外，其余都是早期由汇编写成的，<code>atomic.Value</code>类型的底层实现也是建立在已有的<code>atomic</code>包的基础上。</p>\n<blockquote>\n<h5 id=\"goroutine抢占\"><a href=\"#goroutine抢占\" class=\"headerlink\" title=\"goroutine抢占\"></a>goroutine抢占</h5><p>Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由<code>runtime.GOMAXPROCS</code>指定。</p>\n<p>调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。</p>\n<p>所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//atomic.Value源码</span>\n\n<span class=\"token keyword\">type</span> Value <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tv <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 所以可以存储任何类型的数据</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 空 interface&#123;&#125; 的内部表示格式，作用是将interface&#123;&#125;类型分解，得到其中两个字段</span>\n<span class=\"token keyword\">type</span> ifaceWords <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\ttyp  unsafe<span class=\"token punctuation\">.</span>Pointer\n\tdata unsafe<span class=\"token punctuation\">.</span>Pointer\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 取数据就是正常走流程</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>Value<span class=\"token punctuation\">)</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tvp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttyp <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 第一次还没写入</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 构造新的interface&#123;&#125;返回出去</span>\n\tdata <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\txp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\txp<span class=\"token punctuation\">.</span>typ <span class=\"token operator\">=</span> typ\n\txp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写数据（如何保证数据完整性）</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>Value<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync/atomic: store of nil value into Value\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换</span>\n\tvp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 旧值</span>\n\txp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 新值</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 配合CompareAndSwap达到乐观锁的功效</span>\n\t\ttyp <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 第一次写入</span>\n\t\t\t<span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 禁止抢占</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">CompareAndSwapPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// 首次赋值</span>\n\t\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 写入成功，解除占用状态</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 第一次写入还未完成，继续等待</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 两次需要写入相同类型</span>\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">!=</span> xp<span class=\"token punctuation\">.</span>typ <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync/atomic: store of inconsistently typed value into Value\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 解除G的禁止抢占状态，之后G可被抢占。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://studygolang.com/pkgdoc\">Go语言中文网</a></p>\n<p><a href=\"https://blog.betacat.io/post/golang-atomic-value-exploration/\">Go 语言标准库中 atomic.Value 的前世今生</a></p>\n<p><a href=\"https://www.cnblogs.com/sunsky303/p/11820500.html\">你不知道的Go unsafe.Pointer uintptr原理和玩法</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000021944703\">理解Go 1.13中sync.Pool的设计与实现</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000017783070\">Go Slice 最大容量大小是怎么来的</a></p>\n<p><a href=\"https://juejin.cn/post/6844903662553137165\">Golang 的 协程调度机制 与 GOMAXPROCS 性能调优</a></p>\n<p><a href=\"https://www.kancloud.cn/digest/batu-go/153537\">Golang同步：原子操作使用</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>在Go语言标准库中，<code>sync/atomic</code>包将底层硬件提供的原子级内存操作封装成了Go的函数。</p>\n<p><code>Mutex</code>由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在CPU实现的指令集里，有一些指令直接封装进atomic包，这些指令在执行过程中是不允许中断的，因此原子操作可以在<code>lock-free</code>的情况下保证并发安全，并且它的性能也能做到随CPU个数的增多而线性扩展。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>int32</li>\n<li>int64</li>\n<li>uint32</li>\n<li>uint64</li>\n<li>uintptr</li>\n<li>unsafe.Pointer</li>\n</ul>\n<h3 id=\"操作类型\"><a href=\"#操作类型\" class=\"headerlink\" title=\"操作类型\"></a>操作类型</h3><ul>\n<li><p>增或减 AddXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token operator\">*</span>addr <span class=\"token operator\">+=</span> delta\n<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>addr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>比较并交换 CompareAndSwapXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">==</span> old <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token builtin\">new</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>载入 LoadXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>addr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>存储 StoreXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> val<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>交换 SwapXXX</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>addr\n<span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token builtin\">new</span>\n<span class=\"token keyword\">return</span> old<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"什么操作叫做原子操作？\"><a href=\"#什么操作叫做原子操作？\" class=\"headerlink\" title=\"什么操作叫做原子操作？\"></a>什么操作叫做原子操作？</h3><p>一个或者多个操作在CPU执行过程中不被中断的特性，称为原子性(atomicity)。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣城他们拥有了“不可分割”的原子性。</p>\n<p>在Go中，一条普通的赋值语句其实不是一个原子操作。列如，在32位机器上写int64类型的变量就会有中间状态，因为他会被拆成两次写操作(MOV)——写低32位和写高32位。</p>\n<h3 id=\"用锁行不行？\"><a href=\"#用锁行不行？\" class=\"headerlink\" title=\"用锁行不行？\"></a>用锁行不行？</h3><p>原子操作由<strong>底层硬件</strong>支持，而锁则由操作系统的<strong>调度器</strong>实现。锁应当用来保护一段逻辑，对于一个变量更新的保护，原子操作通常会更有效率，并且更能利用计算机多核的优势，如果要更新的是一个复合对象，则应当使用<code>atomic.Value</code>封装好的实现。</p>\n<h4 id=\"值类型操作\"><a href=\"#值类型操作\" class=\"headerlink\" title=\"值类型操作\"></a>值类型操作</h4><ul>\n<li>如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那得到的就是一个毫无逻辑的中间变量，会导致程序出现诡异的bug。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在被操作值被频繁变更的情况下,CAS操作并不那么容易成功</span>\n<span class=\"token comment\">//利用for循环以进行多次尝试</span>\n<span class=\"token keyword\">var</span> value <span class=\"token builtin\">int32</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">addValue1</span><span class=\"token punctuation\">(</span>delta <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//在进行读取value的操作的过程中,其他对此值的读写操作是可以被同时进行的</span>\n\t\t<span class=\"token comment\">//那么这个读操作很可能会读取到一个只被修改了一半的数据</span>\n\t\tv <span class=\"token operator\">:=</span> value\n\t\t<span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>用Load函数防止只读取一半有效数据的发生</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">addValue2</span><span class=\"token punctuation\">(</span>delta <span class=\"token builtin\">int32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//使用载入</span>\n\t\tv <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">LoadInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">CompareAndSwapInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//在函数的结果值为true时,退出循环</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"struct类型操作\"><a href=\"#struct类型操作\" class=\"headerlink\" title=\"struct类型操作\"></a>struct类型操作</h4><ul>\n<li>如果对一个结构体直接进行赋值，那出现问题的概率更高。线程刚写完一部分字段，读线程就读取了变量，那么只能读到一部分修改的值，破坏了变量的完整性，读到的值也是完全错误的。</li>\n<li>面对这种多线程下变量的读写问题，1.4 版本的时候 <code>atomic.Value</code>登场，它使得我们可以不依赖于不保证兼容性的<code>unsafe.Pointer</code>类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 使用示例</span>\n\n<span class=\"token keyword\">type</span> Config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tAddr <span class=\"token builtin\">string</span>\n\tPort <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Config<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>Addr <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>Port\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Config <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// do something</span>\n\t<span class=\"token keyword\">return</span> Config<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">automicValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> config atomic<span class=\"token punctuation\">.</span>Value\n\twg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n\t\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tc <span class=\"token operator\">:=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Config<span class=\"token punctuation\">)</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"atomic-Value-设计与实现\"><a href=\"#atomic-Value-设计与实现\" class=\"headerlink\" title=\"atomic.Value 设计与实现\"></a>atomic.Value 设计与实现</h4><p><code>atomic</code>包中除了<code>atomic.Value</code>外，其余都是早期由汇编写成的，<code>atomic.Value</code>类型的底层实现也是建立在已有的<code>atomic</code>包的基础上。</p>\n<blockquote>\n<h5 id=\"goroutine抢占\"><a href=\"#goroutine抢占\" class=\"headerlink\" title=\"goroutine抢占\"></a>goroutine抢占</h5><p>Go中调度器是GMP模型，简单理解G就是goroutine；M可以类比内核线程，是执行G的地方；P是调度G以及为G的执行准备所需资源。一般情况下，P的数量CPU的可用核心数，也可由<code>runtime.GOMAXPROCS</code>指定。</p>\n<p>调度规则：某个G不能一直占用M，在某个时刻的时候，runtime会判断当前M是否可以被抢占，即M上正在执行的G让出。P在合理的时刻将G调度到合理的M上执行，在runtime里面，每个P维护一个本地存放待执行G的队列localq，同时还存在一个全局的待执行G的队列globalq；调度就是P从localq或globalq中取出G到对应的M上执行，所谓抢占，runtime将G抢占移出运行状态，拷贝G的执行栈放入待执行队列中，可能是某个P的localq，也可能是globalq，等待下一次调度，因此当被抢占的G重回待执行队列时有可能此时的P与前一次运行的P并非同一个。</p>\n<p>所谓禁止抢占，即当前执行G不允许被抢占调度，直到禁止抢占标记解除。Go runtime实现了G的禁止抢占与解除禁止抢占。</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//atomic.Value源码</span>\n\n<span class=\"token keyword\">type</span> Value <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tv <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 所以可以存储任何类型的数据</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 空 interface&#123;&#125; 的内部表示格式，作用是将interface&#123;&#125;类型分解，得到其中两个字段</span>\n<span class=\"token keyword\">type</span> ifaceWords <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\ttyp  unsafe<span class=\"token punctuation\">.</span>Pointer\n\tdata unsafe<span class=\"token punctuation\">.</span>Pointer\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 取数据就是正常走流程</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>Value<span class=\"token punctuation\">)</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tvp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttyp <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 第一次还没写入</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 构造新的interface&#123;&#125;返回出去</span>\n\tdata <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\txp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\txp<span class=\"token punctuation\">.</span>typ <span class=\"token operator\">=</span> typ\n\txp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写数据（如何保证数据完整性）</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>Value<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync/atomic: store of nil value into Value\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 绕过 Go 语言类型系统的检查，与任意的指针类型互相转换</span>\n\tvp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 旧值</span>\n\txp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ifaceWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 新值</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 配合CompareAndSwap达到乐观锁的功效</span>\n\t\ttyp <span class=\"token operator\">:=</span> <span class=\"token function\">LoadPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 第一次写入</span>\n\t\t\t<span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 禁止抢占</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">CompareAndSwapPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有抢到锁，说明已经有别的线程抢先完成赋值，重新进入循环</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// 首次赋值</span>\n\t\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 写入成功，解除占用状态</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">^</span><span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 第一次写入还未完成，继续等待</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 两次需要写入相同类型</span>\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">!=</span> xp<span class=\"token punctuation\">.</span>typ <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync/atomic: store of inconsistently typed value into Value\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">StorePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 禁止抢占，标记当前G在M上不会被抢占，并返回当前所在P的ID。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runtime_procPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 解除G的禁止抢占状态，之后G可被抢占。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runtime_procUnpin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://studygolang.com/pkgdoc\">Go语言中文网</a></p>\n<p><a href=\"https://blog.betacat.io/post/golang-atomic-value-exploration/\">Go 语言标准库中 atomic.Value 的前世今生</a></p>\n<p><a href=\"https://www.cnblogs.com/sunsky303/p/11820500.html\">你不知道的Go unsafe.Pointer uintptr原理和玩法</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000021944703\">理解Go 1.13中sync.Pool的设计与实现</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000017783070\">Go Slice 最大容量大小是怎么来的</a></p>\n<p><a href=\"https://juejin.cn/post/6844903662553137165\">Golang 的 协程调度机制 与 GOMAXPROCS 性能调优</a></p>\n<p><a href=\"https://www.kancloud.cn/digest/batu-go/153537\">Golang同步：原子操作使用</a></p>\n"},{"title":"Mysql-备份与恢复","comments":1,"date":"2021-03-07T10:26:33.000Z","author":null,"_content":"### 备份与恢复概述\n#### 按备份方法分：\n\n- hot backup 热备、在线备份\n\n  数据库运行中直接备份，对正在运行的数据库没有任何影响。\n\n- cold backup 冷备、离线备份\n\n  最为简单，一般只需要拷贝相关的数据库物理文件即可。\n\n  优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复\n\n  缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。\n\n- warm backup 温备\n\n  数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。\n\n#### 按备份后文件内容分：\n\n- 逻辑备份\n\n  备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。\n\n- 裸文件备份\n\n  拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。\n\n#### 按备份数据的内容分：\n\n- 完全备份\n\n  对数据库进行完整的备份。\n\n- 增量备份\n\n  在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。\n\n- 日志备份\n\n  主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。\n\n### 复制\n\n#### 复制的工作原理\n\n异步同步，并非完全的主从同步。\n\n1. 主服务器把数据更新记录到二进制日志中。\n2. 从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。\n3. 从服务器重做中继日志中的事件，把更新应用到自己的数据库上。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n#### 复制不仅限于备份\n\n1. 数据分布\n\n   不同数据中心之间实现数据拷贝。\n\n2. 读取的负载均衡\n\n   读写分离。\n\n3. 数据库备份\n\n   从服务器不是备份，不能完全代替备份。\n\n4. 高可用性和故障转移\n\n   减少故障的停机时间和恢复时间。\n","source":"_posts/2021-03-07-Mysql-备份与恢复.md","raw":"---\ntitle: Mysql-备份与恢复\ncomments: true\ndate: 2021-03-07 18:26:33\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n### 备份与恢复概述\n#### 按备份方法分：\n\n- hot backup 热备、在线备份\n\n  数据库运行中直接备份，对正在运行的数据库没有任何影响。\n\n- cold backup 冷备、离线备份\n\n  最为简单，一般只需要拷贝相关的数据库物理文件即可。\n\n  优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复\n\n  缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。\n\n- warm backup 温备\n\n  数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。\n\n#### 按备份后文件内容分：\n\n- 逻辑备份\n\n  备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。\n\n- 裸文件备份\n\n  拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。\n\n#### 按备份数据的内容分：\n\n- 完全备份\n\n  对数据库进行完整的备份。\n\n- 增量备份\n\n  在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。\n\n- 日志备份\n\n  主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。\n\n### 复制\n\n#### 复制的工作原理\n\n异步同步，并非完全的主从同步。\n\n1. 主服务器把数据更新记录到二进制日志中。\n2. 从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。\n3. 从服务器重做中继日志中的事件，把更新应用到自己的数据库上。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n#### 复制不仅限于备份\n\n1. 数据分布\n\n   不同数据中心之间实现数据拷贝。\n\n2. 读取的负载均衡\n\n   读写分离。\n\n3. 数据库备份\n\n   从服务器不是备份，不能完全代替备份。\n\n4. 高可用性和故障转移\n\n   减少故障的停机时间和恢复时间。\n","slug":"Mysql-备份与恢复","published":1,"updated":"2021-03-07T10:27:11.193Z","_id":"cklz0gflb001k6rs6heyldfdz","layout":"post","photos":[],"link":"","content":"<h3 id=\"备份与恢复概述\"><a href=\"#备份与恢复概述\" class=\"headerlink\" title=\"备份与恢复概述\"></a>备份与恢复概述</h3><h4 id=\"按备份方法分：\"><a href=\"#按备份方法分：\" class=\"headerlink\" title=\"按备份方法分：\"></a>按备份方法分：</h4><ul>\n<li><p>hot backup 热备、在线备份</p>\n<p>数据库运行中直接备份，对正在运行的数据库没有任何影响。</p>\n</li>\n<li><p>cold backup 冷备、离线备份</p>\n<p>最为简单，一般只需要拷贝相关的数据库物理文件即可。</p>\n<p>优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复</p>\n<p>缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。</p>\n</li>\n<li><p>warm backup 温备</p>\n<p>数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。</p>\n</li>\n</ul>\n<h4 id=\"按备份后文件内容分：\"><a href=\"#按备份后文件内容分：\" class=\"headerlink\" title=\"按备份后文件内容分：\"></a>按备份后文件内容分：</h4><ul>\n<li><p>逻辑备份</p>\n<p>备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。</p>\n</li>\n<li><p>裸文件备份</p>\n<p>拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。</p>\n</li>\n</ul>\n<h4 id=\"按备份数据的内容分：\"><a href=\"#按备份数据的内容分：\" class=\"headerlink\" title=\"按备份数据的内容分：\"></a>按备份数据的内容分：</h4><ul>\n<li><p>完全备份</p>\n<p>对数据库进行完整的备份。</p>\n</li>\n<li><p>增量备份</p>\n<p>在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。</p>\n</li>\n<li><p>日志备份</p>\n<p>主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。</p>\n</li>\n</ul>\n<h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><h4 id=\"复制的工作原理\"><a href=\"#复制的工作原理\" class=\"headerlink\" title=\"复制的工作原理\"></a>复制的工作原理</h4><p>异步同步，并非完全的主从同步。</p>\n<ol>\n<li>主服务器把数据更新记录到二进制日志中。</li>\n<li>从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。</li>\n<li>从服务器重做中继日志中的事件，把更新应用到自己的数据库上。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"复制不仅限于备份\"><a href=\"#复制不仅限于备份\" class=\"headerlink\" title=\"复制不仅限于备份\"></a>复制不仅限于备份</h4><ol>\n<li><p>数据分布</p>\n<p>不同数据中心之间实现数据拷贝。</p>\n</li>\n<li><p>读取的负载均衡</p>\n<p>读写分离。</p>\n</li>\n<li><p>数据库备份</p>\n<p>从服务器不是备份，不能完全代替备份。</p>\n</li>\n<li><p>高可用性和故障转移</p>\n<p>减少故障的停机时间和恢复时间。</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"备份与恢复概述\"><a href=\"#备份与恢复概述\" class=\"headerlink\" title=\"备份与恢复概述\"></a>备份与恢复概述</h3><h4 id=\"按备份方法分：\"><a href=\"#按备份方法分：\" class=\"headerlink\" title=\"按备份方法分：\"></a>按备份方法分：</h4><ul>\n<li><p>hot backup 热备、在线备份</p>\n<p>数据库运行中直接备份，对正在运行的数据库没有任何影响。</p>\n</li>\n<li><p>cold backup 冷备、离线备份</p>\n<p>最为简单，一般只需要拷贝相关的数据库物理文件即可。</p>\n<p>优点：备份简单、恢复简单、恢复速度快、备份文件易于在不同操作系统和MySQL版本上恢复</p>\n<p>缺点：备份文件大、不总是可以轻易跨平台。如大小写敏感、浮点数格式等。</p>\n</li>\n<li><p>warm backup 温备</p>\n<p>数据库运行时进行备份，但是会对当前数据库的操作有影响，如加一个全局锁以保证数据的一致性。</p>\n</li>\n</ul>\n<h4 id=\"按备份后文件内容分：\"><a href=\"#按备份后文件内容分：\" class=\"headerlink\" title=\"按备份后文件内容分：\"></a>按备份后文件内容分：</h4><ul>\n<li><p>逻辑备份</p>\n<p>备份后的文件内容时可读的，通常是文本文件，内容通常是SQL语句，或表内的数据数据，好处是可以看到导出文件的内容。适用于数据库的升级、迁移等，恢复所需要的时间往往较长。</p>\n</li>\n<li><p>裸文件备份</p>\n<p>拷贝数据库的物理文件，数据库既可以处于运行状态，也可以处于停止状态。恢复时间短。</p>\n</li>\n</ul>\n<h4 id=\"按备份数据的内容分：\"><a href=\"#按备份数据的内容分：\" class=\"headerlink\" title=\"按备份数据的内容分：\"></a>按备份数据的内容分：</h4><ul>\n<li><p>完全备份</p>\n<p>对数据库进行完整的备份。</p>\n</li>\n<li><p>增量备份</p>\n<p>在上次完全备份的基础上，对更新的数据进行备份，官方并未提供增量备份的方法。</p>\n</li>\n<li><p>日志备份</p>\n<p>主要是二进制日志的备份，通过对一个完全备份进行二进制日志的重做来完成数据库的point-in-time的恢复工作。</p>\n</li>\n</ul>\n<h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><h4 id=\"复制的工作原理\"><a href=\"#复制的工作原理\" class=\"headerlink\" title=\"复制的工作原理\"></a>复制的工作原理</h4><p>异步同步，并非完全的主从同步。</p>\n<ol>\n<li>主服务器把数据更新记录到二进制日志中。</li>\n<li>从服务器把主服务器的二进制日志拷贝到自己的中继日志（relay log)中。</li>\n<li>从服务器重做中继日志中的事件，把更新应用到自己的数据库上。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20200505105757299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"复制不仅限于备份\"><a href=\"#复制不仅限于备份\" class=\"headerlink\" title=\"复制不仅限于备份\"></a>复制不仅限于备份</h4><ol>\n<li><p>数据分布</p>\n<p>不同数据中心之间实现数据拷贝。</p>\n</li>\n<li><p>读取的负载均衡</p>\n<p>读写分离。</p>\n</li>\n<li><p>数据库备份</p>\n<p>从服务器不是备份，不能完全代替备份。</p>\n</li>\n<li><p>高可用性和故障转移</p>\n<p>减少故障的停机时间和恢复时间。</p>\n</li>\n</ol>\n"},{"title":"Mysql-事务","comments":1,"date":"2021-03-07T10:27:51.000Z","author":null,"_content":"\n### 数据库引入事务的主要目的\n\n事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。\n\n### ACID特性\n\n- 原子性 atomicity\n\n  要么都成功，要么都失败。\n\n- 一致性 consistency\n\n- 事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）\n\n- 隔离性 isolation\n\n  一个事务的影响在事务提交前，其他事务都不可见。\n\n- 持久性 durability\n\n  事务一旦提交，就是永久性的。\n\n### 事务的实现\n\n#### redo\n\n事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）\n\n- 当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；\n\n- 当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；\n\n- 事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。\n\n  通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过`show engine innodb status；`查看当前磁盘和日志的差距。\n  \n  ```mysql\n  show engine innodb status\\G;\n  \n  ---\n  LOG\n  ---\n  Log sequence number 77292702 # 当前LSN\n  Log flushed up to   77292702 # 刷新到重做日志文件的LSN\n  Pages flushed up to 77292702\n  Last checkpoint at  77292702 # 刷新到磁盘的LSN\n  0 pending log writes, 0 pending chkp writes\n  8 log i/o's done, 0.00 log i/o's/second\n  ```\n\n### undo\n\n事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。\n\nredo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。\n\nundo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。\n\n### 事务常用控制语句\n\n- begin\n- commit\n- rollback\n\n### 事务的隔离级别\n\n- 读未提交 read uncommitted\n\n  浏览访问\n\n- 读已提交 read committed\n\n  游标稳定，生产上常用隔离级别\n\n- 可重复度 repeatable read\n\n  InnoDB默认隔离级别，InnoDB在该级别下使用`next-key`锁的算法避免幻读的产生。\n\n- 序列化 serializable\n\n  InnoDB会对每个select操作自动添加`lock in share mode`，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。\n\n#### 查看事务隔离级别\n\n- ```mysql\n  select @@tx_isolation\\G;\n  select @@global.tx_isolation\\G;\n  ```\n\n\n#### 分布式事务\n\n分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。\n\n分布式事务使用两段式提交`two-phase commit`的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。\n\n- 资源管理器\n\n  提供访问事务资源的方法。通常一个数据库就是一个资源管理器。\n\n- 事务管理器\n\n  协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。\n\n- 应用程序\n\n  定义事务的边界，置顶全局事务中的操作。","source":"_posts/2021-03-07-Mysql-事务.md","raw":"---\ntitle: Mysql-事务\ncomments: true\ndate: 2021-03-07 18:27:51\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### 数据库引入事务的主要目的\n\n事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。\n\n### ACID特性\n\n- 原子性 atomicity\n\n  要么都成功，要么都失败。\n\n- 一致性 consistency\n\n- 事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）\n\n- 隔离性 isolation\n\n  一个事务的影响在事务提交前，其他事务都不可见。\n\n- 持久性 durability\n\n  事务一旦提交，就是永久性的。\n\n### 事务的实现\n\n#### redo\n\n事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）\n\n- 当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；\n\n- 当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；\n\n- 事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。\n\n  通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过`show engine innodb status；`查看当前磁盘和日志的差距。\n  \n  ```mysql\n  show engine innodb status\\G;\n  \n  ---\n  LOG\n  ---\n  Log sequence number 77292702 # 当前LSN\n  Log flushed up to   77292702 # 刷新到重做日志文件的LSN\n  Pages flushed up to 77292702\n  Last checkpoint at  77292702 # 刷新到磁盘的LSN\n  0 pending log writes, 0 pending chkp writes\n  8 log i/o's done, 0.00 log i/o's/second\n  ```\n\n### undo\n\n事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。\n\nredo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。\n\nundo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。\n\n### 事务常用控制语句\n\n- begin\n- commit\n- rollback\n\n### 事务的隔离级别\n\n- 读未提交 read uncommitted\n\n  浏览访问\n\n- 读已提交 read committed\n\n  游标稳定，生产上常用隔离级别\n\n- 可重复度 repeatable read\n\n  InnoDB默认隔离级别，InnoDB在该级别下使用`next-key`锁的算法避免幻读的产生。\n\n- 序列化 serializable\n\n  InnoDB会对每个select操作自动添加`lock in share mode`，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。\n\n#### 查看事务隔离级别\n\n- ```mysql\n  select @@tx_isolation\\G;\n  select @@global.tx_isolation\\G;\n  ```\n\n\n#### 分布式事务\n\n分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。\n\n分布式事务使用两段式提交`two-phase commit`的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。\n\n- 资源管理器\n\n  提供访问事务资源的方法。通常一个数据库就是一个资源管理器。\n\n- 事务管理器\n\n  协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。\n\n- 应用程序\n\n  定义事务的边界，置顶全局事务中的操作。","slug":"Mysql-事务","published":1,"updated":"2021-03-07T10:28:20.669Z","_id":"cklz0i42u001p6rs6fliparsn","layout":"post","photos":[],"link":"","content":"<h3 id=\"数据库引入事务的主要目的\"><a href=\"#数据库引入事务的主要目的\" class=\"headerlink\" title=\"数据库引入事务的主要目的\"></a>数据库引入事务的主要目的</h3><p>事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。</p>\n<h3 id=\"ACID特性\"><a href=\"#ACID特性\" class=\"headerlink\" title=\"ACID特性\"></a>ACID特性</h3><ul>\n<li><p>原子性 atomicity</p>\n<p>要么都成功，要么都失败。</p>\n</li>\n<li><p>一致性 consistency</p>\n</li>\n<li><p>事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）</p>\n</li>\n<li><p>隔离性 isolation</p>\n<p>一个事务的影响在事务提交前，其他事务都不可见。</p>\n</li>\n<li><p>持久性 durability</p>\n<p>事务一旦提交，就是永久性的。</p>\n</li>\n</ul>\n<h3 id=\"事务的实现\"><a href=\"#事务的实现\" class=\"headerlink\" title=\"事务的实现\"></a>事务的实现</h3><h4 id=\"redo\"><a href=\"#redo\" class=\"headerlink\" title=\"redo\"></a>redo</h4><p>事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）</p>\n<ul>\n<li><p>当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；</p>\n</li>\n<li><p>当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；</p>\n</li>\n<li><p>事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。</p>\n<p>通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过<code>show engine innodb status；</code>查看当前磁盘和日志的差距。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\n\n---\nLOG\n---\nLog sequence number 77292702 # 当前LSN\nLog flushed up to   77292702 # 刷新到重做日志文件的LSN\nPages flushed up to 77292702\nLast checkpoint at  77292702 # 刷新到磁盘的LSN\n0 pending log writes, 0 pending chkp writes\n8 log i&#x2F;o&#39;s done, 0.00 log i&#x2F;o&#39;s&#x2F;second<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"undo\"><a href=\"#undo\" class=\"headerlink\" title=\"undo\"></a>undo</h3><p>事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。</p>\n<p>redo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。</p>\n<p>undo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。</p>\n<h3 id=\"事务常用控制语句\"><a href=\"#事务常用控制语句\" class=\"headerlink\" title=\"事务常用控制语句\"></a>事务常用控制语句</h3><ul>\n<li>begin</li>\n<li>commit</li>\n<li>rollback</li>\n</ul>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><ul>\n<li><p>读未提交 read uncommitted</p>\n<p>浏览访问</p>\n</li>\n<li><p>读已提交 read committed</p>\n<p>游标稳定，生产上常用隔离级别</p>\n</li>\n<li><p>可重复度 repeatable read</p>\n<p>InnoDB默认隔离级别，InnoDB在该级别下使用<code>next-key</code>锁的算法避免幻读的产生。</p>\n</li>\n<li><p>序列化 serializable</p>\n<p>InnoDB会对每个select操作自动添加<code>lock in share mode</code>，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。</p>\n</li>\n</ul>\n<h4 id=\"查看事务隔离级别\"><a href=\"#查看事务隔离级别\" class=\"headerlink\" title=\"查看事务隔离级别\"></a>查看事务隔离级别</h4><ul>\n<li><pre><code class=\"mysql\">select @@tx_isolation\\G;\nselect @@global.tx_isolation\\G;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h4><p>分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。</p>\n<p>分布式事务使用两段式提交<code>two-phase commit</code>的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。</p>\n<ul>\n<li><p>资源管理器</p>\n<p>提供访问事务资源的方法。通常一个数据库就是一个资源管理器。</p>\n</li>\n<li><p>事务管理器</p>\n<p>协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。</p>\n</li>\n<li><p>应用程序</p>\n<p>定义事务的边界，置顶全局事务中的操作。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"数据库引入事务的主要目的\"><a href=\"#数据库引入事务的主要目的\" class=\"headerlink\" title=\"数据库引入事务的主要目的\"></a>数据库引入事务的主要目的</h3><p>事务会把数据库从一种状态转换为另一种一致的状态，在提交工作时，可以确保要么所有修改都已经保存，要么都不保存。</p>\n<h3 id=\"ACID特性\"><a href=\"#ACID特性\" class=\"headerlink\" title=\"ACID特性\"></a>ACID特性</h3><ul>\n<li><p>原子性 atomicity</p>\n<p>要么都成功，要么都失败。</p>\n</li>\n<li><p>一致性 consistency</p>\n</li>\n<li><p>事务执行前后，数据库的完整性约束没有破坏。（你的10张银行卡里共有100块，无论这10张银行卡之间怎么转账，也只有100块）</p>\n</li>\n<li><p>隔离性 isolation</p>\n<p>一个事务的影响在事务提交前，其他事务都不可见。</p>\n</li>\n<li><p>持久性 durability</p>\n<p>事务一旦提交，就是永久性的。</p>\n</li>\n</ul>\n<h3 id=\"事务的实现\"><a href=\"#事务的实现\" class=\"headerlink\" title=\"事务的实现\"></a>事务的实现</h3><h4 id=\"redo\"><a href=\"#redo\" class=\"headerlink\" title=\"redo\"></a>redo</h4><p>事务通过重做（redo)日志文件和日志缓冲（InnoDB Log Buffer）实现。在写数据前，需要先写日志。这种实现方式称为预写日志方式（Write-Ahead Logging，WAL）</p>\n<ul>\n<li><p>当开始一个事务时，会记录该事务的一个LSN（Log Sequence Number，日志序列号）；</p>\n</li>\n<li><p>当事务执行时，会往InnoDB存储引擎的日志缓冲里插入事务日志；</p>\n</li>\n<li><p>事务提交是，必须将InnoDB存储引擎的日志缓冲写入磁盘。</p>\n<p>通过预写日志的方式保证事务的完整性，会造成吸盘上存储的数据页和内存缓冲池中的页是不同步的。可以通过<code>show engine innodb status；</code>查看当前磁盘和日志的差距。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\n\n---\nLOG\n---\nLog sequence number 77292702 # 当前LSN\nLog flushed up to   77292702 # 刷新到重做日志文件的LSN\nPages flushed up to 77292702\nLast checkpoint at  77292702 # 刷新到磁盘的LSN\n0 pending log writes, 0 pending chkp writes\n8 log i&#x2F;o&#39;s done, 0.00 log i&#x2F;o&#39;s&#x2F;second<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"undo\"><a href=\"#undo\" class=\"headerlink\" title=\"undo\"></a>undo</h3><p>事务需要回滚，需要undo。undo与redo正好相反，对于数据库进行修改是，数据库不但会产生redo，还会产生一定量的undo。</p>\n<p>redo存放在重做日志中，undo存放在数据库内部的一个特殊段（segment）中，称为undo段（undo segment），undue段位于共享表空间中。</p>\n<p>undo用于将数据库逻辑的恢复到原来的样子，数据结构本身在回滚前后可能不是相同的。</p>\n<h3 id=\"事务常用控制语句\"><a href=\"#事务常用控制语句\" class=\"headerlink\" title=\"事务常用控制语句\"></a>事务常用控制语句</h3><ul>\n<li>begin</li>\n<li>commit</li>\n<li>rollback</li>\n</ul>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><ul>\n<li><p>读未提交 read uncommitted</p>\n<p>浏览访问</p>\n</li>\n<li><p>读已提交 read committed</p>\n<p>游标稳定，生产上常用隔离级别</p>\n</li>\n<li><p>可重复度 repeatable read</p>\n<p>InnoDB默认隔离级别，InnoDB在该级别下使用<code>next-key</code>锁的算法避免幻读的产生。</p>\n</li>\n<li><p>序列化 serializable</p>\n<p>InnoDB会对每个select操作自动添加<code>lock in share mode</code>，即共享锁。因为InnoDB在rr的隔离级别就可以避免幻读，所以serializable隔离级别主要用于分布式事务。</p>\n</li>\n</ul>\n<h4 id=\"查看事务隔离级别\"><a href=\"#查看事务隔离级别\" class=\"headerlink\" title=\"查看事务隔离级别\"></a>查看事务隔离级别</h4><ul>\n<li><pre><code class=\"mysql\">select @@tx_isolation\\G;\nselect @@global.tx_isolation\\G;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h4><p>分布式事务由一个或多个资源管理器、一个事务管理器和一个应用程序组成。</p>\n<p>分布式事务使用两段式提交<code>two-phase commit</code>的方式。在第一个阶段，所有参与全局事务的节点都开始准备，告诉事务管理器他们准备好了。第二阶段，事务管理器告诉所有资源管理器执行rollback还是commit。如果任何节点显示不能提交，则所有节点都被告知需要回滚。</p>\n<ul>\n<li><p>资源管理器</p>\n<p>提供访问事务资源的方法。通常一个数据库就是一个资源管理器。</p>\n</li>\n<li><p>事务管理器</p>\n<p>协调参与全局事务中的各个事务。需要合参与全局事务中的所有资源管理器进行通信。</p>\n</li>\n<li><p>应用程序</p>\n<p>定义事务的边界，置顶全局事务中的操作。</p>\n</li>\n</ul>\n"},{"title":"Mysql-索引与算法","comments":1,"date":"2021-03-07T10:28:56.000Z","author":null,"_content":"\n### B+树索引的管理\n\n- 创建索引\n\n  对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。\n\n  快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。\n\n### B+树索引的使用\n\n- 顺序读\n\n  顺序的读取磁盘上的块\n\n- 随机读\n\n  访问的块不连续，需要磁头不断移动\n\n- 预读取\n\n  通过一次I/O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I/O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。\n\n  > 1. 随机预读\n  >\n  >    当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。\n  >\n  >    InnoDB Plugin 1.0.4开始，随机预读被取消。\n  >\n  > 2. 线性预读\n  >\n  >    基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。\n  >\n  >    N的值由`innodb_read_ahead_threshold`控制，默认值56。\n\n### 哈希算法\n\n- InnoDB中的哈希算法\n\n  InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ ==h(k)=k mod m== ）。\n\n  缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。\n\n  除法散列，m的取值为略大于2倍的缓冲池页数量的质素。\n\n  \n\n\n","source":"_posts/2021-03-07-Mysql-索引与算法.md","raw":"---\ntitle: Mysql-索引与算法\ncomments: true\ndate: 2021-03-07 18:28:56\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### B+树索引的管理\n\n- 创建索引\n\n  对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。\n\n  快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。\n\n### B+树索引的使用\n\n- 顺序读\n\n  顺序的读取磁盘上的块\n\n- 随机读\n\n  访问的块不连续，需要磁头不断移动\n\n- 预读取\n\n  通过一次I/O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I/O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。\n\n  > 1. 随机预读\n  >\n  >    当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。\n  >\n  >    InnoDB Plugin 1.0.4开始，随机预读被取消。\n  >\n  > 2. 线性预读\n  >\n  >    基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。\n  >\n  >    N的值由`innodb_read_ahead_threshold`控制，默认值56。\n\n### 哈希算法\n\n- InnoDB中的哈希算法\n\n  InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ ==h(k)=k mod m== ）。\n\n  缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。\n\n  除法散列，m的取值为略大于2倍的缓冲池页数量的质素。\n\n  \n\n\n","slug":"Mysql-索引与算法","published":1,"updated":"2021-03-07T10:29:21.870Z","_id":"cklz0ji13001s6rs6bddo8pxq","layout":"post","photos":[],"link":"","content":"<h3 id=\"B-树索引的管理\"><a href=\"#B-树索引的管理\" class=\"headerlink\" title=\"B+树索引的管理\"></a>B+树索引的管理</h3><ul>\n<li><p>创建索引</p>\n<p>对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。</p>\n<p>快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。</p>\n</li>\n</ul>\n<h3 id=\"B-树索引的使用\"><a href=\"#B-树索引的使用\" class=\"headerlink\" title=\"B+树索引的使用\"></a>B+树索引的使用</h3><ul>\n<li><p>顺序读</p>\n<p>顺序的读取磁盘上的块</p>\n</li>\n<li><p>随机读</p>\n<p>访问的块不连续，需要磁头不断移动</p>\n</li>\n<li><p>预读取</p>\n<p>通过一次I/O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I/O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。</p>\n<blockquote>\n<ol>\n<li><p>随机预读</p>\n<p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。</p>\n<p>InnoDB Plugin 1.0.4开始，随机预读被取消。</p>\n</li>\n<li><p>线性预读</p>\n<p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。</p>\n<p>N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h3><ul>\n<li><p>InnoDB中的哈希算法</p>\n<p>InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ ==h(k)=k mod m== ）。</p>\n<p>缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。</p>\n<p>除法散列，m的取值为略大于2倍的缓冲池页数量的质素。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"B-树索引的管理\"><a href=\"#B-树索引的管理\" class=\"headerlink\" title=\"B+树索引的管理\"></a>B+树索引的管理</h3><ul>\n<li><p>创建索引</p>\n<p>对于索引的添加或删除，MySQL先创建一张临时表，把数据导入临时表，删除原表，然后把临时表重命名为原来的表。因此大表创建和删除索引的时间非常长。</p>\n<p>快速索引创建法：对于非聚集索引的创建，InnoDB会对表加S锁，创建过程中只能读，不能写。</p>\n</li>\n</ul>\n<h3 id=\"B-树索引的使用\"><a href=\"#B-树索引的使用\" class=\"headerlink\" title=\"B+树索引的使用\"></a>B+树索引的使用</h3><ul>\n<li><p>顺序读</p>\n<p>顺序的读取磁盘上的块</p>\n</li>\n<li><p>随机读</p>\n<p>访问的块不连续，需要磁头不断移动</p>\n</li>\n<li><p>预读取</p>\n<p>通过一次I/O请求多个页预读到缓冲池中，并且估计预读的多个页马上会被访问。传统I/O请求每次只读取一个页，在传统机械硬盘较低的IOPS下，预读计数可以大大提高读取的性能。</p>\n<blockquote>\n<ol>\n<li><p>随机预读</p>\n<p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。</p>\n<p>InnoDB Plugin 1.0.4开始，随机预读被取消。</p>\n</li>\n<li><p>线性预读</p>\n<p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。</p>\n<p>N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h3><ul>\n<li><p>InnoDB中的哈希算法</p>\n<p>InnoDB使用哈希算法对字典进行查找，采用链表方式解决冲突、哈希函数采用除法散列方式（ ==h(k)=k mod m== ）。</p>\n<p>缓冲池中的Page页都有一个chain指针，指向相同哈希函数值的页。</p>\n<p>除法散列，m的取值为略大于2倍的缓冲池页数量的质素。</p>\n</li>\n</ul>\n"},{"title":"Mysql-表","comments":1,"date":"2021-03-07T10:29:40.000Z","author":null,"_content":"\n### 主键三连\n\n- 显示定义主键。\n- 如果没有显示指定，查找表中唯一索引，如果有，该列为主键。\n- 不符合上面两条，InnoDB自动创建一个6字节大小的指针。\n\n### 逻辑存储结构\n\n- 表空间->段->区->页\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 表空间\n\n  每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。\n\n- 段\n\n  每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）\n\n  1. 数据段 B+数的叶子节点\n  2. 索引段 B+数的非叶子节点\n  3. 回滚段\n\n- 区\n\n  由64个连续的页组成，每个页16KB，每个区1MB。\n\n  InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。\n\n- 页\n\n  每个页至少2行，最多7992行\n\n  1. 数据页(B-tree Node)\n  2. undo页\n  3. 系统页\n  4. 事务数据页\n  5. 插入缓冲位图页\n  6. 插入缓冲空闲列表页\n  7. 未压缩的二进制大对象(BLOB)页\n  8. 压缩的二进制大对象页\n\n- 行\n\n  每个页存放16KB/2~200行记录，即7992行。\n\n### 物理存储结构\n\n1. 共享表空间\n2. Redo文件组\n3. 表结构定义文件\n4. 独立表空间（需要设置才有）\n\n### InnoDB行记录格式\n\n- Compact行格式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134112330.png#pic_center)\n\n  - 变长字段\n\n    逆序放置\n\n    列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。\n\n  - NULL标志（至少一个字节）\n\n    逆序放置\n\n  - 记录头信息\n\n    固定占用5字节\n\n  - 隐藏列——事务ID和回滚指针列\n\n  - RowID列（6字节）\n\n- 行溢出数据\n\n  InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。\n\n- Char的行结构存储\n\n  在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。\n\n### InnoDB数据页结构\n\nInnoDB数据页由7个部分组成：\n\n1. 文件头 file header\n\n   大小固定 8个部分，共38个字节\n\n   > 属于哪个表空间\n   >\n   > 上一页、下一页（叶子节点双向链表）\n   >\n   > 页类型（叶子节点、索引节点、undo log页···）\n   >\n   > 等···\n\n2. 页头 page header\n\n   大小固定 14个部分，共56个字节\n\n   > 记录数量\n   >\n   > 空闲链表首指针\n   >\n   > 堆中第一条记录的指针\n   >\n   > 属于哪个索引ID\n   >\n   > 等···\n\n3. Infimun + supermum records\n\n   每页中有两个虚拟行记录，用来限定记录的边界。\n\n   Infimun 最小值\n\n   supermum 最大值\n\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n4. 用户记录(行记录) user records\n\n5. 空闲空间 free space\n\n   链表数据结构，有记录被删除后，会被加入到空闲链表中。\n\n6. 页目录 page directory\n\n   存放记录的相对位置\n\n   B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。\n\n7. 文件尾信息 file tailer\n\n   页的完整性保证\n\n   大小固定 1个部分，共8个字节\n\n### 约束\n\n- 数据完整性\n\n  实体完整性\n\n  域完整性\n\n  参照完整性\n\n- 四种约束\n\n  主键\n\n  唯一键\n\n  外键\n\n  default\n\n  not null\n\n\n","source":"_posts/2021-03-07-Mysql-表.md","raw":"---\ntitle: Mysql-表\ncomments: true\ndate: 2021-03-07 18:29:40\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### 主键三连\n\n- 显示定义主键。\n- 如果没有显示指定，查找表中唯一索引，如果有，该列为主键。\n- 不符合上面两条，InnoDB自动创建一个6字节大小的指针。\n\n### 逻辑存储结构\n\n- 表空间->段->区->页\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 表空间\n\n  每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。\n\n- 段\n\n  每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）\n\n  1. 数据段 B+数的叶子节点\n  2. 索引段 B+数的非叶子节点\n  3. 回滚段\n\n- 区\n\n  由64个连续的页组成，每个页16KB，每个区1MB。\n\n  InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。\n\n- 页\n\n  每个页至少2行，最多7992行\n\n  1. 数据页(B-tree Node)\n  2. undo页\n  3. 系统页\n  4. 事务数据页\n  5. 插入缓冲位图页\n  6. 插入缓冲空闲列表页\n  7. 未压缩的二进制大对象(BLOB)页\n  8. 压缩的二进制大对象页\n\n- 行\n\n  每个页存放16KB/2~200行记录，即7992行。\n\n### 物理存储结构\n\n1. 共享表空间\n2. Redo文件组\n3. 表结构定义文件\n4. 独立表空间（需要设置才有）\n\n### InnoDB行记录格式\n\n- Compact行格式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134112330.png#pic_center)\n\n  - 变长字段\n\n    逆序放置\n\n    列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。\n\n  - NULL标志（至少一个字节）\n\n    逆序放置\n\n  - 记录头信息\n\n    固定占用5字节\n\n  - 隐藏列——事务ID和回滚指针列\n\n  - RowID列（6字节）\n\n- 行溢出数据\n\n  InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。\n\n- Char的行结构存储\n\n  在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。\n\n### InnoDB数据页结构\n\nInnoDB数据页由7个部分组成：\n\n1. 文件头 file header\n\n   大小固定 8个部分，共38个字节\n\n   > 属于哪个表空间\n   >\n   > 上一页、下一页（叶子节点双向链表）\n   >\n   > 页类型（叶子节点、索引节点、undo log页···）\n   >\n   > 等···\n\n2. 页头 page header\n\n   大小固定 14个部分，共56个字节\n\n   > 记录数量\n   >\n   > 空闲链表首指针\n   >\n   > 堆中第一条记录的指针\n   >\n   > 属于哪个索引ID\n   >\n   > 等···\n\n3. Infimun + supermum records\n\n   每页中有两个虚拟行记录，用来限定记录的边界。\n\n   Infimun 最小值\n\n   supermum 最大值\n\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n4. 用户记录(行记录) user records\n\n5. 空闲空间 free space\n\n   链表数据结构，有记录被删除后，会被加入到空闲链表中。\n\n6. 页目录 page directory\n\n   存放记录的相对位置\n\n   B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。\n\n7. 文件尾信息 file tailer\n\n   页的完整性保证\n\n   大小固定 1个部分，共8个字节\n\n### 约束\n\n- 数据完整性\n\n  实体完整性\n\n  域完整性\n\n  参照完整性\n\n- 四种约束\n\n  主键\n\n  唯一键\n\n  外键\n\n  default\n\n  not null\n\n\n","slug":"Mysql-表","published":1,"updated":"2021-03-07T10:30:02.932Z","_id":"cklz0kg32001v6rs6amk3h9q5","layout":"post","photos":[],"link":"","content":"<h3 id=\"主键三连\"><a href=\"#主键三连\" class=\"headerlink\" title=\"主键三连\"></a>主键三连</h3><ul>\n<li>显示定义主键。</li>\n<li>如果没有显示指定，查找表中唯一索引，如果有，该列为主键。</li>\n<li>不符合上面两条，InnoDB自动创建一个6字节大小的指针。</li>\n</ul>\n<h3 id=\"逻辑存储结构\"><a href=\"#逻辑存储结构\" class=\"headerlink\" title=\"逻辑存储结构\"></a>逻辑存储结构</h3><ul>\n<li>表空间-&gt;段-&gt;区-&gt;页</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>表空间</p>\n<p>每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。</p>\n</li>\n<li><p>段</p>\n<p>每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）</p>\n<ol>\n<li>数据段 B+数的叶子节点</li>\n<li>索引段 B+数的非叶子节点</li>\n<li>回滚段</li>\n</ol>\n</li>\n<li><p>区</p>\n<p>由64个连续的页组成，每个页16KB，每个区1MB。</p>\n<p>InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。</p>\n</li>\n<li><p>页</p>\n<p>每个页至少2行，最多7992行</p>\n<ol>\n<li>数据页(B-tree Node)</li>\n<li>undo页</li>\n<li>系统页</li>\n<li>事务数据页</li>\n<li>插入缓冲位图页</li>\n<li>插入缓冲空闲列表页</li>\n<li>未压缩的二进制大对象(BLOB)页</li>\n<li>压缩的二进制大对象页</li>\n</ol>\n</li>\n<li><p>行</p>\n<p>每个页存放16KB/2~200行记录，即7992行。</p>\n</li>\n</ul>\n<h3 id=\"物理存储结构\"><a href=\"#物理存储结构\" class=\"headerlink\" title=\"物理存储结构\"></a>物理存储结构</h3><ol>\n<li>共享表空间</li>\n<li>Redo文件组</li>\n<li>表结构定义文件</li>\n<li>独立表空间（需要设置才有）</li>\n</ol>\n<h3 id=\"InnoDB行记录格式\"><a href=\"#InnoDB行记录格式\" class=\"headerlink\" title=\"InnoDB行记录格式\"></a>InnoDB行记录格式</h3><ul>\n<li>Compact行格式</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504134112330.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>变长字段</p>\n<p>逆序放置</p>\n<p>列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。</p>\n</li>\n<li><p>NULL标志（至少一个字节）</p>\n<p>逆序放置</p>\n</li>\n<li><p>记录头信息</p>\n<p>固定占用5字节</p>\n</li>\n<li><p>隐藏列——事务ID和回滚指针列</p>\n</li>\n<li><p>RowID列（6字节）</p>\n</li>\n<li><p>行溢出数据</p>\n<p>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。</p>\n</li>\n<li><p>Char的行结构存储</p>\n<p>在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。</p>\n</li>\n</ul>\n<h3 id=\"InnoDB数据页结构\"><a href=\"#InnoDB数据页结构\" class=\"headerlink\" title=\"InnoDB数据页结构\"></a>InnoDB数据页结构</h3><p>InnoDB数据页由7个部分组成：</p>\n<ol>\n<li><p>文件头 file header</p>\n<p>大小固定 8个部分，共38个字节</p>\n<blockquote>\n<p>属于哪个表空间</p>\n<p>上一页、下一页（叶子节点双向链表）</p>\n<p>页类型（叶子节点、索引节点、undo log页···）</p>\n<p>等···</p>\n</blockquote>\n</li>\n<li><p>页头 page header</p>\n<p>大小固定 14个部分，共56个字节</p>\n<blockquote>\n<p>记录数量</p>\n<p>空闲链表首指针</p>\n<p>堆中第一条记录的指针</p>\n<p>属于哪个索引ID</p>\n<p>等···</p>\n</blockquote>\n</li>\n<li><p>Infimun + supermum records</p>\n<p>每页中有两个虚拟行记录，用来限定记录的边界。</p>\n<p>Infimun 最小值</p>\n<p>supermum 最大值</p>\n</li>\n</ol>\n<p>  <img src=\"https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol start=\"4\">\n<li><p>用户记录(行记录) user records</p>\n</li>\n<li><p>空闲空间 free space</p>\n<p>链表数据结构，有记录被删除后，会被加入到空闲链表中。</p>\n</li>\n<li><p>页目录 page directory</p>\n<p>存放记录的相对位置</p>\n<p>B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。</p>\n</li>\n<li><p>文件尾信息 file tailer</p>\n<p>页的完整性保证</p>\n<p>大小固定 1个部分，共8个字节</p>\n</li>\n</ol>\n<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><ul>\n<li><p>数据完整性</p>\n<p>实体完整性</p>\n<p>域完整性</p>\n<p>参照完整性</p>\n</li>\n<li><p>四种约束</p>\n<p>主键</p>\n<p>唯一键</p>\n<p>外键</p>\n<p>default</p>\n<p>not null</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"主键三连\"><a href=\"#主键三连\" class=\"headerlink\" title=\"主键三连\"></a>主键三连</h3><ul>\n<li>显示定义主键。</li>\n<li>如果没有显示指定，查找表中唯一索引，如果有，该列为主键。</li>\n<li>不符合上面两条，InnoDB自动创建一个6字节大小的指针。</li>\n</ul>\n<h3 id=\"逻辑存储结构\"><a href=\"#逻辑存储结构\" class=\"headerlink\" title=\"逻辑存储结构\"></a>逻辑存储结构</h3><ul>\n<li>表空间-&gt;段-&gt;区-&gt;页</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504134054591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>表空间</p>\n<p>每张表的表空间存放的只是数据、索引、插入缓冲。其他类型的数据，如undo信息，系统事务信息，二次写缓冲等还是存放在共享表空间中。</p>\n</li>\n<li><p>段</p>\n<p>每个段开始时，先用32个页大小的碎片页来存放数据，用完后在用区（64个连续页）</p>\n<ol>\n<li>数据段 B+数的叶子节点</li>\n<li>索引段 B+数的非叶子节点</li>\n<li>回滚段</li>\n</ol>\n</li>\n<li><p>区</p>\n<p>由64个连续的页组成，每个页16KB，每个区1MB。</p>\n<p>InnoDB每次最多可以申请4个区，以此保证数据的顺序性能。</p>\n</li>\n<li><p>页</p>\n<p>每个页至少2行，最多7992行</p>\n<ol>\n<li>数据页(B-tree Node)</li>\n<li>undo页</li>\n<li>系统页</li>\n<li>事务数据页</li>\n<li>插入缓冲位图页</li>\n<li>插入缓冲空闲列表页</li>\n<li>未压缩的二进制大对象(BLOB)页</li>\n<li>压缩的二进制大对象页</li>\n</ol>\n</li>\n<li><p>行</p>\n<p>每个页存放16KB/2~200行记录，即7992行。</p>\n</li>\n</ul>\n<h3 id=\"物理存储结构\"><a href=\"#物理存储结构\" class=\"headerlink\" title=\"物理存储结构\"></a>物理存储结构</h3><ol>\n<li>共享表空间</li>\n<li>Redo文件组</li>\n<li>表结构定义文件</li>\n<li>独立表空间（需要设置才有）</li>\n</ol>\n<h3 id=\"InnoDB行记录格式\"><a href=\"#InnoDB行记录格式\" class=\"headerlink\" title=\"InnoDB行记录格式\"></a>InnoDB行记录格式</h3><ul>\n<li>Compact行格式</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504134112330.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>变长字段</p>\n<p>逆序放置</p>\n<p>列长小于255，用一个字节；大于255，用两个字节；最大不能超过2个字节。所以varchar最大长度是65535。</p>\n</li>\n<li><p>NULL标志（至少一个字节）</p>\n<p>逆序放置</p>\n</li>\n<li><p>记录头信息</p>\n<p>固定占用5字节</p>\n</li>\n<li><p>隐藏列——事务ID和回滚指针列</p>\n</li>\n<li><p>RowID列（6字节）</p>\n</li>\n<li><p>行溢出数据</p>\n<p>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页之外，即作为行溢出数据。</p>\n</li>\n<li><p>Char的行结构存储</p>\n<p>在多字节字符型的存储中，char被视为变长类型，未能占满长度的字符用0x20填充。可以说在多字节字符集的情况下，char和varchar的行存储基本没有区别。</p>\n</li>\n</ul>\n<h3 id=\"InnoDB数据页结构\"><a href=\"#InnoDB数据页结构\" class=\"headerlink\" title=\"InnoDB数据页结构\"></a>InnoDB数据页结构</h3><p>InnoDB数据页由7个部分组成：</p>\n<ol>\n<li><p>文件头 file header</p>\n<p>大小固定 8个部分，共38个字节</p>\n<blockquote>\n<p>属于哪个表空间</p>\n<p>上一页、下一页（叶子节点双向链表）</p>\n<p>页类型（叶子节点、索引节点、undo log页···）</p>\n<p>等···</p>\n</blockquote>\n</li>\n<li><p>页头 page header</p>\n<p>大小固定 14个部分，共56个字节</p>\n<blockquote>\n<p>记录数量</p>\n<p>空闲链表首指针</p>\n<p>堆中第一条记录的指针</p>\n<p>属于哪个索引ID</p>\n<p>等···</p>\n</blockquote>\n</li>\n<li><p>Infimun + supermum records</p>\n<p>每页中有两个虚拟行记录，用来限定记录的边界。</p>\n<p>Infimun 最小值</p>\n<p>supermum 最大值</p>\n</li>\n</ol>\n<p>  <img src=\"https://img-blog.csdnimg.cn/20200504134129918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol start=\"4\">\n<li><p>用户记录(行记录) user records</p>\n</li>\n<li><p>空闲空间 free space</p>\n<p>链表数据结构，有记录被删除后，会被加入到空闲链表中。</p>\n</li>\n<li><p>页目录 page directory</p>\n<p>存放记录的相对位置</p>\n<p>B+数索引只能找到记录所在的页，数据库把页载入内存，然后通过page directory进行二分查找。二分查找的时间复杂度很低，通常忽略这部分时间。</p>\n</li>\n<li><p>文件尾信息 file tailer</p>\n<p>页的完整性保证</p>\n<p>大小固定 1个部分，共8个字节</p>\n</li>\n</ol>\n<h3 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h3><ul>\n<li><p>数据完整性</p>\n<p>实体完整性</p>\n<p>域完整性</p>\n<p>参照完整性</p>\n</li>\n<li><p>四种约束</p>\n<p>主键</p>\n<p>唯一键</p>\n<p>外键</p>\n<p>default</p>\n<p>not null</p>\n</li>\n</ul>\n"},{"title":"Mysql-文件","comments":1,"date":"2021-03-07T10:30:22.000Z","author":null,"_content":"\n#### 参数文件\n```mysql\nmysql --help | grep my.cnf\n```\n\n没有参数文件，取源代码中的默认值。\n\n#### 日志文件\n\n- 错误日志\n\n  ```mysql\n  # 查看文件位置\n  show variables like 'log_error';\n  ```\n\n- 二进制日志\n\n  事务提交前进行记录。\n\n  记录对数据库执行更改的所有操作，主要作用是恢复和复制。\n\n  二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。\n\n  - binlog_format（可以动态更改）\n\n    1. statement 二进制日志文件记录逻辑SQL语句。\n\n    2. row 记录表的行更改情况。\n\n       生成的日志文件更大，网络开销也增加\n\n    3. mixed 默认statement，某些情况下用row。\n\n       > 使用NDB引擎\n       >\n       > 使用UUID，ROW_COUNT()等不确定函数\n       >\n       > 使用insert delay\n       >\n       > 使用用户定义函数\n       >\n       > 使用临时表\n\n- 慢查询日志\n\n- 查询日志\n\n#### socket文件\n\n​\t用Unix域套接字方式进行连接时需要的文件\n\n```mysql\nshow variables like 'socket';\n```\n\n#### pid文件\n\n​\tMySQL实例的进程ID文件\n\n```mysql\nshow variables like 'pid_file';\n```\n\n#### 表结构文件\n\n​\tMySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。\n\n#### 存储引擎文件\n\n- 表空间文件\n\n  MySQL存储的数据按表空间进行存放。\n\n  1. 默认表空间\n\n     默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。\n\n  2. 单独表空间\n\n     通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。\n\n     单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n- 重做日志文件\n\n  事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。\n\n  默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。\n\n  重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n  ","source":"_posts/2021-03-07-Mysql-文件.md","raw":"---\ntitle: Mysql-文件\ncomments: true\ndate: 2021-03-07 18:30:22\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n#### 参数文件\n```mysql\nmysql --help | grep my.cnf\n```\n\n没有参数文件，取源代码中的默认值。\n\n#### 日志文件\n\n- 错误日志\n\n  ```mysql\n  # 查看文件位置\n  show variables like 'log_error';\n  ```\n\n- 二进制日志\n\n  事务提交前进行记录。\n\n  记录对数据库执行更改的所有操作，主要作用是恢复和复制。\n\n  二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。\n\n  - binlog_format（可以动态更改）\n\n    1. statement 二进制日志文件记录逻辑SQL语句。\n\n    2. row 记录表的行更改情况。\n\n       生成的日志文件更大，网络开销也增加\n\n    3. mixed 默认statement，某些情况下用row。\n\n       > 使用NDB引擎\n       >\n       > 使用UUID，ROW_COUNT()等不确定函数\n       >\n       > 使用insert delay\n       >\n       > 使用用户定义函数\n       >\n       > 使用临时表\n\n- 慢查询日志\n\n- 查询日志\n\n#### socket文件\n\n​\t用Unix域套接字方式进行连接时需要的文件\n\n```mysql\nshow variables like 'socket';\n```\n\n#### pid文件\n\n​\tMySQL实例的进程ID文件\n\n```mysql\nshow variables like 'pid_file';\n```\n\n#### 表结构文件\n\n​\tMySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。\n\n#### 存储引擎文件\n\n- 表空间文件\n\n  MySQL存储的数据按表空间进行存放。\n\n  1. 默认表空间\n\n     默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。\n\n  2. 单独表空间\n\n     通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。\n\n     单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n- 重做日志文件\n\n  事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。\n\n  默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。\n\n  重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n  ","slug":"Mysql-文件","published":1,"updated":"2021-03-07T10:30:45.896Z","_id":"cklz0lcie001y6rs65v9j0pwp","layout":"post","photos":[],"link":"","content":"<h4 id=\"参数文件\"><a href=\"#参数文件\" class=\"headerlink\" title=\"参数文件\"></a>参数文件</h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql --help | grep my.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>没有参数文件，取源代码中的默认值。</p>\n<h4 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h4><ul>\n<li><p>错误日志</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 查看文件位置\nshow variables like &#39;log_error&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>二进制日志</p>\n<p>事务提交前进行记录。</p>\n<p>记录对数据库执行更改的所有操作，主要作用是恢复和复制。</p>\n<p>二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。</p>\n<ul>\n<li><p>binlog_format（可以动态更改）</p>\n<ol>\n<li><p>statement 二进制日志文件记录逻辑SQL语句。</p>\n</li>\n<li><p>row 记录表的行更改情况。</p>\n<p>生成的日志文件更大，网络开销也增加</p>\n</li>\n<li><p>mixed 默认statement，某些情况下用row。</p>\n<blockquote>\n<p>使用NDB引擎</p>\n<p>使用UUID，ROW_COUNT()等不确定函数</p>\n<p>使用insert delay</p>\n<p>使用用户定义函数</p>\n<p>使用临时表</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>慢查询日志</p>\n</li>\n<li><p>查询日志</p>\n</li>\n</ul>\n<h4 id=\"socket文件\"><a href=\"#socket文件\" class=\"headerlink\" title=\"socket文件\"></a>socket文件</h4><p>​    用Unix域套接字方式进行连接时需要的文件</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show variables like &#39;socket&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"pid文件\"><a href=\"#pid文件\" class=\"headerlink\" title=\"pid文件\"></a>pid文件</h4><p>​    MySQL实例的进程ID文件</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show variables like &#39;pid_file&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"表结构文件\"><a href=\"#表结构文件\" class=\"headerlink\" title=\"表结构文件\"></a>表结构文件</h4><p>​    MySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。</p>\n<h4 id=\"存储引擎文件\"><a href=\"#存储引擎文件\" class=\"headerlink\" title=\"存储引擎文件\"></a>存储引擎文件</h4><ul>\n<li><p>表空间文件</p>\n<p>MySQL存储的数据按表空间进行存放。</p>\n<ol>\n<li><p>默认表空间</p>\n<p>默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。</p>\n</li>\n<li><p>单独表空间</p>\n<p>通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。</p>\n<p>单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>重做日志文件</p>\n<p>事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。</p>\n<p>默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。</p>\n<p>重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"参数文件\"><a href=\"#参数文件\" class=\"headerlink\" title=\"参数文件\"></a>参数文件</h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql --help | grep my.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>没有参数文件，取源代码中的默认值。</p>\n<h4 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h4><ul>\n<li><p>错误日志</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 查看文件位置\nshow variables like &#39;log_error&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>二进制日志</p>\n<p>事务提交前进行记录。</p>\n<p>记录对数据库执行更改的所有操作，主要作用是恢复和复制。</p>\n<p>二进制日志文件在默认情况下没有启动，启动后会使性能下降1%。</p>\n<ul>\n<li><p>binlog_format（可以动态更改）</p>\n<ol>\n<li><p>statement 二进制日志文件记录逻辑SQL语句。</p>\n</li>\n<li><p>row 记录表的行更改情况。</p>\n<p>生成的日志文件更大，网络开销也增加</p>\n</li>\n<li><p>mixed 默认statement，某些情况下用row。</p>\n<blockquote>\n<p>使用NDB引擎</p>\n<p>使用UUID，ROW_COUNT()等不确定函数</p>\n<p>使用insert delay</p>\n<p>使用用户定义函数</p>\n<p>使用临时表</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>慢查询日志</p>\n</li>\n<li><p>查询日志</p>\n</li>\n</ul>\n<h4 id=\"socket文件\"><a href=\"#socket文件\" class=\"headerlink\" title=\"socket文件\"></a>socket文件</h4><p>​    用Unix域套接字方式进行连接时需要的文件</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show variables like &#39;socket&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"pid文件\"><a href=\"#pid文件\" class=\"headerlink\" title=\"pid文件\"></a>pid文件</h4><p>​    MySQL实例的进程ID文件</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show variables like &#39;pid_file&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"表结构文件\"><a href=\"#表结构文件\" class=\"headerlink\" title=\"表结构文件\"></a>表结构文件</h4><p>​    MySQL的数据存储都是按照表的，每个表都会有与之对应的文件。不论使用何种引擎，MySQL都有一个以frm为后缀的文件，记录表的结构定义。</p>\n<h4 id=\"存储引擎文件\"><a href=\"#存储引擎文件\" class=\"headerlink\" title=\"存储引擎文件\"></a>存储引擎文件</h4><ul>\n<li><p>表空间文件</p>\n<p>MySQL存储的数据按表空间进行存放。</p>\n<ol>\n<li><p>默认表空间</p>\n<p>默认情况下，会有一个默认初始化大小10MB、名为ibdata1的文件（默认表空间文件），通过innodb_data_file设置。</p>\n</li>\n<li><p>单独表空间</p>\n<p>通过设置innodb_file_per_table可以将每个基于InnoDB存储引擎的表单独产生一个表空间，文件名为.idb。</p>\n<p>单独表空间文件仅存储该表的数据、索引和插入缓冲，其余信息还是存放在默认表空间中。</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504133622515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>重做日志文件</p>\n<p>事务进行中，不断有重做日志写入文件，记录关于每个页更改的物理情况。</p>\n<p>默认情况下会有两个文件，ib_ligfile0和ib_ligfile1（循环使用），记录了InnoDB的事务日志。</p>\n<p>重做日志文件的只要作用是保证数据的完整性。如主机断电导致实例失败，InnoDB会使用日志回复到断电前的状态。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200504133647661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Mysql-InnoDB存储引擎","comments":1,"date":"2021-03-07T10:31:06.000Z","author":null,"_content":"\n### InnoDB引擎的4大特性\n1. 插入缓存（物理页的一个组成部分）\n\n   ```mysql\n   show engine innodb status\\G;\n   INSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息\n   ```\n\n   对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。\n\n   > 那什么时候进行合并呢？\n   >\n   > - 非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。\n   > - 非聚集索引页没有可用空间。空间小于1/32页的大小，则进行合并。\n   > - master thread每秒和每10秒的合并操作。\n\n   这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。\n\n   使用需要满足两个条件\n\n   - 索引是非聚集索引\n   - 索引不是唯一索引的\n\n2. 两次写 double write\n\n   二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。\n\n   > double write的组成：\n   >\n   > - 内存中double write buffer，大小为2M。\n   >\n   > - 物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。\n\n   对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。\n\n3. 自适应哈希索引\n\n   InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。\n\n   哈希索引会根据访问的频率和模式为==某些页建==立哈希索引，而不是整个表。\n\n   自适应哈希索引占用InnoDB buffer poll的空间。\n\n4. 预读\n\n   - 随机预读（已废弃）\n\n     当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。\n\n   - 线性预读\n\n     基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由`innodb_read_ahead_threshold`控制，默认值56。\n\n\n\n\n### InnoDB体系架构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n#### 后台线程\n\n默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）\n\n1. 1个master thread（几乎实现了所有功能）\n\n2. 1个锁监控线程\n\n3. 1个错误监控线程\n\n4. 4个I/O thread（不同版本read write线程数可能不同）\n\n   > Insert  buffer thread\n   >\n   > Log thread\n   >\n   > Read thread\n   >\n   > Write  thread\n   >\n   > ```mysql\n   > show engine innodb status\\G; # 过去某个时间段的数据库状态\n   > \n   > Per second averages calculated from the last 46 seconds # 过去46s内的状态\n   > \n   > FILE I/O\n   > xxx\n   > ```\n\n#### 内存\n\n1. 缓冲池 buffer poll\n\n   占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。\n\n   ```mysql\n   show engine innodb status\\G;\n   \n   BUFFER POOL AND MEMORY\n   Buffer pool size   8191 # 一共多少个缓冲帧\n   Free buffers       7529 # 空闲缓冲帧\n   Database pages     658 # 已经使用缓冲帧\n   Old database pages 262\n   Modified db pages  0 # 脏页数量\n   ```\n\n   - 缓冲池中的数据页类型\n     1. 索引页\n     2. 数据页\n     3. undo页\n     4. 插入缓冲 insert buffer\n     5. 自适应hash索引\n     6. InnoDB锁信息 lock info\n     7. 数据字典信息 data dictionary\n\n2. 重做日志缓冲池 redo log buffer\n\n3. 额外内存池 additional memory poll","source":"_posts/2021-03-07-Mysql-InnoDB存储引擎.md","raw":"---\ntitle: Mysql-InnoDB存储引擎\ncomments: true\ndate: 2021-03-07 18:31:06\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### InnoDB引擎的4大特性\n1. 插入缓存（物理页的一个组成部分）\n\n   ```mysql\n   show engine innodb status\\G;\n   INSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息\n   ```\n\n   对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。\n\n   > 那什么时候进行合并呢？\n   >\n   > - 非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。\n   > - 非聚集索引页没有可用空间。空间小于1/32页的大小，则进行合并。\n   > - master thread每秒和每10秒的合并操作。\n\n   这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。\n\n   使用需要满足两个条件\n\n   - 索引是非聚集索引\n   - 索引不是唯一索引的\n\n2. 两次写 double write\n\n   二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。\n\n   > double write的组成：\n   >\n   > - 内存中double write buffer，大小为2M。\n   >\n   > - 物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。\n\n   对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。\n\n3. 自适应哈希索引\n\n   InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。\n\n   哈希索引会根据访问的频率和模式为==某些页建==立哈希索引，而不是整个表。\n\n   自适应哈希索引占用InnoDB buffer poll的空间。\n\n4. 预读\n\n   - 随机预读（已废弃）\n\n     当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。\n\n   - 线性预读\n\n     基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由`innodb_read_ahead_threshold`控制，默认值56。\n\n\n\n\n### InnoDB体系架构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n#### 后台线程\n\n默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）\n\n1. 1个master thread（几乎实现了所有功能）\n\n2. 1个锁监控线程\n\n3. 1个错误监控线程\n\n4. 4个I/O thread（不同版本read write线程数可能不同）\n\n   > Insert  buffer thread\n   >\n   > Log thread\n   >\n   > Read thread\n   >\n   > Write  thread\n   >\n   > ```mysql\n   > show engine innodb status\\G; # 过去某个时间段的数据库状态\n   > \n   > Per second averages calculated from the last 46 seconds # 过去46s内的状态\n   > \n   > FILE I/O\n   > xxx\n   > ```\n\n#### 内存\n\n1. 缓冲池 buffer poll\n\n   占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。\n\n   ```mysql\n   show engine innodb status\\G;\n   \n   BUFFER POOL AND MEMORY\n   Buffer pool size   8191 # 一共多少个缓冲帧\n   Free buffers       7529 # 空闲缓冲帧\n   Database pages     658 # 已经使用缓冲帧\n   Old database pages 262\n   Modified db pages  0 # 脏页数量\n   ```\n\n   - 缓冲池中的数据页类型\n     1. 索引页\n     2. 数据页\n     3. undo页\n     4. 插入缓冲 insert buffer\n     5. 自适应hash索引\n     6. InnoDB锁信息 lock info\n     7. 数据字典信息 data dictionary\n\n2. 重做日志缓冲池 redo log buffer\n\n3. 额外内存池 additional memory poll","slug":"Mysql-InnoDB存储引擎","published":1,"updated":"2021-03-07T10:31:22.863Z","_id":"cklz0mac900216rs63jy0gsve","layout":"post","photos":[],"link":"","content":"<h3 id=\"InnoDB引擎的4大特性\"><a href=\"#InnoDB引擎的4大特性\" class=\"headerlink\" title=\"InnoDB引擎的4大特性\"></a>InnoDB引擎的4大特性</h3><ol>\n<li><p>插入缓存（物理页的一个组成部分）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\nINSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。</p>\n<blockquote>\n<p>那什么时候进行合并呢？</p>\n<ul>\n<li>非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。</li>\n<li>非聚集索引页没有可用空间。空间小于1/32页的大小，则进行合并。</li>\n<li>master thread每秒和每10秒的合并操作。</li>\n</ul>\n</blockquote>\n<p>这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。</p>\n<p>使用需要满足两个条件</p>\n<ul>\n<li>索引是非聚集索引</li>\n<li>索引不是唯一索引的</li>\n</ul>\n</li>\n<li><p>两次写 double write</p>\n<p>二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。</p>\n<blockquote>\n<p>double write的组成：</p>\n<ul>\n<li><p>内存中double write buffer，大小为2M。</p>\n</li>\n<li><p>物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。</p>\n</li>\n</ul>\n</blockquote>\n<p>对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。</p>\n</li>\n<li><p>自适应哈希索引</p>\n<p>InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。</p>\n<p>哈希索引会根据访问的频率和模式为==某些页建==立哈希索引，而不是整个表。</p>\n<p>自适应哈希索引占用InnoDB buffer poll的空间。</p>\n</li>\n<li><p>预读</p>\n<ul>\n<li><p>随机预读（已废弃）</p>\n<p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。</p>\n</li>\n<li><p>线性预读</p>\n<p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"InnoDB体系架构\"><a href=\"#InnoDB体系架构\" class=\"headerlink\" title=\"InnoDB体系架构\"></a>InnoDB体系架构</h3><p><img src=\"https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"后台线程\"><a href=\"#后台线程\" class=\"headerlink\" title=\"后台线程\"></a>后台线程</h4><p>默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）</p>\n<ol>\n<li><p>1个master thread（几乎实现了所有功能）</p>\n</li>\n<li><p>1个锁监控线程</p>\n</li>\n<li><p>1个错误监控线程</p>\n</li>\n<li><p>4个I/O thread（不同版本read write线程数可能不同）</p>\n<blockquote>\n<p>Insert  buffer thread</p>\n<p>Log thread</p>\n<p>Read thread</p>\n<p>Write  thread</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G; # 过去某个时间段的数据库状态\n\nPer second averages calculated from the last 46 seconds # 过去46s内的状态\n\nFILE I&#x2F;O\nxxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n</li>\n</ol>\n<h4 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h4><ol>\n<li><p>缓冲池 buffer poll</p>\n<p>占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\n\nBUFFER POOL AND MEMORY\nBuffer pool size   8191 # 一共多少个缓冲帧\nFree buffers       7529 # 空闲缓冲帧\nDatabase pages     658 # 已经使用缓冲帧\nOld database pages 262\nModified db pages  0 # 脏页数量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>缓冲池中的数据页类型<ol>\n<li>索引页</li>\n<li>数据页</li>\n<li>undo页</li>\n<li>插入缓冲 insert buffer</li>\n<li>自适应hash索引</li>\n<li>InnoDB锁信息 lock info</li>\n<li>数据字典信息 data dictionary</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>重做日志缓冲池 redo log buffer</p>\n</li>\n<li><p>额外内存池 additional memory poll</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"InnoDB引擎的4大特性\"><a href=\"#InnoDB引擎的4大特性\" class=\"headerlink\" title=\"InnoDB引擎的4大特性\"></a>InnoDB引擎的4大特性</h3><ol>\n<li><p>插入缓存（物理页的一个组成部分）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\nINSERT BUFFER AND ADAPTIVE HASH INDEX # 插入缓冲信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于非聚集索引的插入或更新操作，不是每次直接插入索引页。而是先判断插入的非聚集索引页是否在缓冲池中。如果在，则直接插入，如果不在，先放入插入缓冲区，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作。</p>\n<blockquote>\n<p>那什么时候进行合并呢？</p>\n<ul>\n<li>非聚集索引页被读取到缓冲池中。select先检查insert buffer是否有非聚集索引页的存在，如果有则合并。</li>\n<li>非聚集索引页没有可用空间。空间小于1/32页的大小，则进行合并。</li>\n<li>master thread每秒和每10秒的合并操作。</li>\n</ul>\n</blockquote>\n<p>这样通常能将多个插入合并到一个操作中，目的还是为了减少随机IO带来性能损耗。</p>\n<p>使用需要满足两个条件</p>\n<ul>\n<li>索引是非聚集索引</li>\n<li>索引不是唯一索引的</li>\n</ul>\n</li>\n<li><p>两次写 double write</p>\n<p>二次写缓存位于系统表空间，用来缓存从buffer poll中flush之后，写入数据文件之前的数据。数据页到double write以一次大的连续块的方式写入，需要的IO消耗小于写入数据文件的消耗。</p>\n<blockquote>\n<p>double write的组成：</p>\n<ul>\n<li><p>内存中double write buffer，大小为2M。</p>\n</li>\n<li><p>物理磁盘上共享表空间中连续的128个页，即两个区，大小为2M。</p>\n</li>\n</ul>\n</blockquote>\n<p>对缓冲池中的脏页进行刷新时，不是直接写磁盘，而是将脏页先复制到内存中的double write buffer，之后通过double write分两次，每次1M顺序的写入共享表空间的物理磁盘上。因为double write页是连续的，顺序写的开销很小。在完成double write页的写入后，再将double write buffer 中的页写入各个表空间文件中。这时的写入是离散的，如果在写入过程中出现崩溃，可以使用共享表空间的double write页进行恢复。</p>\n</li>\n<li><p>自适应哈希索引</p>\n<p>InnoDB会监控对表上索引的查找，如果建立哈希索引可以带来速度的提升，则建立哈希索引。自适应哈希索引通过缓冲池的B+树构造，因此建立速度很快。</p>\n<p>哈希索引会根据访问的频率和模式为==某些页建==立哈希索引，而不是整个表。</p>\n<p>自适应哈希索引占用InnoDB buffer poll的空间。</p>\n</li>\n<li><p>预读</p>\n<ul>\n<li><p>随机预读（已废弃）</p>\n<p>当一个区中==13==个页在缓冲区中，并在LRU列表的前端，则InnoDB存储引擎会将这个区中剩余的所有页都预读到缓冲区。InnoDB Plugin 1.0.4开始，随机预读被取消。</p>\n</li>\n<li><p>线性预读</p>\n<p>基于缓冲池中页的访问模式，而不是数量。如果一个区中的N个页都被顺序的访问了，则InnoDB会读取下一个区的所有页。N的值由<code>innodb_read_ahead_threshold</code>控制，默认值56。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"InnoDB体系架构\"><a href=\"#InnoDB体系架构\" class=\"headerlink\" title=\"InnoDB体系架构\"></a>InnoDB体系架构</h3><p><img src=\"https://img-blog.csdnimg.cn/20200504133348713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"后台线程\"><a href=\"#后台线程\" class=\"headerlink\" title=\"后台线程\"></a>后台线程</h4><p>默认情况下InnoDB后台有7个线程（版本不同，线程数可能不同；线程数也可以配置）</p>\n<ol>\n<li><p>1个master thread（几乎实现了所有功能）</p>\n</li>\n<li><p>1个锁监控线程</p>\n</li>\n<li><p>1个错误监控线程</p>\n</li>\n<li><p>4个I/O thread（不同版本read write线程数可能不同）</p>\n<blockquote>\n<p>Insert  buffer thread</p>\n<p>Log thread</p>\n<p>Read thread</p>\n<p>Write  thread</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G; # 过去某个时间段的数据库状态\n\nPer second averages calculated from the last 46 seconds # 过去46s内的状态\n\nFILE I&#x2F;O\nxxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n</li>\n</ol>\n<h4 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h4><ol>\n<li><p>缓冲池 buffer poll</p>\n<p>占最大块内存，InnoDB将数据库文件按页（16k）读到缓冲池，然后按LRU保留缓存数据。数据库文件需要修改，首先修改缓冲池中的页（发生修改后，该页为脏页），按照一定的频率将缓冲池中的脏页刷新到文件。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engine innodb status\\G;\n\nBUFFER POOL AND MEMORY\nBuffer pool size   8191 # 一共多少个缓冲帧\nFree buffers       7529 # 空闲缓冲帧\nDatabase pages     658 # 已经使用缓冲帧\nOld database pages 262\nModified db pages  0 # 脏页数量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>缓冲池中的数据页类型<ol>\n<li>索引页</li>\n<li>数据页</li>\n<li>undo页</li>\n<li>插入缓冲 insert buffer</li>\n<li>自适应hash索引</li>\n<li>InnoDB锁信息 lock info</li>\n<li>数据字典信息 data dictionary</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>重做日志缓冲池 redo log buffer</p>\n</li>\n<li><p>额外内存池 additional memory poll</p>\n</li>\n</ol>\n"},{"title":"Mysql-存储引擎和体系结构","comments":1,"date":"2021-03-07T10:31:46.000Z","author":null,"_content":"\n### MySQL有哪些常见的引擎，说说他们的区别？\n\n```mysql\nshow engines; #查看支持的引擎\n```\n\n- MyISAM：非事务处理存储引擎\n\n  索引放在XX.MYI文件中，数据放在XX.MYD文件中。\n\n  在线分析处理OLAP。\n\n  全文索引。\n\n- InnoDB：具备外键功能的存储引擎、行锁\n\n  索引也是数据。数据和索引存在一个XX.IDB文件中。\n\n  在线事务处理OLTP。\n\n- Mermory：基于内存\n\n  Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。\n\n  默认hash索引。\n\n- Archive：数据存档，数据插入后不能修改，只支持insert和select\n\n  针对高写入压缩做了优化的简单引擎，压缩存储1：10。\n  \n- Maria\n\n  MyISAM后续版本\n\n  缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能\n\n- NDB\n\n  集群存储引擎\n\n  数据全放内存（可以将非索引数据放磁盘）\n\n- Merge、CSV、Sphinx、Infobright\n\n| 特点     | InnoDB | MyISAM | Memory       | Archive |\n| -------- | ------ | ------ | ------------ | ------- |\n| b+树索引 | yes    | yes    | yes          | no      |\n| MVCC     | yes    | no     | no           | no      |\n| 事务     | yes    | no     | no           | no      |\n| 存储限制 | 64TB   | 256TB  | RAM          | None    |\n| 索引缓存 | yes    | yes    | 本身就是缓存 | No      |\n| 外键     | yes    | no     | no           | no      |\n| 锁粒度   | row    | table  | table        | row     |\n| 全文索引 | yes    | yes    | no           | no      |\n| 数据缓存 | yes    | no     | 本身就是缓存 | no      |\n\n\n\n### 数据库和实例的区别\n\n- 数据库：物理操作系统文件或其他形式文件类型的集合。\n- 数据库实例：有数据库后台进程/线程以及一个共享内存区组成。\n\n\n\n### 查看MySQL从哪里读取的配置文件\n\n从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。\n\n```shell\n➜  ~ mysql --help | grep my.cnf\n                      \norder of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf \n/etc/mysql/my.cnf \n/usr/local/Cellar/mysql-client/8.0.18/etc/my.cnf \n~/.my.cnf\n```\n\n### MySQL体系结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 连接池\n- 管理服务和工具\n- SQL接口\n- 查询分析器\n- 优化器\n- 缓冲\n- 存储引擎\n- 物理文件\n\n\n\n","source":"_posts/2021-03-07-Mysql-存储引擎和体系结构.md","raw":"---\ntitle: Mysql-存储引擎和体系结构\ncomments: true\ndate: 2021-03-07 18:31:46\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### MySQL有哪些常见的引擎，说说他们的区别？\n\n```mysql\nshow engines; #查看支持的引擎\n```\n\n- MyISAM：非事务处理存储引擎\n\n  索引放在XX.MYI文件中，数据放在XX.MYD文件中。\n\n  在线分析处理OLAP。\n\n  全文索引。\n\n- InnoDB：具备外键功能的存储引擎、行锁\n\n  索引也是数据。数据和索引存在一个XX.IDB文件中。\n\n  在线事务处理OLTP。\n\n- Mermory：基于内存\n\n  Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。\n\n  默认hash索引。\n\n- Archive：数据存档，数据插入后不能修改，只支持insert和select\n\n  针对高写入压缩做了优化的简单引擎，压缩存储1：10。\n  \n- Maria\n\n  MyISAM后续版本\n\n  缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能\n\n- NDB\n\n  集群存储引擎\n\n  数据全放内存（可以将非索引数据放磁盘）\n\n- Merge、CSV、Sphinx、Infobright\n\n| 特点     | InnoDB | MyISAM | Memory       | Archive |\n| -------- | ------ | ------ | ------------ | ------- |\n| b+树索引 | yes    | yes    | yes          | no      |\n| MVCC     | yes    | no     | no           | no      |\n| 事务     | yes    | no     | no           | no      |\n| 存储限制 | 64TB   | 256TB  | RAM          | None    |\n| 索引缓存 | yes    | yes    | 本身就是缓存 | No      |\n| 外键     | yes    | no     | no           | no      |\n| 锁粒度   | row    | table  | table        | row     |\n| 全文索引 | yes    | yes    | no           | no      |\n| 数据缓存 | yes    | no     | 本身就是缓存 | no      |\n\n\n\n### 数据库和实例的区别\n\n- 数据库：物理操作系统文件或其他形式文件类型的集合。\n- 数据库实例：有数据库后台进程/线程以及一个共享内存区组成。\n\n\n\n### 查看MySQL从哪里读取的配置文件\n\n从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。\n\n```shell\n➜  ~ mysql --help | grep my.cnf\n                      \norder of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf \n/etc/mysql/my.cnf \n/usr/local/Cellar/mysql-client/8.0.18/etc/my.cnf \n~/.my.cnf\n```\n\n### MySQL体系结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 连接池\n- 管理服务和工具\n- SQL接口\n- 查询分析器\n- 优化器\n- 缓冲\n- 存储引擎\n- 物理文件\n\n\n\n","slug":"Mysql-存储引擎和体系结构","published":1,"updated":"2021-03-07T10:32:02.057Z","_id":"cklz0n58300246rs68dxq8t89","layout":"post","photos":[],"link":"","content":"<h3 id=\"MySQL有哪些常见的引擎，说说他们的区别？\"><a href=\"#MySQL有哪些常见的引擎，说说他们的区别？\" class=\"headerlink\" title=\"MySQL有哪些常见的引擎，说说他们的区别？\"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engines; #查看支持的引擎<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MyISAM：非事务处理存储引擎</p>\n<p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p>\n<p>在线分析处理OLAP。</p>\n<p>全文索引。</p>\n</li>\n<li><p>InnoDB：具备外键功能的存储引擎、行锁</p>\n<p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p>\n<p>在线事务处理OLTP。</p>\n</li>\n<li><p>Mermory：基于内存</p>\n<p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p>\n<p>默认hash索引。</p>\n</li>\n<li><p>Archive：数据存档，数据插入后不能修改，只支持insert和select</p>\n<p>针对高写入压缩做了优化的简单引擎，压缩存储1：10。</p>\n</li>\n<li><p>Maria</p>\n<p>MyISAM后续版本</p>\n<p>缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能</p>\n</li>\n<li><p>NDB</p>\n<p>集群存储引擎</p>\n<p>数据全放内存（可以将非索引数据放磁盘）</p>\n</li>\n<li><p>Merge、CSV、Sphinx、Infobright</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b+树索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>MVCC</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>None</td>\n</tr>\n<tr>\n<td>索引缓存</td>\n<td>yes</td>\n<td>yes</td>\n<td>本身就是缓存</td>\n<td>No</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>锁粒度</td>\n<td>row</td>\n<td>table</td>\n<td>table</td>\n<td>row</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>数据缓存</td>\n<td>yes</td>\n<td>no</td>\n<td>本身就是缓存</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据库和实例的区别\"><a href=\"#数据库和实例的区别\" class=\"headerlink\" title=\"数据库和实例的区别\"></a>数据库和实例的区别</h3><ul>\n<li>数据库：物理操作系统文件或其他形式文件类型的集合。</li>\n<li>数据库实例：有数据库后台进程/线程以及一个共享内存区组成。</li>\n</ul>\n<h3 id=\"查看MySQL从哪里读取的配置文件\"><a href=\"#查看MySQL从哪里读取的配置文件\" class=\"headerlink\" title=\"查看MySQL从哪里读取的配置文件\"></a>查看MySQL从哪里读取的配置文件</h3><p>从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">➜  ~ mysql --help | grep my.cnf\n                      \norder of preference, my.cnf, $MYSQL_TCP_PORT,\n&#x2F;etc&#x2F;my.cnf \n&#x2F;etc&#x2F;mysql&#x2F;my.cnf \n&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql-client&#x2F;8.0.18&#x2F;etc&#x2F;my.cnf \n~&#x2F;.my.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"MySQL体系结构\"><a href=\"#MySQL体系结构\" class=\"headerlink\" title=\"MySQL体系结构\"></a>MySQL体系结构</h3><p><img src=\"https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>连接池</li>\n<li>管理服务和工具</li>\n<li>SQL接口</li>\n<li>查询分析器</li>\n<li>优化器</li>\n<li>缓冲</li>\n<li>存储引擎</li>\n<li>物理文件</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"MySQL有哪些常见的引擎，说说他们的区别？\"><a href=\"#MySQL有哪些常见的引擎，说说他们的区别？\" class=\"headerlink\" title=\"MySQL有哪些常见的引擎，说说他们的区别？\"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engines; #查看支持的引擎<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MyISAM：非事务处理存储引擎</p>\n<p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p>\n<p>在线分析处理OLAP。</p>\n<p>全文索引。</p>\n</li>\n<li><p>InnoDB：具备外键功能的存储引擎、行锁</p>\n<p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p>\n<p>在线事务处理OLTP。</p>\n</li>\n<li><p>Mermory：基于内存</p>\n<p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p>\n<p>默认hash索引。</p>\n</li>\n<li><p>Archive：数据存档，数据插入后不能修改，只支持insert和select</p>\n<p>针对高写入压缩做了优化的简单引擎，压缩存储1：10。</p>\n</li>\n<li><p>Maria</p>\n<p>MyISAM后续版本</p>\n<p>缓存数据和索引文件，行锁设计，MVCC，支持事务，更好的BLOB字符类型处理性能</p>\n</li>\n<li><p>NDB</p>\n<p>集群存储引擎</p>\n<p>数据全放内存（可以将非索引数据放磁盘）</p>\n</li>\n<li><p>Merge、CSV、Sphinx、Infobright</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b+树索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>MVCC</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>None</td>\n</tr>\n<tr>\n<td>索引缓存</td>\n<td>yes</td>\n<td>yes</td>\n<td>本身就是缓存</td>\n<td>No</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>锁粒度</td>\n<td>row</td>\n<td>table</td>\n<td>table</td>\n<td>row</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>数据缓存</td>\n<td>yes</td>\n<td>no</td>\n<td>本身就是缓存</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据库和实例的区别\"><a href=\"#数据库和实例的区别\" class=\"headerlink\" title=\"数据库和实例的区别\"></a>数据库和实例的区别</h3><ul>\n<li>数据库：物理操作系统文件或其他形式文件类型的集合。</li>\n<li>数据库实例：有数据库后台进程/线程以及一个共享内存区组成。</li>\n</ul>\n<h3 id=\"查看MySQL从哪里读取的配置文件\"><a href=\"#查看MySQL从哪里读取的配置文件\" class=\"headerlink\" title=\"查看MySQL从哪里读取的配置文件\"></a>查看MySQL从哪里读取的配置文件</h3><p>从上到下找my.cnf文件，最终值以最后一个文件中的参数为准。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">➜  ~ mysql --help | grep my.cnf\n                      \norder of preference, my.cnf, $MYSQL_TCP_PORT,\n&#x2F;etc&#x2F;my.cnf \n&#x2F;etc&#x2F;mysql&#x2F;my.cnf \n&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql-client&#x2F;8.0.18&#x2F;etc&#x2F;my.cnf \n~&#x2F;.my.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"MySQL体系结构\"><a href=\"#MySQL体系结构\" class=\"headerlink\" title=\"MySQL体系结构\"></a>MySQL体系结构</h3><p><img src=\"https://img-blog.csdnimg.cn/20200504105206146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>连接池</li>\n<li>管理服务和工具</li>\n<li>SQL接口</li>\n<li>查询分析器</li>\n<li>优化器</li>\n<li>缓冲</li>\n<li>存储引擎</li>\n<li>物理文件</li>\n</ul>\n"},{"title":"Mysql-Explain字段含义","comments":1,"date":"2021-03-07T10:39:10.000Z","author":null,"_content":"\n# [mysql explain用法和结果的含义](https://www.cnblogs.com/yycc/p/7338894.html)\n\n### explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\n\n> explain 数据表 或 desc 数据表\n>\n> 显示数据表各字段含义\n\n> explain sql 或desc sql\n>\n> 显示sql执行效率\n\n### explain列解释\n\n1. ==table== 输出的行所引用的表\n\n2. ==select_type== select类型\n\n   > - **SIMPLE**:简单SELECT(不使用UNION或子查询)\n   > - **PRIMARY**:最外面的SELECT\n   > - **UNION**:UNION中的第二个或后面的SELECT语句\n   > - **DEPENDENT UNION**:UNION中的第二个或后面的SELECT语句,取决于外面的查询\n   > - **UNION RESULT**:UNION 的结果\n   > - **SUBQUERY**:子查询中的第一个SELECT\n   > - **DEPENDENT SUBQUERY**:子查询中的第一个SELECT,取决于外面的查询\n   > - **DERIVED**:导出表的SELECT(FROM子句的子查询)\n\n3. ==type== 这是重要的列，显示连接使用了何种类型。\n\n   > 结果值从好到坏依次是：\n   >\n   > system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n   > - **system**:表仅有一行(=系统表)。这是const联接类型的一个特例。\n   > - **const**:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!\n   > - **eq_ref**:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。\n   > - **ref**:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。\n   > - **ref_or_null**:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。\n   > - **index_merge**:该联接类型表示使用了索引合并优化方法。\n   > - **unique_subquery**:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。\n   > - **index_subquery**:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)\n   > - **range**:只检索给定范围的行,使用一个索引来选择行。\n   > - **index**:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。\n   > - **ALL**:对于每个来自于先前的表的行组合,进行完整的表扫描。\n\n3. ==possible_keys== 指出MySQL能使用哪个索引在该表中找到行。\n\n4. ==key== 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。\n\n   > 可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引\n\n5. ==key_len== 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。\n\n6. ==ref== 显示使用哪个列或常数与key一起从表中选择行。\n\n7. ==rows== MYSQL认为必须检查的用来返回请求数据的行数。\n\n8. ==extra== 关于MYSQL如何解析查询的额外信息。\n\n   > 坏的例子是**Using temporary**和**Using filesort**，意思MYSQL根本不能使用索引，结果是检索会很慢。\n   >\n   > - distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。\n   > - not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。\n   > - range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。\n   > - **using filesort**: 看到这个的时候，查询就需要优化了。**MYSQL需要进行额外的步骤来发现如何对返回的行排序**。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。\n   > - using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。\n   > - using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。\n   > -  where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）\n   > -  system 表只有一行：system表。这是const连接类型的特殊情况。\n   > -  const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。\n   > - eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。\n   > - ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。\n   > - range 这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况。\n   > - index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。\n   > - ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。\n\n9. ==filtered== 显示了通过条件过滤出的行数的百分比估计值。","source":"_posts/2021-03-07-Mysql-Explain字段含义.md","raw":"---\ntitle: Mysql-Explain字段含义\ncomments: true\ndate: 2021-03-07 18:39:10\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n# [mysql explain用法和结果的含义](https://www.cnblogs.com/yycc/p/7338894.html)\n\n### explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\n\n> explain 数据表 或 desc 数据表\n>\n> 显示数据表各字段含义\n\n> explain sql 或desc sql\n>\n> 显示sql执行效率\n\n### explain列解释\n\n1. ==table== 输出的行所引用的表\n\n2. ==select_type== select类型\n\n   > - **SIMPLE**:简单SELECT(不使用UNION或子查询)\n   > - **PRIMARY**:最外面的SELECT\n   > - **UNION**:UNION中的第二个或后面的SELECT语句\n   > - **DEPENDENT UNION**:UNION中的第二个或后面的SELECT语句,取决于外面的查询\n   > - **UNION RESULT**:UNION 的结果\n   > - **SUBQUERY**:子查询中的第一个SELECT\n   > - **DEPENDENT SUBQUERY**:子查询中的第一个SELECT,取决于外面的查询\n   > - **DERIVED**:导出表的SELECT(FROM子句的子查询)\n\n3. ==type== 这是重要的列，显示连接使用了何种类型。\n\n   > 结果值从好到坏依次是：\n   >\n   > system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n   > - **system**:表仅有一行(=系统表)。这是const联接类型的一个特例。\n   > - **const**:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!\n   > - **eq_ref**:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。\n   > - **ref**:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。\n   > - **ref_or_null**:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。\n   > - **index_merge**:该联接类型表示使用了索引合并优化方法。\n   > - **unique_subquery**:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。\n   > - **index_subquery**:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)\n   > - **range**:只检索给定范围的行,使用一个索引来选择行。\n   > - **index**:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。\n   > - **ALL**:对于每个来自于先前的表的行组合,进行完整的表扫描。\n\n3. ==possible_keys== 指出MySQL能使用哪个索引在该表中找到行。\n\n4. ==key== 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。\n\n   > 可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引\n\n5. ==key_len== 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。\n\n6. ==ref== 显示使用哪个列或常数与key一起从表中选择行。\n\n7. ==rows== MYSQL认为必须检查的用来返回请求数据的行数。\n\n8. ==extra== 关于MYSQL如何解析查询的额外信息。\n\n   > 坏的例子是**Using temporary**和**Using filesort**，意思MYSQL根本不能使用索引，结果是检索会很慢。\n   >\n   > - distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。\n   > - not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。\n   > - range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。\n   > - **using filesort**: 看到这个的时候，查询就需要优化了。**MYSQL需要进行额外的步骤来发现如何对返回的行排序**。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。\n   > - using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。\n   > - using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。\n   > -  where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）\n   > -  system 表只有一行：system表。这是const连接类型的特殊情况。\n   > -  const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。\n   > - eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。\n   > - ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。\n   > - range 这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况。\n   > - index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。\n   > - ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。\n\n9. ==filtered== 显示了通过条件过滤出的行数的百分比估计值。","slug":"Mysql-Explain字段含义","published":1,"updated":"2021-03-07T10:39:37.861Z","_id":"cklz0wo21002n6rs6cmey25uc","layout":"post","photos":[],"link":"","content":"<h1 id=\"mysql-explain用法和结果的含义\"><a href=\"#mysql-explain用法和结果的含义\" class=\"headerlink\" title=\"mysql explain用法和结果的含义\"></a><a href=\"https://www.cnblogs.com/yycc/p/7338894.html\">mysql explain用法和结果的含义</a></h1><h3 id=\"explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\"><a href=\"#explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\" class=\"headerlink\" title=\"explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\"></a>explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。</h3><blockquote>\n<p>explain 数据表 或 desc 数据表</p>\n<p>显示数据表各字段含义</p>\n</blockquote>\n<blockquote>\n<p>explain sql 或desc sql</p>\n<p>显示sql执行效率</p>\n</blockquote>\n<h3 id=\"explain列解释\"><a href=\"#explain列解释\" class=\"headerlink\" title=\"explain列解释\"></a>explain列解释</h3><ol>\n<li><p>==table== 输出的行所引用的表</p>\n</li>\n<li><p>==select_type== select类型</p>\n<blockquote>\n<ul>\n<li><strong>SIMPLE</strong>:简单SELECT(不使用UNION或子查询)</li>\n<li><strong>PRIMARY</strong>:最外面的SELECT</li>\n<li><strong>UNION</strong>:UNION中的第二个或后面的SELECT语句</li>\n<li><strong>DEPENDENT UNION</strong>:UNION中的第二个或后面的SELECT语句,取决于外面的查询</li>\n<li><strong>UNION RESULT</strong>:UNION 的结果</li>\n<li><strong>SUBQUERY</strong>:子查询中的第一个SELECT</li>\n<li><strong>DEPENDENT SUBQUERY</strong>:子查询中的第一个SELECT,取决于外面的查询</li>\n<li><strong>DERIVED</strong>:导出表的SELECT(FROM子句的子查询)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==type== 这是重要的列，显示连接使用了何种类型。</p>\n<blockquote>\n<p>结果值从好到坏依次是：</p>\n<p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>\n<ul>\n<li><strong>system</strong>:表仅有一行(=系统表)。这是const联接类型的一个特例。</li>\n<li><strong>const</strong>:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</li>\n<li><strong>eq_ref</strong>:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。</li>\n<li><strong>ref</strong>:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。</li>\n<li><strong>ref_or_null</strong>:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</li>\n<li><strong>index_merge</strong>:该联接类型表示使用了索引合并优化方法。</li>\n<li><strong>unique_subquery</strong>:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li>\n<li><strong>index_subquery</strong>:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li>\n<li><strong>range</strong>:只检索给定范围的行,使用一个索引来选择行。</li>\n<li><strong>index</strong>:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li>\n<li><strong>ALL</strong>:对于每个来自于先前的表的行组合,进行完整的表扫描。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==possible_keys== 指出MySQL能使用哪个索引在该表中找到行。</p>\n</li>\n<li><p>==key== 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。</p>\n<blockquote>\n<p>可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p>\n</blockquote>\n</li>\n<li><p>==key_len== 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。</p>\n</li>\n<li><p>==ref== 显示使用哪个列或常数与key一起从表中选择行。</p>\n</li>\n<li><p>==rows== MYSQL认为必须检查的用来返回请求数据的行数。</p>\n</li>\n<li><p>==extra== 关于MYSQL如何解析查询的额外信息。</p>\n<blockquote>\n<p>坏的例子是<strong>Using temporary</strong>和<strong>Using filesort</strong>，意思MYSQL根本不能使用索引，结果是检索会很慢。</p>\n<ul>\n<li>distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。</li>\n<li>not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。</li>\n<li>range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。</li>\n<li><strong>using filesort</strong>: 看到这个的时候，查询就需要优化了。<strong>MYSQL需要进行额外的步骤来发现如何对返回的行排序</strong>。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li>\n<li>using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li>\n<li>using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。</li>\n<li> where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</li>\n<li> system 表只有一行：system表。这是const连接类型的特殊情况。</li>\n<li> const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。</li>\n<li>eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。</li>\n<li>ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。</li>\n<li>range 这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况。</li>\n<li>index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。</li>\n<li>ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==filtered== 显示了通过条件过滤出的行数的百分比估计值。</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"mysql-explain用法和结果的含义\"><a href=\"#mysql-explain用法和结果的含义\" class=\"headerlink\" title=\"mysql explain用法和结果的含义\"></a><a href=\"https://www.cnblogs.com/yycc/p/7338894.html\">mysql explain用法和结果的含义</a></h1><h3 id=\"explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\"><a href=\"#explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\" class=\"headerlink\" title=\"explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\"></a>explain或desc显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。</h3><blockquote>\n<p>explain 数据表 或 desc 数据表</p>\n<p>显示数据表各字段含义</p>\n</blockquote>\n<blockquote>\n<p>explain sql 或desc sql</p>\n<p>显示sql执行效率</p>\n</blockquote>\n<h3 id=\"explain列解释\"><a href=\"#explain列解释\" class=\"headerlink\" title=\"explain列解释\"></a>explain列解释</h3><ol>\n<li><p>==table== 输出的行所引用的表</p>\n</li>\n<li><p>==select_type== select类型</p>\n<blockquote>\n<ul>\n<li><strong>SIMPLE</strong>:简单SELECT(不使用UNION或子查询)</li>\n<li><strong>PRIMARY</strong>:最外面的SELECT</li>\n<li><strong>UNION</strong>:UNION中的第二个或后面的SELECT语句</li>\n<li><strong>DEPENDENT UNION</strong>:UNION中的第二个或后面的SELECT语句,取决于外面的查询</li>\n<li><strong>UNION RESULT</strong>:UNION 的结果</li>\n<li><strong>SUBQUERY</strong>:子查询中的第一个SELECT</li>\n<li><strong>DEPENDENT SUBQUERY</strong>:子查询中的第一个SELECT,取决于外面的查询</li>\n<li><strong>DERIVED</strong>:导出表的SELECT(FROM子句的子查询)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==type== 这是重要的列，显示连接使用了何种类型。</p>\n<blockquote>\n<p>结果值从好到坏依次是：</p>\n<p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>\n<ul>\n<li><strong>system</strong>:表仅有一行(=系统表)。这是const联接类型的一个特例。</li>\n<li><strong>const</strong>:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</li>\n<li><strong>eq_ref</strong>:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。</li>\n<li><strong>ref</strong>:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。</li>\n<li><strong>ref_or_null</strong>:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</li>\n<li><strong>index_merge</strong>:该联接类型表示使用了索引合并优化方法。</li>\n<li><strong>unique_subquery</strong>:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</li>\n<li><strong>index_subquery</strong>:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</li>\n<li><strong>range</strong>:只检索给定范围的行,使用一个索引来选择行。</li>\n<li><strong>index</strong>:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</li>\n<li><strong>ALL</strong>:对于每个来自于先前的表的行组合,进行完整的表扫描。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==possible_keys== 指出MySQL能使用哪个索引在该表中找到行。</p>\n</li>\n<li><p>==key== 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。</p>\n<blockquote>\n<p>可以在SELECT语句中使用USE INDEX（indexname）、force index(indexname) 来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p>\n</blockquote>\n</li>\n<li><p>==key_len== 使用的索引的长度。在不损失精确性的情况下，长度越短越好。如果键是NULL,则长度为NULL。</p>\n</li>\n<li><p>==ref== 显示使用哪个列或常数与key一起从表中选择行。</p>\n</li>\n<li><p>==rows== MYSQL认为必须检查的用来返回请求数据的行数。</p>\n</li>\n<li><p>==extra== 关于MYSQL如何解析查询的额外信息。</p>\n<blockquote>\n<p>坏的例子是<strong>Using temporary</strong>和<strong>Using filesort</strong>，意思MYSQL根本不能使用索引，结果是检索会很慢。</p>\n<ul>\n<li>distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了。</li>\n<li>not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。</li>\n<li>range checked for each Record（index map:#）:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。这是使用索引的最慢的连接之一。</li>\n<li><strong>using filesort</strong>: 看到这个的时候，查询就需要优化了。<strong>MYSQL需要进行额外的步骤来发现如何对返回的行排序</strong>。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li>\n<li>using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</li>\n<li>using temporary 看到这个的时候，查询需要优化了。为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。</li>\n<li> where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</li>\n<li> system 表只有一行：system表。这是const连接类型的特殊情况。</li>\n<li> const 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。</li>\n<li>eq_ref 在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。</li>\n<li>ref 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。</li>\n<li>range 这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况。</li>\n<li>index 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。</li>\n<li>ALL 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>==filtered== 显示了通过条件过滤出的行数的百分比估计值。</p>\n</li>\n</ol>\n"},{"title":"Mysql-碎片整理遇到的那些事","comments":1,"date":"2021-03-07T10:40:36.000Z","author":null,"_content":"\n### 为什么要碎片整理\n\n- MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。\n- 当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。\n- MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。\n\n### 碎片查看及整理\n\n```sql\nselect table_name,engine,table_rows,data_length,index_length,DATA_FREE from information_schema.tables where TABLE_NAME='chat_msgs';\n\n\noptimize table chat_msgs;\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n### information_schema.tables\n\n- show create table information_schema.tables;\n\n```sql\nCREATE TEMPORARY TABLE `TABLES` (\n  `TABLE_CATALOG` varchar(512) NOT NULL DEFAULT '',\n  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',\n  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',\n  `TABLE_TYPE` varchar(64) NOT NULL DEFAULT '',\n  `ENGINE` varchar(64) DEFAULT NULL,\n  `VERSION` bigint(21) unsigned DEFAULT NULL,\n  `ROW_FORMAT` varchar(10) DEFAULT NULL,\n  `TABLE_ROWS` bigint(21) unsigned DEFAULT NULL,\n  `AVG_ROW_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `MAX_DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `INDEX_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `DATA_FREE` bigint(21) unsigned DEFAULT NULL,\n  `AUTO_INCREMENT` bigint(21) unsigned DEFAULT NULL,\n  `CREATE_TIME` datetime DEFAULT NULL,\n  `UPDATE_TIME` datetime DEFAULT NULL,\n  `CHECK_TIME` datetime DEFAULT NULL,\n  `TABLE_COLLATION` varchar(32) DEFAULT NULL,\n  `CHECKSUM` bigint(21) unsigned DEFAULT NULL,\n  `CREATE_OPTIONS` varchar(255) DEFAULT NULL,\n  `TABLE_COMMENT` varchar(2048) NOT NULL DEFAULT ''\n) ENGINE=MEMORY DEFAULT CHARSET=utf8\n```\n\n- desc information_schema.tables; 存储了数据表的元数据信息\n\n| Field             | Type                  | Null | Key  | Default | Extra | 说明 |\n| :---------------- | :-------------------- | :--- | :--- | :------ | :---- | :-- |\n| TABLE\\_CATALOG    | varchar\\(512\\)        | NO   |      |         |       ||\n| TABLE\\_SCHEMA     | varchar\\(64\\)         | NO   |      |         |  |DB名|\n| TABLE\\_NAME       | varchar\\(64\\)         | NO   |      |         |       |表名|\n| TABLE\\_TYPE       | varchar\\(64\\)         | NO   |      |         |       ||\n| ENGINE            | varchar\\(64\\)         | YES  |      | NULL    |       ||\n| VERSION           | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| ROW\\_FORMAT       | varchar\\(10\\)         | YES  |      | NULL    |       |是否压缩|\n| TABLE\\_ROWS       | bigint\\(21\\) unsigned | YES  |      | NULL    |       |表的粗略行统计|\n| AVG\\_ROW\\_LENGTH  | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| DATA\\_LENGTH      | bigint\\(21\\) unsigned | YES  |      | NULL    |       |表的大小（单位字节）|\n| MAX\\_DATA\\_LENGTH | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| INDEX\\_LENGTH     | bigint\\(21\\) unsigned | YES  |      | NULL    |       |索引大小|\n| DATA\\_FREE        | bigint\\(21\\) unsigned | YES  |      | NULL    |       |碎片大小|\n| AUTO\\_INCREMENT   | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| CREATE\\_TIME      | datetime              | YES  |      | NULL    |       ||\n| UPDATE\\_TIME      | datetime              | YES  |      | NULL    |       ||\n| CHECK\\_TIME       | datetime              | YES  |      | NULL    |       ||\n| TABLE\\_COLLATION  | varchar\\(32\\)         | YES  |      | NULL    |       ||\n| CHECKSUM          | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| CREATE\\_OPTIONS   | varchar\\(255\\)        | YES  |      | NULL    |       ||\n| TABLE\\_COMMENT    | varchar\\(2048\\)       | NO   |      |         |       ||\n\n- 查看所有db\n\n```sql\nselect distinct TABLE_SCHEMA from information_schema.tables;\n\nshow databases;\n```\n\n- 查看表大小\n\n```sql\nselect (sum(DATA_LENGTH) + sum(INDEX_LENGTH)) as size from tables where table_schema='mysql' and table_name like 'time_%';\n```\n\n- 查看数据库大小\n\n```sql\nselect (sum(DATA_LENGTH) + sum(INDEX_LENGTH)) as size from tables where table_schema='mysql';\n```\n\n### Notice\n\n- 官方建议碎片整理每周或每月一次即可。\n- optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。\n- optimize table 运行过程中会锁定表。\n- 默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld --skip-new 或者 mysqld --safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。\n- 对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。","source":"_posts/2021-03-07-Mysql-碎片整理遇到的那些事.md","raw":"---\ntitle: Mysql-碎片整理遇到的那些事\ncomments: true\ndate: 2021-03-07 18:40:36\nauthor:\ntags:\n- Mysql\ncategories:\n - 数据库\n---\n\n### 为什么要碎片整理\n\n- MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。\n- 当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。\n- MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。\n\n### 碎片查看及整理\n\n```sql\nselect table_name,engine,table_rows,data_length,index_length,DATA_FREE from information_schema.tables where TABLE_NAME='chat_msgs';\n\n\noptimize table chat_msgs;\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n### information_schema.tables\n\n- show create table information_schema.tables;\n\n```sql\nCREATE TEMPORARY TABLE `TABLES` (\n  `TABLE_CATALOG` varchar(512) NOT NULL DEFAULT '',\n  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',\n  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',\n  `TABLE_TYPE` varchar(64) NOT NULL DEFAULT '',\n  `ENGINE` varchar(64) DEFAULT NULL,\n  `VERSION` bigint(21) unsigned DEFAULT NULL,\n  `ROW_FORMAT` varchar(10) DEFAULT NULL,\n  `TABLE_ROWS` bigint(21) unsigned DEFAULT NULL,\n  `AVG_ROW_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `MAX_DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `INDEX_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `DATA_FREE` bigint(21) unsigned DEFAULT NULL,\n  `AUTO_INCREMENT` bigint(21) unsigned DEFAULT NULL,\n  `CREATE_TIME` datetime DEFAULT NULL,\n  `UPDATE_TIME` datetime DEFAULT NULL,\n  `CHECK_TIME` datetime DEFAULT NULL,\n  `TABLE_COLLATION` varchar(32) DEFAULT NULL,\n  `CHECKSUM` bigint(21) unsigned DEFAULT NULL,\n  `CREATE_OPTIONS` varchar(255) DEFAULT NULL,\n  `TABLE_COMMENT` varchar(2048) NOT NULL DEFAULT ''\n) ENGINE=MEMORY DEFAULT CHARSET=utf8\n```\n\n- desc information_schema.tables; 存储了数据表的元数据信息\n\n| Field             | Type                  | Null | Key  | Default | Extra | 说明 |\n| :---------------- | :-------------------- | :--- | :--- | :------ | :---- | :-- |\n| TABLE\\_CATALOG    | varchar\\(512\\)        | NO   |      |         |       ||\n| TABLE\\_SCHEMA     | varchar\\(64\\)         | NO   |      |         |  |DB名|\n| TABLE\\_NAME       | varchar\\(64\\)         | NO   |      |         |       |表名|\n| TABLE\\_TYPE       | varchar\\(64\\)         | NO   |      |         |       ||\n| ENGINE            | varchar\\(64\\)         | YES  |      | NULL    |       ||\n| VERSION           | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| ROW\\_FORMAT       | varchar\\(10\\)         | YES  |      | NULL    |       |是否压缩|\n| TABLE\\_ROWS       | bigint\\(21\\) unsigned | YES  |      | NULL    |       |表的粗略行统计|\n| AVG\\_ROW\\_LENGTH  | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| DATA\\_LENGTH      | bigint\\(21\\) unsigned | YES  |      | NULL    |       |表的大小（单位字节）|\n| MAX\\_DATA\\_LENGTH | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| INDEX\\_LENGTH     | bigint\\(21\\) unsigned | YES  |      | NULL    |       |索引大小|\n| DATA\\_FREE        | bigint\\(21\\) unsigned | YES  |      | NULL    |       |碎片大小|\n| AUTO\\_INCREMENT   | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| CREATE\\_TIME      | datetime              | YES  |      | NULL    |       ||\n| UPDATE\\_TIME      | datetime              | YES  |      | NULL    |       ||\n| CHECK\\_TIME       | datetime              | YES  |      | NULL    |       ||\n| TABLE\\_COLLATION  | varchar\\(32\\)         | YES  |      | NULL    |       ||\n| CHECKSUM          | bigint\\(21\\) unsigned | YES  |      | NULL    |       ||\n| CREATE\\_OPTIONS   | varchar\\(255\\)        | YES  |      | NULL    |       ||\n| TABLE\\_COMMENT    | varchar\\(2048\\)       | NO   |      |         |       ||\n\n- 查看所有db\n\n```sql\nselect distinct TABLE_SCHEMA from information_schema.tables;\n\nshow databases;\n```\n\n- 查看表大小\n\n```sql\nselect (sum(DATA_LENGTH) + sum(INDEX_LENGTH)) as size from tables where table_schema='mysql' and table_name like 'time_%';\n```\n\n- 查看数据库大小\n\n```sql\nselect (sum(DATA_LENGTH) + sum(INDEX_LENGTH)) as size from tables where table_schema='mysql';\n```\n\n### Notice\n\n- 官方建议碎片整理每周或每月一次即可。\n- optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。\n- optimize table 运行过程中会锁定表。\n- 默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld --skip-new 或者 mysqld --safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。\n- 对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。","slug":"Mysql-碎片整理遇到的那些事","published":1,"updated":"2021-03-07T10:41:03.921Z","_id":"cklz0yhu8002q6rs66xgr5e9z","layout":"post","photos":[],"link":"","content":"<h3 id=\"为什么要碎片整理\"><a href=\"#为什么要碎片整理\" class=\"headerlink\" title=\"为什么要碎片整理\"></a>为什么要碎片整理</h3><ul>\n<li>MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。</li>\n<li>当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。</li>\n<li>MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。</li>\n</ul>\n<h3 id=\"碎片查看及整理\"><a href=\"#碎片查看及整理\" class=\"headerlink\" title=\"碎片查看及整理\"></a>碎片查看及整理</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> table_name<span class=\"token punctuation\">,</span><span class=\"token keyword\">engine</span><span class=\"token punctuation\">,</span>table_rows<span class=\"token punctuation\">,</span>data_length<span class=\"token punctuation\">,</span>index_length<span class=\"token punctuation\">,</span>DATA_FREE <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> TABLE_NAME<span class=\"token operator\">=</span><span class=\"token string\">'chat_msgs'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">optimize</span> <span class=\"token keyword\">table</span> chat_msgs<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"information-schema-tables\"><a href=\"#information-schema-tables\" class=\"headerlink\" title=\"information_schema.tables\"></a>information_schema.tables</h3><ul>\n<li>show create table information_schema.tables;</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TEMPORARY</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>TABLE_CATALOG<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_SCHEMA<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_NAME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_TYPE<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span><span class=\"token keyword\">ENGINE</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>VERSION<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>ROW_FORMAT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_ROWS<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>AVG_ROW_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>DATA_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>MAX_DATA_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>INDEX_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>DATA_FREE<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span><span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CREATE_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>UPDATE_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CHECK_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_COLLATION<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CHECKSUM<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CREATE_OPTIONS<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_COMMENT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span>MEMORY <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>desc information_schema.tables; 存储了数据表的元数据信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Field</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Null</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Default</th>\n<th align=\"left\">Extra</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TABLE_CATALOG</td>\n<td align=\"left\">varchar(512)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_SCHEMA</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">DB名</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_NAME</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">表名</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_TYPE</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ENGINE</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">VERSION</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ROW_FORMAT</td>\n<td align=\"left\">varchar(10)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">是否压缩</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_ROWS</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">表的粗略行统计</td>\n</tr>\n<tr>\n<td align=\"left\">AVG_ROW_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">DATA_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">表的大小（单位字节）</td>\n</tr>\n<tr>\n<td align=\"left\">MAX_DATA_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">INDEX_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">索引大小</td>\n</tr>\n<tr>\n<td align=\"left\">DATA_FREE</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">碎片大小</td>\n</tr>\n<tr>\n<td align=\"left\">AUTO_INCREMENT</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CREATE_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">UPDATE_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CHECK_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_COLLATION</td>\n<td align=\"left\">varchar(32)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CHECKSUM</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CREATE_OPTIONS</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_COMMENT</td>\n<td align=\"left\">varchar(2048)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>查看所有db</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> TABLE_SCHEMA <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>查看表大小</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>DATA_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>INDEX_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> size <span class=\"token keyword\">from</span> <span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'mysql'</span> <span class=\"token operator\">and</span> table_name <span class=\"token operator\">like</span> <span class=\"token string\">'time_%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>查看数据库大小</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>DATA_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>INDEX_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> size <span class=\"token keyword\">from</span> <span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h3><ul>\n<li>官方建议碎片整理每周或每月一次即可。</li>\n<li>optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。</li>\n<li>optimize table 运行过程中会锁定表。</li>\n<li>默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld –skip-new 或者 mysqld –safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。</li>\n<li>对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"为什么要碎片整理\"><a href=\"#为什么要碎片整理\" class=\"headerlink\" title=\"为什么要碎片整理\"></a>为什么要碎片整理</h3><ul>\n<li>MySQL中使用varchar、text、blob等可变长度的文本数据类型之后需要做额外的MySQL数据表碎片整理。</li>\n<li>当MySQL从表中删除一行内容，该段空间就会被留空。如果有大量的删除操作，会使留空空间变得比存储列表内容所使用的空间更大。</li>\n<li>MySQL进行数据扫描时，它扫描的对象实际是列表的容量需求上限，也就是数据被写入的区域中处于峰值位置的部分。如果进行新的插入操作，MySQL将尝试利用这些留空的区域，但仍然无法将其彻底占用。</li>\n</ul>\n<h3 id=\"碎片查看及整理\"><a href=\"#碎片查看及整理\" class=\"headerlink\" title=\"碎片查看及整理\"></a>碎片查看及整理</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> table_name<span class=\"token punctuation\">,</span><span class=\"token keyword\">engine</span><span class=\"token punctuation\">,</span>table_rows<span class=\"token punctuation\">,</span>data_length<span class=\"token punctuation\">,</span>index_length<span class=\"token punctuation\">,</span>DATA_FREE <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> TABLE_NAME<span class=\"token operator\">=</span><span class=\"token string\">'chat_msgs'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">optimize</span> <span class=\"token keyword\">table</span> chat_msgs<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200420224821232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200420224845211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"information-schema-tables\"><a href=\"#information-schema-tables\" class=\"headerlink\" title=\"information_schema.tables\"></a>information_schema.tables</h3><ul>\n<li>show create table information_schema.tables;</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TEMPORARY</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>TABLE_CATALOG<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_SCHEMA<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_NAME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_TYPE<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span><span class=\"token keyword\">ENGINE</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>VERSION<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>ROW_FORMAT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_ROWS<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>AVG_ROW_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>DATA_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>MAX_DATA_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>INDEX_LENGTH<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>DATA_FREE<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span><span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CREATE_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>UPDATE_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CHECK_TIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_COLLATION<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CHECKSUM<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>CREATE_OPTIONS<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>TABLE_COMMENT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span>MEMORY <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>desc information_schema.tables; 存储了数据表的元数据信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Field</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Null</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Default</th>\n<th align=\"left\">Extra</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TABLE_CATALOG</td>\n<td align=\"left\">varchar(512)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_SCHEMA</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">DB名</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_NAME</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">表名</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_TYPE</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ENGINE</td>\n<td align=\"left\">varchar(64)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">VERSION</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ROW_FORMAT</td>\n<td align=\"left\">varchar(10)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">是否压缩</td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_ROWS</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">表的粗略行统计</td>\n</tr>\n<tr>\n<td align=\"left\">AVG_ROW_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">DATA_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">表的大小（单位字节）</td>\n</tr>\n<tr>\n<td align=\"left\">MAX_DATA_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">INDEX_LENGTH</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">索引大小</td>\n</tr>\n<tr>\n<td align=\"left\">DATA_FREE</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\">碎片大小</td>\n</tr>\n<tr>\n<td align=\"left\">AUTO_INCREMENT</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CREATE_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">UPDATE_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CHECK_TIME</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_COLLATION</td>\n<td align=\"left\">varchar(32)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CHECKSUM</td>\n<td align=\"left\">bigint(21) unsigned</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">CREATE_OPTIONS</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">TABLE_COMMENT</td>\n<td align=\"left\">varchar(2048)</td>\n<td align=\"left\">NO</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>查看所有db</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> TABLE_SCHEMA <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>查看表大小</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>DATA_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>INDEX_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> size <span class=\"token keyword\">from</span> <span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'mysql'</span> <span class=\"token operator\">and</span> table_name <span class=\"token operator\">like</span> <span class=\"token string\">'time_%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>查看数据库大小</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>DATA_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>INDEX_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> size <span class=\"token keyword\">from</span> <span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h3><ul>\n<li>官方建议碎片整理每周或每月一次即可。</li>\n<li>optimize table 只对MyISAM、BDB、InnoDB表起作用，尤其MyISAM最为明显。并不是所有表都需要碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。</li>\n<li>optimize table 运行过程中会锁定表。</li>\n<li>默认情况下，直接对InnoDB引擎的数据表使用optimize table可能会显示[Table dose not support optimize,doing recreate + analyze instead] 的提示信息。这时候可以用mysqld –skip-new 或者 mysqld –safe-mode 命令来重启MySQL，以便让其他引擎支持optimize table。</li>\n<li>对于mysql和Infobright等数据库，information_schema数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</li>\n</ul>\n"},{"title":"算法导论—一个数组中实现两个栈","comments":1,"date":"2021-03-07T10:22:20.000Z","author":null,"_content":"\n### 如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\n- 要求push和pop操作的运行时间为O(1)。\n\n##### 实现：\n\n- 两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。\n```go\npackage main\n\nimport \"fmt\"\n\nconst maxSize = 10\nconst (\n\tsLeft stackType = iota\n\tsRight\n)\n\ntype stackType int\n\ntype Stack struct {\n\tarr   [maxSize]int\n\tleft  int\n\tright int\n}\n\nvar stack = Stack{\n\tarr:   [maxSize]int{},\n\tleft:  -1,\n\tright: maxSize,\n}\n\nfunc (s *Stack) Push(val int, stackType stackType) bool {\n\tif s.IsFull() {\n\t\treturn false\n\t}\n\tif stackType == sLeft {\n\t\ts.arr[s.left+1] = val\n\t\ts.left++\n\t} else {\n\t\ts.arr[s.right-1] = val\n\t\ts.right--\n\t}\n\treturn true\n}\n\nfunc (s *Stack) Pop(stackType stackType) (val int, exist bool) {\n\tif stackType == sLeft {\n\t\tif s.left > -1 {\n\t\t\tval = s.arr[s.left]\n\t\t\texist = true\n\t\t\ts.left--\n\t\t}\n\t} else {\n\t\tif s.right < maxSize {\n\t\t\tval = s.arr[s.right]\n\t\t\texist = true\n\t\t\ts.right++\n\t\t}\n\t}\n\treturn\n}\n\n// 两栈都为空\nfunc (s *Stack) IsEmpty() bool {\n\tif s.right == maxSize && s.left == -1 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) IsFull() bool {\n\tif s.right-s.left == 1 {\n\t\treturn true\n\t}\n\treturn false\n}\n```\n\n","source":"_posts/2021-03-07-算法导论-一个数组中实现两个栈.md","raw":"---\ntitle: 算法导论—一个数组中实现两个栈\ncomments: true\ndate: 2021-03-07 18:22:20\nauthor:\ntags:\n - Golang\n - 算法导论\ncategories:\n - 算法\n---\n\n### 如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\n- 要求push和pop操作的运行时间为O(1)。\n\n##### 实现：\n\n- 两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。\n```go\npackage main\n\nimport \"fmt\"\n\nconst maxSize = 10\nconst (\n\tsLeft stackType = iota\n\tsRight\n)\n\ntype stackType int\n\ntype Stack struct {\n\tarr   [maxSize]int\n\tleft  int\n\tright int\n}\n\nvar stack = Stack{\n\tarr:   [maxSize]int{},\n\tleft:  -1,\n\tright: maxSize,\n}\n\nfunc (s *Stack) Push(val int, stackType stackType) bool {\n\tif s.IsFull() {\n\t\treturn false\n\t}\n\tif stackType == sLeft {\n\t\ts.arr[s.left+1] = val\n\t\ts.left++\n\t} else {\n\t\ts.arr[s.right-1] = val\n\t\ts.right--\n\t}\n\treturn true\n}\n\nfunc (s *Stack) Pop(stackType stackType) (val int, exist bool) {\n\tif stackType == sLeft {\n\t\tif s.left > -1 {\n\t\t\tval = s.arr[s.left]\n\t\t\texist = true\n\t\t\ts.left--\n\t\t}\n\t} else {\n\t\tif s.right < maxSize {\n\t\t\tval = s.arr[s.right]\n\t\t\texist = true\n\t\t\ts.right++\n\t\t}\n\t}\n\treturn\n}\n\n// 两栈都为空\nfunc (s *Stack) IsEmpty() bool {\n\tif s.right == maxSize && s.left == -1 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) IsFull() bool {\n\tif s.right-s.left == 1 {\n\t\treturn true\n\t}\n\treturn false\n}\n```\n\n","slug":"算法导论-一个数组中实现两个栈","published":1,"updated":"2021-03-07T10:44:08.197Z","_id":"cklz11jix002t6rs6dnbt62yf","layout":"post","photos":[],"link":"","content":"<h3 id=\"如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\"><a href=\"#如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\" class=\"headerlink\" title=\"如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\"></a>如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。</h3><ul>\n<li>要求push和pop操作的运行时间为O(1)。</li>\n</ul>\n<h5 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h5><ul>\n<li>两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tsLeft stackType <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\tsRight\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> stackType <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">type</span> Stack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr   <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tleft  <span class=\"token builtin\">int</span>\n\tright <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">&#123;</span>\n\tarr<span class=\"token punctuation\">:</span>   <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\tleft<span class=\"token punctuation\">:</span>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tright<span class=\"token punctuation\">:</span> maxSize<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> stackType stackType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">IsFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> stackType <span class=\"token operator\">==</span> sLeft <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\t\ts<span class=\"token punctuation\">.</span>left<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\t\ts<span class=\"token punctuation\">.</span>right<span class=\"token operator\">--</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>stackType stackType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> exist <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> stackType <span class=\"token operator\">==</span> sLeft <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tval <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span>\n\t\t\texist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\ts<span class=\"token punctuation\">.</span>left<span class=\"token operator\">--</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&lt;</span> maxSize <span class=\"token punctuation\">&#123;</span>\n\t\t\tval <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span>\n\t\t\texist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\ts<span class=\"token punctuation\">.</span>right<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 两栈都为空</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> maxSize <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">IsFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\"><a href=\"#如何在一个数组A-1-n-中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\" class=\"headerlink\" title=\"如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。\"></a>如何在一个数组A[1..n]中实现两个栈，使得当两个栈的元素个数之和不为n时，两者都不会发生上溢。</h3><ul>\n<li>要求push和pop操作的运行时间为O(1)。</li>\n</ul>\n<h5 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h5><ul>\n<li>两个栈分别从数组的两端开始，向中间push元素，直到两个指针相遇。<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tsLeft stackType <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\tsRight\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> stackType <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">type</span> Stack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr   <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tleft  <span class=\"token builtin\">int</span>\n\tright <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">&#123;</span>\n\tarr<span class=\"token punctuation\">:</span>   <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\tleft<span class=\"token punctuation\">:</span>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tright<span class=\"token punctuation\">:</span> maxSize<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> stackType stackType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">IsFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> stackType <span class=\"token operator\">==</span> sLeft <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\t\ts<span class=\"token punctuation\">.</span>left<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\t\ts<span class=\"token punctuation\">.</span>right<span class=\"token operator\">--</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>stackType stackType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> exist <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> stackType <span class=\"token operator\">==</span> sLeft <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tval <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span>\n\t\t\texist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\ts<span class=\"token punctuation\">.</span>left<span class=\"token operator\">--</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&lt;</span> maxSize <span class=\"token punctuation\">&#123;</span>\n\t\t\tval <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span>\n\t\t\texist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\ts<span class=\"token punctuation\">.</span>right<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 两栈都为空</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> maxSize <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">IsFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>right<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"算法导论-两个栈实现队列","comments":1,"date":"2021-03-07T10:17:47.000Z","author":null,"_content":"\n### 用两个栈实现队列，并分析相关队列操作的运行时间。\n- 单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。\n- 最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。\n- 最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。\n```go\npackage main\n\nconst maxSize = 10\n\ntype StackDeque struct {\n\tpushStack *Stack\n\tpopStack  *Stack\n\tflag      bool // true in push，false in pop\n}\n\nfunc (s *StackDeque) exchange(from, to *Stack) {\n\tto.Clean()\n\tfor true {\n\t\tif v, ok := from.Pop(); ok {\n\t\t\tto.Push(v)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.flag = !s.flag\n}\n\nfunc (s *StackDeque) Push(val int) bool {\n\tif !s.flag { // 当前在pop栈\n\t\ts.exchange(s.popStack, s.pushStack)\n\t}\n\treturn s.pushStack.Push(val)\n}\n\nfunc (s *StackDeque) Pop() (int, bool) {\n\tif s.flag {\n\t\ts.exchange(s.pushStack, s.popStack)\n\t}\n\treturn s.popStack.Pop()\n}\n\n// ----------------实现栈开始----------------\ntype Stack struct {\n\tarr  [maxSize]int\n\tsize int\n}\n\nfunc (s *Stack) isFull() bool {\n\tif s.size == maxSize {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) isEmpty() bool {\n\tif s.size == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) Push(val int) bool {\n\tif s.isFull() {\n\t\treturn false\n\t}\n\ts.arr[s.size] = val\n\ts.size++\n\treturn true\n}\n\nfunc (s *Stack) Pop() (int, bool) {\n\tif s.isEmpty() {\n\t\treturn 0, false\n\t}\n\tval := s.arr[s.size-1]\n\ts.size--\n\treturn val, true\n}\n\nfunc (s *Stack) Clean() {\n\ts.size = 0\n}\n\n// ----------------实现栈结束----------------\n```\n","source":"_posts/2021-03-07-算法导论-两个栈实现队列.md","raw":"---\ntitle: 算法导论-两个栈实现队列\ncomments: true\ndate: 2021-03-07 18:17:47\nauthor:\ntags:\n - Golang\n - 算法导论\ncategories:\n - 算法\n---\n\n### 用两个栈实现队列，并分析相关队列操作的运行时间。\n- 单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。\n- 最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。\n- 最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。\n```go\npackage main\n\nconst maxSize = 10\n\ntype StackDeque struct {\n\tpushStack *Stack\n\tpopStack  *Stack\n\tflag      bool // true in push，false in pop\n}\n\nfunc (s *StackDeque) exchange(from, to *Stack) {\n\tto.Clean()\n\tfor true {\n\t\tif v, ok := from.Pop(); ok {\n\t\t\tto.Push(v)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.flag = !s.flag\n}\n\nfunc (s *StackDeque) Push(val int) bool {\n\tif !s.flag { // 当前在pop栈\n\t\ts.exchange(s.popStack, s.pushStack)\n\t}\n\treturn s.pushStack.Push(val)\n}\n\nfunc (s *StackDeque) Pop() (int, bool) {\n\tif s.flag {\n\t\ts.exchange(s.pushStack, s.popStack)\n\t}\n\treturn s.popStack.Pop()\n}\n\n// ----------------实现栈开始----------------\ntype Stack struct {\n\tarr  [maxSize]int\n\tsize int\n}\n\nfunc (s *Stack) isFull() bool {\n\tif s.size == maxSize {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) isEmpty() bool {\n\tif s.size == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (s *Stack) Push(val int) bool {\n\tif s.isFull() {\n\t\treturn false\n\t}\n\ts.arr[s.size] = val\n\ts.size++\n\treturn true\n}\n\nfunc (s *Stack) Pop() (int, bool) {\n\tif s.isEmpty() {\n\t\treturn 0, false\n\t}\n\tval := s.arr[s.size-1]\n\ts.size--\n\treturn val, true\n}\n\nfunc (s *Stack) Clean() {\n\ts.size = 0\n}\n\n// ----------------实现栈结束----------------\n```\n","slug":"算法导论-两个栈实现队列","published":1,"updated":"2021-03-07T10:44:05.209Z","_id":"cklz11taa002x6rs607u566h8","layout":"post","photos":[],"link":"","content":"<h3 id=\"用两个栈实现队列，并分析相关队列操作的运行时间。\"><a href=\"#用两个栈实现队列，并分析相关队列操作的运行时间。\" class=\"headerlink\" title=\"用两个栈实现队列，并分析相关队列操作的运行时间。\"></a>用两个栈实现队列，并分析相关队列操作的运行时间。</h3><ul>\n<li>单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。</li>\n<li>最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。</li>\n<li>最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">type</span> StackDeque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpushStack <span class=\"token operator\">*</span>Stack\n\tpopStack  <span class=\"token operator\">*</span>Stack\n\tflag      <span class=\"token builtin\">bool</span> <span class=\"token comment\">// true in push，false in pop</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>flag\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>flag <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前在pop栈</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>flag <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ----------------实现栈开始----------------</span>\n<span class=\"token keyword\">type</span> Stack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr  <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tsize <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> maxSize <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\ts<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ts<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ts<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ----------------实现栈结束----------------</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"用两个栈实现队列，并分析相关队列操作的运行时间。\"><a href=\"#用两个栈实现队列，并分析相关队列操作的运行时间。\" class=\"headerlink\" title=\"用两个栈实现队列，并分析相关队列操作的运行时间。\"></a>用两个栈实现队列，并分析相关队列操作的运行时间。</h3><ul>\n<li>单栈push和pop的运行时间都为O(1)，所以需要考虑的就是两个栈之间切换所用时间。</li>\n<li>最坏情况：在push和pop交替操作时，需要将一个栈中的数据转移到另一个栈中，转移所用时间为O(n)，n为当前栈中元素个数。</li>\n<li>最好情况：用flag记录上一次是push还是pop，如果和当前操作一致，则直接操作对应的栈，时间复杂度为O(1)。<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">type</span> StackDeque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpushStack <span class=\"token operator\">*</span>Stack\n\tpopStack  <span class=\"token operator\">*</span>Stack\n\tflag      <span class=\"token builtin\">bool</span> <span class=\"token comment\">// true in push，false in pop</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>flag\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>flag <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前在pop栈</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>StackDeque<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>flag <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>pushStack<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>popStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ----------------实现栈开始----------------</span>\n<span class=\"token keyword\">type</span> Stack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr  <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tsize <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> maxSize <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ts<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\ts<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ts<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ts<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ----------------实现栈结束----------------</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"算法导论-两个队列实现栈","comments":1,"date":"2021-03-07T10:14:53.000Z","author":null,"_content":"\n### 用两个队列实现栈，并分析相关栈操作的运行时间。\n思路同：[两个栈实现队列](https://liyuxing.blog.csdn.net/article/details/111464812)\n```go\ntype DequeStack struct {\n\tpushDeque *Deque\n\tpopDeque *Deque\n\tflag bool // true in push, false in pop\n}\n\nfunc (d *DequeStack) exchange(from, to *Deque) {\n\tto.Clean()\n\tfor true {\n\t\tif v, ok := from.Pop(); ok {\n\t\t\tto.Push(v)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\td.flag=!d.flag\n}\n\nfunc (d *DequeStack) Push(val int) bool {\n\tif !d.flag{\n\t\td.exchange(d.popDeque, d.pushDeque)\n\t}\n\treturn d.pushDeque.Push(val)\n}\n\nfunc (d *DequeStack) Pop() (int, bool){\n\tif d.flag{\n\t\td.exchange(d.pushDeque, d.popDeque)\n\t}\n\treturn d.popDeque.Pop()\n}\n\n// 队列实现\ntype Deque struct {\n\tarr  [maxSize]int\n\thead int\n\ttail int\n\tsize int\n}\n\nfunc (d *Deque) next(position int) int {\n\tif position == len(d.arr)-1 {\n\t\treturn 0\n\t}\n\treturn position + 1\n}\n\nfunc (d *Deque) isFull() bool {\n\treturn d.size == len(d.arr)\n}\n\nfunc (d *Deque) isEmpty() bool {\n\treturn d.size == 0\n}\n\nfunc (d *Deque) Push(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\td.arr[d.tail] = val\n\td.tail = d.next(d.tail)\n\td.size++\n\treturn true\n}\n\nfunc (d *Deque) Pop() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\tval := d.arr[d.head]\n\td.head = d.next(d.head)\n\td.size--\n\treturn val, true\n}\n\nfunc (d *Deque) Clean() {\n\td.head = 0\n\td.tail = 0\n\td.size = 0\n}\n```\n","source":"_posts/2021-03-07-算法导论-两个队列实现栈.md","raw":"---\ntitle: 算法导论-两个队列实现栈\ncomments: true\ndate: 2021-03-07 18:14:53\nauthor:\ntags:\n - Golang\n - 算法导论\ncategories:\n - 算法\n---\n\n### 用两个队列实现栈，并分析相关栈操作的运行时间。\n思路同：[两个栈实现队列](https://liyuxing.blog.csdn.net/article/details/111464812)\n```go\ntype DequeStack struct {\n\tpushDeque *Deque\n\tpopDeque *Deque\n\tflag bool // true in push, false in pop\n}\n\nfunc (d *DequeStack) exchange(from, to *Deque) {\n\tto.Clean()\n\tfor true {\n\t\tif v, ok := from.Pop(); ok {\n\t\t\tto.Push(v)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\td.flag=!d.flag\n}\n\nfunc (d *DequeStack) Push(val int) bool {\n\tif !d.flag{\n\t\td.exchange(d.popDeque, d.pushDeque)\n\t}\n\treturn d.pushDeque.Push(val)\n}\n\nfunc (d *DequeStack) Pop() (int, bool){\n\tif d.flag{\n\t\td.exchange(d.pushDeque, d.popDeque)\n\t}\n\treturn d.popDeque.Pop()\n}\n\n// 队列实现\ntype Deque struct {\n\tarr  [maxSize]int\n\thead int\n\ttail int\n\tsize int\n}\n\nfunc (d *Deque) next(position int) int {\n\tif position == len(d.arr)-1 {\n\t\treturn 0\n\t}\n\treturn position + 1\n}\n\nfunc (d *Deque) isFull() bool {\n\treturn d.size == len(d.arr)\n}\n\nfunc (d *Deque) isEmpty() bool {\n\treturn d.size == 0\n}\n\nfunc (d *Deque) Push(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\td.arr[d.tail] = val\n\td.tail = d.next(d.tail)\n\td.size++\n\treturn true\n}\n\nfunc (d *Deque) Pop() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\tval := d.arr[d.head]\n\td.head = d.next(d.head)\n\td.size--\n\treturn val, true\n}\n\nfunc (d *Deque) Clean() {\n\td.head = 0\n\td.tail = 0\n\td.size = 0\n}\n```\n","slug":"算法导论-两个队列实现栈","published":1,"updated":"2021-03-07T10:44:03.828Z","_id":"cklz12ptu00316rs64eoqh6bs","layout":"post","photos":[],"link":"","content":"<h3 id=\"用两个队列实现栈，并分析相关栈操作的运行时间。\"><a href=\"#用两个队列实现栈，并分析相关栈操作的运行时间。\" class=\"headerlink\" title=\"用两个队列实现栈，并分析相关栈操作的运行时间。\"></a>用两个队列实现栈，并分析相关栈操作的运行时间。</h3><p>思路同：<a href=\"https://liyuxing.blog.csdn.net/article/details/111464812\">两个栈实现队列</a></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> DequeStack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpushDeque <span class=\"token operator\">*</span>Deque\n\tpopDeque <span class=\"token operator\">*</span>Deque\n\tflag <span class=\"token builtin\">bool</span> <span class=\"token comment\">// true in push, false in pop</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>flag<span class=\"token operator\">=</span><span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span>flag\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 队列实现</span>\n<span class=\"token keyword\">type</span> Deque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr  <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\thead <span class=\"token builtin\">int</span>\n\ttail <span class=\"token builtin\">int</span>\n\tsize <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\td<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\td<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"用两个队列实现栈，并分析相关栈操作的运行时间。\"><a href=\"#用两个队列实现栈，并分析相关栈操作的运行时间。\" class=\"headerlink\" title=\"用两个队列实现栈，并分析相关栈操作的运行时间。\"></a>用两个队列实现栈，并分析相关栈操作的运行时间。</h3><p>思路同：<a href=\"https://liyuxing.blog.csdn.net/article/details/111464812\">两个栈实现队列</a></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> DequeStack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tpushDeque <span class=\"token operator\">*</span>Deque\n\tpopDeque <span class=\"token operator\">*</span>Deque\n\tflag <span class=\"token builtin\">bool</span> <span class=\"token comment\">// true in push, false in pop</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> from<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t\tto<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>flag<span class=\"token operator\">=</span><span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span>flag\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>DequeStack<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>pushDeque<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>popDeque<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 队列实现</span>\n<span class=\"token keyword\">type</span> Deque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tarr  <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\thead <span class=\"token builtin\">int</span>\n\ttail <span class=\"token builtin\">int</span>\n\tsize <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">Clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\td<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\td<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\td<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"算法导论-单数组实现双端队列","comments":1,"date":"2021-03-07T10:21:22.000Z","author":null,"_content":"### 栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\n\n```go\npackage main\n\n// 一个数组实现双端队列\nconst maxSize = 10\n\ntype Deque struct {\n\tleftHead  int\n\trightHead int\n\tsize      int // 记录现有元素数量\n\tarr       [maxSize]int\n}\n\nfunc (d *Deque) isEmpty() bool {\n\treturn d.size == 0\n}\n\nfunc (d *Deque) isFull() bool {\n\tif d.size == len(d.arr) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (d *Deque) pre(position int) int {\n\tif position == 0 {\n\t\treturn len(d.arr) - 1\n\t}\n\treturn position - 1\n}\n\nfunc (d *Deque) next(position int) int {\n\tif position == len(d.arr)-1 {\n\t\treturn 0\n\t}\n\treturn position + 1\n}\n\nfunc (d *Deque) LeftInsert(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\tif d.isEmpty() {\n\t\td.rightHead = d.next(d.rightHead)\n\t}\n\td.arr[d.leftHead] = val\n\td.size++\n\td.leftHead = d.pre(d.leftHead)\n\treturn true\n}\n\nfunc (d *Deque) RightInsert(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\tif d.isEmpty() {\n\t\td.leftHead = d.pre(d.leftHead)\n\t}\n\td.arr[d.rightHead] = val\n\td.size++\n\td.rightHead = d.next(d.rightHead)\n\treturn true\n}\n\nfunc (d *Deque) LeftDelete() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\td.leftHead = d.next(d.leftHead)\n\tif d.isEmpty() {\n\t\td.rightHead = d.pre(d.rightHead)\n\t}\n\tval := d.arr[d.leftHead]\n\td.size--\n\treturn val, true\n}\n\nfunc (d *Deque) RightDelete() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\td.rightHead = d.pre(d.rightHead)\n\tif d.isEmpty() {\n\t\td.leftHead = d.next(d.leftHead)\n\t}\n\tval := d.arr[d.rightHead]\n\td.size--\n\treturn val, true\n}\n\nvar deque = Deque{\n\tleftHead:  0,\n\trightHead: 0,\n\tarr:       [maxSize]int{},\n}\n```\n","source":"_posts/2021-03-07-算法导论-单数组实现双端队列.md","raw":"---\ntitle: 算法导论-单数组实现双端队列\ncomments: true\ndate: 2021-03-07 18:21:22\nauthor:\ntags:\n - Golang\n - 算法导论\ncategories:\n - 算法\n---\n### 栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\n\n```go\npackage main\n\n// 一个数组实现双端队列\nconst maxSize = 10\n\ntype Deque struct {\n\tleftHead  int\n\trightHead int\n\tsize      int // 记录现有元素数量\n\tarr       [maxSize]int\n}\n\nfunc (d *Deque) isEmpty() bool {\n\treturn d.size == 0\n}\n\nfunc (d *Deque) isFull() bool {\n\tif d.size == len(d.arr) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (d *Deque) pre(position int) int {\n\tif position == 0 {\n\t\treturn len(d.arr) - 1\n\t}\n\treturn position - 1\n}\n\nfunc (d *Deque) next(position int) int {\n\tif position == len(d.arr)-1 {\n\t\treturn 0\n\t}\n\treturn position + 1\n}\n\nfunc (d *Deque) LeftInsert(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\tif d.isEmpty() {\n\t\td.rightHead = d.next(d.rightHead)\n\t}\n\td.arr[d.leftHead] = val\n\td.size++\n\td.leftHead = d.pre(d.leftHead)\n\treturn true\n}\n\nfunc (d *Deque) RightInsert(val int) bool {\n\tif d.isFull() {\n\t\treturn false\n\t}\n\tif d.isEmpty() {\n\t\td.leftHead = d.pre(d.leftHead)\n\t}\n\td.arr[d.rightHead] = val\n\td.size++\n\td.rightHead = d.next(d.rightHead)\n\treturn true\n}\n\nfunc (d *Deque) LeftDelete() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\td.leftHead = d.next(d.leftHead)\n\tif d.isEmpty() {\n\t\td.rightHead = d.pre(d.rightHead)\n\t}\n\tval := d.arr[d.leftHead]\n\td.size--\n\treturn val, true\n}\n\nfunc (d *Deque) RightDelete() (int, bool) {\n\tif d.isEmpty() {\n\t\treturn 0, false\n\t}\n\td.rightHead = d.pre(d.rightHead)\n\tif d.isEmpty() {\n\t\td.leftHead = d.next(d.leftHead)\n\t}\n\tval := d.arr[d.rightHead]\n\td.size--\n\treturn val, true\n}\n\nvar deque = Deque{\n\tleftHead:  0,\n\trightHead: 0,\n\tarr:       [maxSize]int{},\n}\n```\n","slug":"算法导论-单数组实现双端队列","published":1,"updated":"2021-03-07T10:44:06.698Z","_id":"cklz12u5t00356rs64tji9bam","layout":"post","photos":[],"link":"","content":"<h3 id=\"栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\"><a href=\"#栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\" class=\"headerlink\" title=\"栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\"></a>栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token comment\">// 一个数组实现双端队列</span>\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">type</span> Deque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tleftHead  <span class=\"token builtin\">int</span>\n\trightHead <span class=\"token builtin\">int</span>\n\tsize      <span class=\"token builtin\">int</span> <span class=\"token comment\">// 记录现有元素数量</span>\n\tarr       <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">LeftInsert</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">RightInsert</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">LeftDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">RightDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> deque <span class=\"token operator\">=</span> Deque<span class=\"token punctuation\">&#123;</span>\n\tleftHead<span class=\"token punctuation\">:</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\trightHead<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tarr<span class=\"token punctuation\">:</span>       <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\"><a href=\"#栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列-deque-，其插入和删除操作都可以在两端进行。写出4个时间均为O-1-的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\" class=\"headerlink\" title=\"栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。\"></a>栈插入和删除元素只能在同一端进行，队列的插入操作和删除操作分别在两端进行，与它们不同的，有一种双端队列(deque)，其插入和删除操作都可以在两端进行。写出4个时间均为O(1)的过程，分别实现在双端队列插入和删除元素的操作，该队列使用一个数组实现的。</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token comment\">// 一个数组实现双端队列</span>\n<span class=\"token keyword\">const</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">type</span> Deque <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tleftHead  <span class=\"token builtin\">int</span>\n\trightHead <span class=\"token builtin\">int</span>\n\tsize      <span class=\"token builtin\">int</span> <span class=\"token comment\">// 记录现有元素数量</span>\n\tarr       <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>position <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> position <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">LeftInsert</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">RightInsert</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span>\n\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">LeftDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Deque<span class=\"token punctuation\">)</span> <span class=\"token function\">RightDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\td<span class=\"token punctuation\">.</span>rightHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\td<span class=\"token punctuation\">.</span>leftHead <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>leftHead<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tval <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>rightHead<span class=\"token punctuation\">]</span>\n\td<span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> deque <span class=\"token operator\">=</span> Deque<span class=\"token punctuation\">&#123;</span>\n\tleftHead<span class=\"token punctuation\">:</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\trightHead<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tarr<span class=\"token punctuation\">:</span>       <span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Mysql-面试100问","comments":1,"date":"2021-03-07T10:45:37.000Z","author":null,"_content":"\n##### 面试官：“了解MySQL吗？”\n要是说不了解，接下来该聊些啥呀？\n##### 面试官：“了解的话，那说说XXX吧。”\n巴拉巴拉...\n\n\n### MySQL有哪些常见的引擎，说说他们的区别？\n\n```mysql\nshow engines; #查看支持的引擎\n```\n\n- MyISAM：非事务处理存储引擎\n\n  索引放在XX.MYI文件中，数据放在XX.MYD文件中。\n\n- InnoDB：具备外键功能的存储引擎\n\n  索引也是数据。数据和索引存在一个XX.IDB文件中。\n\n- Mermory：基于内存\n\n  Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。\n\n- Archive：数据存档，数据插入后不能修改\n\n  针对高写入压缩做了优化的简单引擎。\n\n\t| 特点     | InnoDB | MyISAM | Memory       | Archive |\n\t| -------- | ------ | ------ | ------------ | ------- |\n\t| b+树索引 | yes    | yes    | yes          | no      |\n\t| MVCC     | yes    | no     | no           | no      |\n\t| 事务     | yes    | no     | no           | no      |\n\t| 存储限制 | 64TB   | 256TB  | RAM          | None    |\n\t| 索引缓存 | yes    | yes    | 本身就是缓存 | No      |\n\t| 外键     | yes    | no     | no           | no      |\n\t| 锁粒度   | row    | table  | table        | row     |\n\t| 全文索引 | yes    | yes    | no           | no      |\n\t| 数据缓存 | yes    | no     | 本身就是缓存 | no      |\n\n### 有哪些索引和他们之间的区别？\n\n- ##### Hash索引\n\n  优点：\n\n  1. Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。\n\n  缺点：\n\n  1. Hash索引只能满足\"=\"，\"IN\"，\"!=\"，不能使用范围查询。\n  2. Hash值的大小关系不一定个原键值一样，不能做排序操作。\n  3. 联合索引中不能利用部分索引键查询。\n  4. 遇到大量Hash值相等的情况后，性能不一定比B树高。\n  5. 存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。\n\n  InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个==完全自动的、内部的行为==，用户无法控制或配置（如果有必要，可以关闭该功能）。\n\n- ##### B+树索引\n\n  优点：\n\n  1. 所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。\n\n  2. 利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。\n\n  3. **B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。**\n\n     假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则\n\n     h=1，最多能放100条记录。\n\n     h=2，最多能放1000\\*100=100000条记录。\n\n     h=3，最多能放1000\\*1000\\*100=100000000（一亿）条记录。\n\n     h=4，最多能放1000\\*1000\\*1000\\*100=100000000000（一千亿）条记录，应该不会有这种数据量的表吧！\n\n     那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是==二分查找==。\n\n- ##### 全文索引\n\n  1. 5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。\n  2. 底层实现为倒排索引。\n------\n\n\n- ##### 聚集索引（聚簇索引）\n\n  1. 表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。\n\n  2. 聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。\n\n  3. 一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。**聚簇集**指的是数据行和相关的键值都保存在一起。\n\n  4. 如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。\n\n  5. 聚簇索引不是人为创建的，默认就有。\n\n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n- #### 非聚集索引（二级索引）\n\n  1. 表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。\n\n  2. 适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。\n  \n  3. 为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：\n  \n     > 索引列的值\n     >\n     > 主键值\n     >\n     > 页号（页指针）\n  \n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n  \n  ------\n  \n- 主键索引\n\n  1. 每张表都会有主键，也会用主键生成主键索引。\n  2. 主键索引就是聚簇索引，因此建表时最好用自增类型主键。\n  3. 如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键==row_id==（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找**主键->唯一键->隐藏主键**建立索引。\n\n  ```mysql\n  alter table table_name add primary key (column name);\n  ```\n\n- 普通索引，联合索引\n\n  ```mysql\n  create index 索引名 on table_name(column1,column2);\n  alter table table_name add index 索引名(column1,column2);\n  ```\n\n- 唯一索引\n\n  1. 唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。\n  2. 相比主键索引，主键字段不能为null，也不能重复。\n\n  ```mysql\n  create unique index index_name on table_name (column_list);\n  ```\n\n  \n\n### 为什么要使用索引？\n\n1. 减少存储引擎需要扫描的数据量，加快查询速度。\n2. 索引可以把随机I/O变为顺序I/O。\n3. 对索引结果进行排序以避免使用磁盘临时表。\n\n### 建索引、使用索引要注意什么？\n\n1. 数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。\n2. 数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。\n3. 尽量避免NULL。\n4. 复合索引将最常用作限制条件的列放在最左边，依次递减。\n5. 复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。\n6. 短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。\n7. mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。\n8. 建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。\n9. 建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。\n10. 使用NOT IN和!=操作，mysql将无法使用索引。\n11. 不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。\n\n### B+树有什么特点？为什么B+树更适合做索引？\n\n回答这个问题，心里一定要有点B树🐶。\n\n1. 二叉查找树：\n\n   - 左子树不为空，则左子树节点值均小于根节点。\n\n   - 右子树不为空，则右子树节点值均大于根节点。\n\n   - 任意节点的左右子树也是二叉查找树。\n\n   - 没有键值相同的节点。\n\n   - 有可能会退化成一条线性链。\n\n2. AVL树：\n\n   - AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。\n\n   - 左右子树高度差不超过1。\n\n   - 与红黑树相比，它是严格的平衡二叉树。\n\n   - AVL树适合于插入删除比较少，但查找多的情况。\n\n3. 红黑树：\n\n   - 一种二叉查找树，每个节点增加一个存储位标识颜色。\n   - 通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。\n   - 是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。\n\n4. B树（b-树）\n\n   - 为了磁盘或其它存储设备而设计的一种平衡多路查找树。\n   - 与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。\n   - B/B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I/O所花时间越少。\n   - 所有叶子节点位于同一层。\n\n5. B+树\n\n   - B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。\n   - B树不允许关键字重复,B+树允许重复。\n   - 所有叶子节点都有指向下一个叶子节点的指针。\n\n6. ##### 那么为什么是B+树？\n\n   - 磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I/O次数也就更少。\n\n   - 查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。\n\n   - 利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。\n\n7. ##### InnoDB的B+树索引\n\n   - 每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。\n   - 根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。\n   - B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。\n\n### 说说什么是最左匹配，对组合索引的理解\n\n两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。\n\n- 建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。\n\n- 想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。\n\n- 年级>=三 and 年级<=四 and 名字=小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。\n\n- 如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。\n\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n  \n\n### 有没有遇到过慢查询，如何优化？\n\n要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。\n\n###### 怎么更容易的写出慢查询？\n\n- 建表随便一点，能达到事半功倍的效果。\n- 建表不建索引，或者建了索引但是没有用上。\n- 隐式类型转换。\n- select * where xxx=xxx 不管是啥，先查出来再说。\n- select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。\n- join 各种表，连接一万遍。\n- 为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。\n- 花样 like。\n- 可能还有更高深的方法。。。\n\n###### 优化\n要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀[explain用法和结果的含义](https://blog.csdn.net/liyuxing6639801/article/details/105646853)\n- 索引\n  > 1. 合理利用覆盖索引。\n  >2. 索引中的字段数建议不超过5个。\n  > 3. 单张表的索引数量控制在5个以内。\n  >4. 对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。\n  > 5. 短索引。\n  \n- SQL\n  > 1. SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。\n  >2. 如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。\n  > 3. WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。\n  >4. SELECT语句只获取需要的字段。\n  > 5. 避免在SQL语句进行数学运算或者函数运算，否则不走索引。\n  >6. 避免使用JOIN。\n  > 7. 统计表中记录数时使用COUNT(\\*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(\\*)也可以用Redis等其他方式代替。\n  > 8. WHERE条件中的非等值条件（IN、BETWEEN、<、<=、>、>=）会导致后面的条件使用不了索引。\n  > 9. 复杂SQL拆分。\n  > 10. 使用合理的分页方式以提高分页的效率。\n  \n- 建表\n\n  > 1. 每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个==null值列表==，存储上，查询上都增加了成本。\n  >\n  > 2. 能用固定长度数据类型解决的，不用变长类型。\n\n- 表维护\n\n  > 定期将历史数据存档，表内数据维持在一定数量范围。\n  >\n  > 使用hash等方式分表。\n- 碎片整理\n  > [碎片整理遇到的那些事](https://blog.csdn.net/liyuxing6639801/article/details/105646967)\n\n### Mysql有哪几种事物隔离级别及区别？\n\n- ##### 事务基本要素\n\n  1. 原子性**Atomicity**\n  2. 一致性**Consistency**\n  3. 隔离性**Isolation**\n  4. 持久性**Durability**\n\n- ##### 事务隔离级别\n\n  默认隔离级别：repeatable-read 可重复读。\n  \n  事务隔离级别为串行化时，读写数据都会锁住整张表。\n  \n  事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。\n  \n  事务隔离级别为读提交时，写数据只会锁住相应的行。\n  \n  | 隔离级别                 | 脏读 | 不可重复读 | 幻读 |\n  | ------------------------ | ---- | ---------- | ---- |\n  | 读未提交read-uncommitted | 是   | 是         | 是   |\n  | 不可重复读read-committed | 否   | 是         | 是   |\n  | 可重复读repeatable-read  | 否   | 否         | 是   |\n  | 串行化serializable       | 否   | 否         | 否   |\n\n\n- ##### 不可重复读和幻读\n\n  不可重复读重点在于update\n\n  幻读的重点在于insert\n\n\n### Mysql中的锁\n\n- 锁结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70)\n  \n- MySQL中的行锁和表锁\n\n  1. 行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。\n  2. 表锁实现简单，占用资源少，但是粒度大，性能较差。\n  3. 对某个表执行一些诸如`ALTER TABLE`、`DROP TABLE`这类的`DDL`语句时，其他事务对这个表并发执行诸如`SELECT`、`INSERT`、`DELETE`、`UPDATE`的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用==元数据锁==（MDL）实现。\n\n- 一致性读\n\n  事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。\n\n- 行级锁\n\n  1. 共享锁\n\n     Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。\n\n     ```mysql\n     select ... lock in share mode;\n     ```\n\n  2. 独占锁\n\n     也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。\n\n     ```mysql\n     select ... for update;\n     ```\n  3. 行级锁兼容性\n     | 兼容性 | X    | S    |\n     | ------ | ---- | ---- |\n     | X      | No   | No   |\n     | S      | No   | Yes  |\n\n- 表级锁\n\n  1. 表级共享锁\n\n  2. 表级独占锁\n\n  3. 意向共享锁（IS锁）\n\n     给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。\n\n  4. 意向独占锁（IX锁)\n\n     同理\n\n  5. 表级锁兼容性\n\n     意向锁只是为了快速判断，意向锁之间都是兼容的。\n     \n     | 兼容性 |  X   |  S   |  IX  |  IS  |\n     | :----: | :--: | :--: | :--: | :--: |\n     |   X    |  No  |  No  |  No  |  No  |\n     |   S    |  No  | Yes  |  No  | Yes  |\n\t |   IX   |  No  |  No  | Yes  | Yes  |\n     |   IS   |  No  | Yes  | Yes  | Yes  |\n     \n  \n- ##### 表级别AUTO-INC锁\n\n  主键通常添加==AUTO_INCREMENT==属性，系统实现自增的原理有两个：\n\n  > 1. 执行插入操作时，在表级别加一个==AUTO-INC==锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。\n  >\n  >    AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。\n  >\n  > 2. 采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。\n  >3. InnoDB提供一个`innodb_autoinc_lock_mode`系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。\n  \n- 行锁的具体类型\n\n  - 普通行锁\n\n  - 间隙锁\n\n    官方名为LOCK_GAP，简称gap锁，仅仅是为了==防止插入幻影记录==而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。\n\n    MySQL在可重复读隔离级别下是可以解决幻读问题的：\n\n    1. MVCC\n    2. 加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。\n\n  - Next-Key Lock\n\n    官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。\n\n  - 插入意向锁\n\n    在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。\n\n### Mysql主从是怎么同步的？\n\nMySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。\n\n- 主从同步的好处\n  1. 读写分离。\n  2. 数据备份。\n  3. 故障切换。\n  4. 主服务器生成实时数据，从服务器分析，提高主服务器性能。\n\n- 同步方法\n\n  1. Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中\n\n     优点：日志文件小；记录了所有语句，方便审计。\n\n     缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；\n\n  2. Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。\n\n     优点：最安全的复制方式；更少的行级锁\n\n     缺点：日志文件大；不能进行日志审计\n\n  3. Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。\n\n\n\n### MySQL主从同步延迟问题\n\n1. 高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。\n2. 丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。\n\n> 主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？\n>\n> master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。\n\n```mysql\nshow status # Seconds_Behind_Master查看从库落后多长时间\n```\n\n- MySQL主从同步解决方案\n\n  1. 半同步复制——解决数据丢失问题，但会增加延迟。\n\n     默认是异步复制的方式，master并不关心slave数据有没有写入成功。\n\n     从库写入relay_log成功才返回ack消息，然后才返回客户端。\n\n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left)\n\n  2. 多库并行复制——解决从库复制延迟问题\n\n     多启了几个线程\n\n- ##### 常见主从延迟原因及解决方案\n\n  1. SQL执行速度慢：优化索引\n  2. 批量DML：通过缓存等方式降低DB并发压力\n  3. 大事务，耗时长：事务拆解，移除不必要事务\n\n### MySQL中varchar与char的区别以及char(10)中的10代表的涵义？\n\n- 从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？\n- 在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。\n- 在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。\n- char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。\n\n\n持续更新...","source":"_posts/2021-03-07-Mysql-面试100问.md","raw":"---\ntitle: Mysql-面试100问\ncomments: true\ndate: 2021-03-07 18:45:37\nauthor:\ntags:\n - Mysql\n - 面试\ncategories:\n - 数据库\n---\n\n##### 面试官：“了解MySQL吗？”\n要是说不了解，接下来该聊些啥呀？\n##### 面试官：“了解的话，那说说XXX吧。”\n巴拉巴拉...\n\n\n### MySQL有哪些常见的引擎，说说他们的区别？\n\n```mysql\nshow engines; #查看支持的引擎\n```\n\n- MyISAM：非事务处理存储引擎\n\n  索引放在XX.MYI文件中，数据放在XX.MYD文件中。\n\n- InnoDB：具备外键功能的存储引擎\n\n  索引也是数据。数据和索引存在一个XX.IDB文件中。\n\n- Mermory：基于内存\n\n  Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。\n\n- Archive：数据存档，数据插入后不能修改\n\n  针对高写入压缩做了优化的简单引擎。\n\n\t| 特点     | InnoDB | MyISAM | Memory       | Archive |\n\t| -------- | ------ | ------ | ------------ | ------- |\n\t| b+树索引 | yes    | yes    | yes          | no      |\n\t| MVCC     | yes    | no     | no           | no      |\n\t| 事务     | yes    | no     | no           | no      |\n\t| 存储限制 | 64TB   | 256TB  | RAM          | None    |\n\t| 索引缓存 | yes    | yes    | 本身就是缓存 | No      |\n\t| 外键     | yes    | no     | no           | no      |\n\t| 锁粒度   | row    | table  | table        | row     |\n\t| 全文索引 | yes    | yes    | no           | no      |\n\t| 数据缓存 | yes    | no     | 本身就是缓存 | no      |\n\n### 有哪些索引和他们之间的区别？\n\n- ##### Hash索引\n\n  优点：\n\n  1. Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。\n\n  缺点：\n\n  1. Hash索引只能满足\"=\"，\"IN\"，\"!=\"，不能使用范围查询。\n  2. Hash值的大小关系不一定个原键值一样，不能做排序操作。\n  3. 联合索引中不能利用部分索引键查询。\n  4. 遇到大量Hash值相等的情况后，性能不一定比B树高。\n  5. 存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。\n\n  InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个==完全自动的、内部的行为==，用户无法控制或配置（如果有必要，可以关闭该功能）。\n\n- ##### B+树索引\n\n  优点：\n\n  1. 所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。\n\n  2. 利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。\n\n  3. **B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。**\n\n     假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则\n\n     h=1，最多能放100条记录。\n\n     h=2，最多能放1000\\*100=100000条记录。\n\n     h=3，最多能放1000\\*1000\\*100=100000000（一亿）条记录。\n\n     h=4，最多能放1000\\*1000\\*1000\\*100=100000000000（一千亿）条记录，应该不会有这种数据量的表吧！\n\n     那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是==二分查找==。\n\n- ##### 全文索引\n\n  1. 5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。\n  2. 底层实现为倒排索引。\n------\n\n\n- ##### 聚集索引（聚簇索引）\n\n  1. 表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。\n\n  2. 聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。\n\n  3. 一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。**聚簇集**指的是数据行和相关的键值都保存在一起。\n\n  4. 如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。\n\n  5. 聚簇索引不是人为创建的，默认就有。\n\n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n- #### 非聚集索引（二级索引）\n\n  1. 表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。\n\n  2. 适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。\n  \n  3. 为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：\n  \n     > 索引列的值\n     >\n     > 主键值\n     >\n     > 页号（页指针）\n  \n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n  \n  ------\n  \n- 主键索引\n\n  1. 每张表都会有主键，也会用主键生成主键索引。\n  2. 主键索引就是聚簇索引，因此建表时最好用自增类型主键。\n  3. 如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键==row_id==（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找**主键->唯一键->隐藏主键**建立索引。\n\n  ```mysql\n  alter table table_name add primary key (column name);\n  ```\n\n- 普通索引，联合索引\n\n  ```mysql\n  create index 索引名 on table_name(column1,column2);\n  alter table table_name add index 索引名(column1,column2);\n  ```\n\n- 唯一索引\n\n  1. 唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。\n  2. 相比主键索引，主键字段不能为null，也不能重复。\n\n  ```mysql\n  create unique index index_name on table_name (column_list);\n  ```\n\n  \n\n### 为什么要使用索引？\n\n1. 减少存储引擎需要扫描的数据量，加快查询速度。\n2. 索引可以把随机I/O变为顺序I/O。\n3. 对索引结果进行排序以避免使用磁盘临时表。\n\n### 建索引、使用索引要注意什么？\n\n1. 数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。\n2. 数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。\n3. 尽量避免NULL。\n4. 复合索引将最常用作限制条件的列放在最左边，依次递减。\n5. 复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。\n6. 短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。\n7. mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。\n8. 建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。\n9. 建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。\n10. 使用NOT IN和!=操作，mysql将无法使用索引。\n11. 不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。\n\n### B+树有什么特点？为什么B+树更适合做索引？\n\n回答这个问题，心里一定要有点B树🐶。\n\n1. 二叉查找树：\n\n   - 左子树不为空，则左子树节点值均小于根节点。\n\n   - 右子树不为空，则右子树节点值均大于根节点。\n\n   - 任意节点的左右子树也是二叉查找树。\n\n   - 没有键值相同的节点。\n\n   - 有可能会退化成一条线性链。\n\n2. AVL树：\n\n   - AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。\n\n   - 左右子树高度差不超过1。\n\n   - 与红黑树相比，它是严格的平衡二叉树。\n\n   - AVL树适合于插入删除比较少，但查找多的情况。\n\n3. 红黑树：\n\n   - 一种二叉查找树，每个节点增加一个存储位标识颜色。\n   - 通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。\n   - 是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。\n\n4. B树（b-树）\n\n   - 为了磁盘或其它存储设备而设计的一种平衡多路查找树。\n   - 与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。\n   - B/B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I/O所花时间越少。\n   - 所有叶子节点位于同一层。\n\n5. B+树\n\n   - B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。\n   - B树不允许关键字重复,B+树允许重复。\n   - 所有叶子节点都有指向下一个叶子节点的指针。\n\n6. ##### 那么为什么是B+树？\n\n   - 磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I/O次数也就更少。\n\n   - 查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。\n\n   - 利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。\n\n7. ##### InnoDB的B+树索引\n\n   - 每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。\n   - 根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。\n   - B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。\n\n### 说说什么是最左匹配，对组合索引的理解\n\n两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。\n\n- 建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。\n\n- 想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。\n\n- 年级>=三 and 年级<=四 and 名字=小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。\n\n- 如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。\n\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n  \n\n### 有没有遇到过慢查询，如何优化？\n\n要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。\n\n###### 怎么更容易的写出慢查询？\n\n- 建表随便一点，能达到事半功倍的效果。\n- 建表不建索引，或者建了索引但是没有用上。\n- 隐式类型转换。\n- select * where xxx=xxx 不管是啥，先查出来再说。\n- select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。\n- join 各种表，连接一万遍。\n- 为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。\n- 花样 like。\n- 可能还有更高深的方法。。。\n\n###### 优化\n要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀[explain用法和结果的含义](https://blog.csdn.net/liyuxing6639801/article/details/105646853)\n- 索引\n  > 1. 合理利用覆盖索引。\n  >2. 索引中的字段数建议不超过5个。\n  > 3. 单张表的索引数量控制在5个以内。\n  >4. 对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。\n  > 5. 短索引。\n  \n- SQL\n  > 1. SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。\n  >2. 如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。\n  > 3. WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。\n  >4. SELECT语句只获取需要的字段。\n  > 5. 避免在SQL语句进行数学运算或者函数运算，否则不走索引。\n  >6. 避免使用JOIN。\n  > 7. 统计表中记录数时使用COUNT(\\*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(\\*)也可以用Redis等其他方式代替。\n  > 8. WHERE条件中的非等值条件（IN、BETWEEN、<、<=、>、>=）会导致后面的条件使用不了索引。\n  > 9. 复杂SQL拆分。\n  > 10. 使用合理的分页方式以提高分页的效率。\n  \n- 建表\n\n  > 1. 每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个==null值列表==，存储上，查询上都增加了成本。\n  >\n  > 2. 能用固定长度数据类型解决的，不用变长类型。\n\n- 表维护\n\n  > 定期将历史数据存档，表内数据维持在一定数量范围。\n  >\n  > 使用hash等方式分表。\n- 碎片整理\n  > [碎片整理遇到的那些事](https://blog.csdn.net/liyuxing6639801/article/details/105646967)\n\n### Mysql有哪几种事物隔离级别及区别？\n\n- ##### 事务基本要素\n\n  1. 原子性**Atomicity**\n  2. 一致性**Consistency**\n  3. 隔离性**Isolation**\n  4. 持久性**Durability**\n\n- ##### 事务隔离级别\n\n  默认隔离级别：repeatable-read 可重复读。\n  \n  事务隔离级别为串行化时，读写数据都会锁住整张表。\n  \n  事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。\n  \n  事务隔离级别为读提交时，写数据只会锁住相应的行。\n  \n  | 隔离级别                 | 脏读 | 不可重复读 | 幻读 |\n  | ------------------------ | ---- | ---------- | ---- |\n  | 读未提交read-uncommitted | 是   | 是         | 是   |\n  | 不可重复读read-committed | 否   | 是         | 是   |\n  | 可重复读repeatable-read  | 否   | 否         | 是   |\n  | 串行化serializable       | 否   | 否         | 否   |\n\n\n- ##### 不可重复读和幻读\n\n  不可重复读重点在于update\n\n  幻读的重点在于insert\n\n\n### Mysql中的锁\n\n- 锁结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70)\n  \n- MySQL中的行锁和表锁\n\n  1. 行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。\n  2. 表锁实现简单，占用资源少，但是粒度大，性能较差。\n  3. 对某个表执行一些诸如`ALTER TABLE`、`DROP TABLE`这类的`DDL`语句时，其他事务对这个表并发执行诸如`SELECT`、`INSERT`、`DELETE`、`UPDATE`的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用==元数据锁==（MDL）实现。\n\n- 一致性读\n\n  事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。\n\n- 行级锁\n\n  1. 共享锁\n\n     Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。\n\n     ```mysql\n     select ... lock in share mode;\n     ```\n\n  2. 独占锁\n\n     也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。\n\n     ```mysql\n     select ... for update;\n     ```\n  3. 行级锁兼容性\n     | 兼容性 | X    | S    |\n     | ------ | ---- | ---- |\n     | X      | No   | No   |\n     | S      | No   | Yes  |\n\n- 表级锁\n\n  1. 表级共享锁\n\n  2. 表级独占锁\n\n  3. 意向共享锁（IS锁）\n\n     给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。\n\n  4. 意向独占锁（IX锁)\n\n     同理\n\n  5. 表级锁兼容性\n\n     意向锁只是为了快速判断，意向锁之间都是兼容的。\n     \n     | 兼容性 |  X   |  S   |  IX  |  IS  |\n     | :----: | :--: | :--: | :--: | :--: |\n     |   X    |  No  |  No  |  No  |  No  |\n     |   S    |  No  | Yes  |  No  | Yes  |\n\t |   IX   |  No  |  No  | Yes  | Yes  |\n     |   IS   |  No  | Yes  | Yes  | Yes  |\n     \n  \n- ##### 表级别AUTO-INC锁\n\n  主键通常添加==AUTO_INCREMENT==属性，系统实现自增的原理有两个：\n\n  > 1. 执行插入操作时，在表级别加一个==AUTO-INC==锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。\n  >\n  >    AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。\n  >\n  > 2. 采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。\n  >3. InnoDB提供一个`innodb_autoinc_lock_mode`系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。\n  \n- 行锁的具体类型\n\n  - 普通行锁\n\n  - 间隙锁\n\n    官方名为LOCK_GAP，简称gap锁，仅仅是为了==防止插入幻影记录==而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。\n\n    MySQL在可重复读隔离级别下是可以解决幻读问题的：\n\n    1. MVCC\n    2. 加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。\n\n  - Next-Key Lock\n\n    官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。\n\n  - 插入意向锁\n\n    在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。\n\n### Mysql主从是怎么同步的？\n\nMySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。\n\n- 主从同步的好处\n  1. 读写分离。\n  2. 数据备份。\n  3. 故障切换。\n  4. 主服务器生成实时数据，从服务器分析，提高主服务器性能。\n\n- 同步方法\n\n  1. Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中\n\n     优点：日志文件小；记录了所有语句，方便审计。\n\n     缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；\n\n  2. Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。\n\n     优点：最安全的复制方式；更少的行级锁\n\n     缺点：日志文件大；不能进行日志审计\n\n  3. Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。\n\n\n\n### MySQL主从同步延迟问题\n\n1. 高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。\n2. 丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。\n\n> 主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？\n>\n> master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。\n\n```mysql\nshow status # Seconds_Behind_Master查看从库落后多长时间\n```\n\n- MySQL主从同步解决方案\n\n  1. 半同步复制——解决数据丢失问题，但会增加延迟。\n\n     默认是异步复制的方式，master并不关心slave数据有没有写入成功。\n\n     从库写入relay_log成功才返回ack消息，然后才返回客户端。\n\n     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left)\n\n  2. 多库并行复制——解决从库复制延迟问题\n\n     多启了几个线程\n\n- ##### 常见主从延迟原因及解决方案\n\n  1. SQL执行速度慢：优化索引\n  2. 批量DML：通过缓存等方式降低DB并发压力\n  3. 大事务，耗时长：事务拆解，移除不必要事务\n\n### MySQL中varchar与char的区别以及char(10)中的10代表的涵义？\n\n- 从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？\n- 在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。\n- 在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。\n- char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。\n\n\n持续更新...","slug":"Mysql-面试100问","published":1,"updated":"2021-03-07T10:46:06.543Z","_id":"cklz14yek003e6rs66v4m77os","layout":"post","photos":[],"link":"","content":"<h5 id=\"面试官：“了解MySQL吗？”\"><a href=\"#面试官：“了解MySQL吗？”\" class=\"headerlink\" title=\"面试官：“了解MySQL吗？”\"></a>面试官：“了解MySQL吗？”</h5><p>要是说不了解，接下来该聊些啥呀？</p>\n<h5 id=\"面试官：“了解的话，那说说XXX吧。”\"><a href=\"#面试官：“了解的话，那说说XXX吧。”\" class=\"headerlink\" title=\"面试官：“了解的话，那说说XXX吧。”\"></a>面试官：“了解的话，那说说XXX吧。”</h5><p>巴拉巴拉…</p>\n<h3 id=\"MySQL有哪些常见的引擎，说说他们的区别？\"><a href=\"#MySQL有哪些常见的引擎，说说他们的区别？\" class=\"headerlink\" title=\"MySQL有哪些常见的引擎，说说他们的区别？\"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engines; #查看支持的引擎<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MyISAM：非事务处理存储引擎</p>\n<p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p>\n</li>\n<li><p>InnoDB：具备外键功能的存储引擎</p>\n<p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p>\n</li>\n<li><p>Mermory：基于内存</p>\n<p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p>\n</li>\n<li><p>Archive：数据存档，数据插入后不能修改</p>\n<p>针对高写入压缩做了优化的简单引擎。</p>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b+树索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>MVCC</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>None</td>\n</tr>\n<tr>\n<td>索引缓存</td>\n<td>yes</td>\n<td>yes</td>\n<td>本身就是缓存</td>\n<td>No</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>锁粒度</td>\n<td>row</td>\n<td>table</td>\n<td>table</td>\n<td>row</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>数据缓存</td>\n<td>yes</td>\n<td>no</td>\n<td>本身就是缓存</td>\n<td>no</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"有哪些索引和他们之间的区别？\"><a href=\"#有哪些索引和他们之间的区别？\" class=\"headerlink\" title=\"有哪些索引和他们之间的区别？\"></a>有哪些索引和他们之间的区别？</h3><ul>\n<li><h5 id=\"Hash索引\"><a href=\"#Hash索引\" class=\"headerlink\" title=\"Hash索引\"></a>Hash索引</h5><p>优点：</p>\n<ol>\n<li>Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>Hash索引只能满足”=”，”IN”，”!=”，不能使用范围查询。</li>\n<li>Hash值的大小关系不一定个原键值一样，不能做排序操作。</li>\n<li>联合索引中不能利用部分索引键查询。</li>\n<li>遇到大量Hash值相等的情况后，性能不一定比B树高。</li>\n<li>存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。</li>\n</ol>\n<p>InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个==完全自动的、内部的行为==，用户无法控制或配置（如果有必要，可以关闭该功能）。</p>\n</li>\n<li><h5 id=\"B-树索引\"><a href=\"#B-树索引\" class=\"headerlink\" title=\"B+树索引\"></a>B+树索引</h5><p>优点：</p>\n<ol>\n<li><p>所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。</p>\n</li>\n<li><p>利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。</p>\n</li>\n<li><p><strong>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。</strong></p>\n<p>假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则</p>\n<p>h=1，最多能放100条记录。</p>\n<p>h=2，最多能放1000*100=100000条记录。</p>\n<p>h=3，最多能放1000*1000*100=100000000（一亿）条记录。</p>\n<p>h=4，最多能放1000*1000*1000*100=100000000000（一千亿）条记录，应该不会有这种数据量的表吧！</p>\n<p>那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是==二分查找==。</p>\n</li>\n</ol>\n</li>\n<li><h5 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h5><ol>\n<li>5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。</li>\n<li>底层实现为倒排索引。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h5 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h5><ol>\n<li><p>表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。</p>\n</li>\n<li><p>聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。</p>\n</li>\n<li><p>一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。<strong>聚簇集</strong>指的是数据行和相关的键值都保存在一起。</p>\n</li>\n<li><p>如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。</p>\n</li>\n<li><p>聚簇索引不是人为创建的，默认就有。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><h4 id=\"非聚集索引（二级索引）\"><a href=\"#非聚集索引（二级索引）\" class=\"headerlink\" title=\"非聚集索引（二级索引）\"></a>非聚集索引（二级索引）</h4><ol>\n<li><p>表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。</p>\n</li>\n<li><p>适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。</p>\n</li>\n<li><p>为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：</p>\n<blockquote>\n<p>索引列的值</p>\n<p>主键值</p>\n<p>页号（页指针）</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n<hr>\n</li>\n<li><p>主键索引</p>\n<ol>\n<li>每张表都会有主键，也会用主键生成主键索引。</li>\n<li>主键索引就是聚簇索引，因此建表时最好用自增类型主键。</li>\n<li>如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键==row_id==（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找<strong>主键-&gt;唯一键-&gt;隐藏主键</strong>建立索引。</li>\n</ol>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table table_name add primary key (column name);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>普通索引，联合索引</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create index 索引名 on table_name(column1,column2);\nalter table table_name add index 索引名(column1,column2);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>唯一索引</p>\n<ol>\n<li>唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。</li>\n<li>相比主键索引，主键字段不能为null，也不能重复。</li>\n</ol>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create unique index index_name on table_name (column_list);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"为什么要使用索引？\"><a href=\"#为什么要使用索引？\" class=\"headerlink\" title=\"为什么要使用索引？\"></a>为什么要使用索引？</h3><ol>\n<li>减少存储引擎需要扫描的数据量，加快查询速度。</li>\n<li>索引可以把随机I/O变为顺序I/O。</li>\n<li>对索引结果进行排序以避免使用磁盘临时表。</li>\n</ol>\n<h3 id=\"建索引、使用索引要注意什么？\"><a href=\"#建索引、使用索引要注意什么？\" class=\"headerlink\" title=\"建索引、使用索引要注意什么？\"></a>建索引、使用索引要注意什么？</h3><ol>\n<li>数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。</li>\n<li>数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。</li>\n<li>尽量避免NULL。</li>\n<li>复合索引将最常用作限制条件的列放在最左边，依次递减。</li>\n<li>复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。</li>\n<li>短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</li>\n<li>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li>\n<li>建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。</li>\n<li>建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。</li>\n<li>使用NOT IN和!=操作，mysql将无法使用索引。</li>\n<li>不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。</li>\n</ol>\n<h3 id=\"B-树有什么特点？为什么B-树更适合做索引？\"><a href=\"#B-树有什么特点？为什么B-树更适合做索引？\" class=\"headerlink\" title=\"B+树有什么特点？为什么B+树更适合做索引？\"></a>B+树有什么特点？为什么B+树更适合做索引？</h3><p>回答这个问题，心里一定要有点B树🐶。</p>\n<ol>\n<li><p>二叉查找树：</p>\n<ul>\n<li><p>左子树不为空，则左子树节点值均小于根节点。</p>\n</li>\n<li><p>右子树不为空，则右子树节点值均大于根节点。</p>\n</li>\n<li><p>任意节点的左右子树也是二叉查找树。</p>\n</li>\n<li><p>没有键值相同的节点。</p>\n</li>\n<li><p>有可能会退化成一条线性链。</p>\n</li>\n</ul>\n</li>\n<li><p>AVL树：</p>\n<ul>\n<li><p>AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。</p>\n</li>\n<li><p>左右子树高度差不超过1。</p>\n</li>\n<li><p>与红黑树相比，它是严格的平衡二叉树。</p>\n</li>\n<li><p>AVL树适合于插入删除比较少，但查找多的情况。</p>\n</li>\n</ul>\n</li>\n<li><p>红黑树：</p>\n<ul>\n<li>一种二叉查找树，每个节点增加一个存储位标识颜色。</li>\n<li>通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。</li>\n<li>是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。</li>\n</ul>\n</li>\n<li><p>B树（b-树）</p>\n<ul>\n<li>为了磁盘或其它存储设备而设计的一种平衡多路查找树。</li>\n<li>与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。</li>\n<li>B/B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I/O所花时间越少。</li>\n<li>所有叶子节点位于同一层。</li>\n</ul>\n</li>\n<li><p>B+树</p>\n<ul>\n<li>B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。</li>\n<li>B树不允许关键字重复,B+树允许重复。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n</ul>\n</li>\n<li><h5 id=\"那么为什么是B-树？\"><a href=\"#那么为什么是B-树？\" class=\"headerlink\" title=\"那么为什么是B+树？\"></a>那么为什么是B+树？</h5><ul>\n<li><p>磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I/O次数也就更少。</p>\n</li>\n<li><p>查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。</p>\n</li>\n<li><p>利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"InnoDB的B-树索引\"><a href=\"#InnoDB的B-树索引\" class=\"headerlink\" title=\"InnoDB的B+树索引\"></a>InnoDB的B+树索引</h5><ul>\n<li>每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。</li>\n<li>根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。</li>\n<li>B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"说说什么是最左匹配，对组合索引的理解\"><a href=\"#说说什么是最左匹配，对组合索引的理解\" class=\"headerlink\" title=\"说说什么是最左匹配，对组合索引的理解\"></a>说说什么是最左匹配，对组合索引的理解</h3><p>两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。</p>\n<ul>\n<li><p>建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。</p>\n</li>\n<li><p>想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。</p>\n</li>\n<li><p>年级&gt;=三 and 年级&lt;=四 and 名字=小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。</p>\n</li>\n<li><p>如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ul>\n<h3 id=\"有没有遇到过慢查询，如何优化？\"><a href=\"#有没有遇到过慢查询，如何优化？\" class=\"headerlink\" title=\"有没有遇到过慢查询，如何优化？\"></a>有没有遇到过慢查询，如何优化？</h3><p>要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。</p>\n<h6 id=\"怎么更容易的写出慢查询？\"><a href=\"#怎么更容易的写出慢查询？\" class=\"headerlink\" title=\"怎么更容易的写出慢查询？\"></a>怎么更容易的写出慢查询？</h6><ul>\n<li>建表随便一点，能达到事半功倍的效果。</li>\n<li>建表不建索引，或者建了索引但是没有用上。</li>\n<li>隐式类型转换。</li>\n<li>select * where xxx=xxx 不管是啥，先查出来再说。</li>\n<li>select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。</li>\n<li>join 各种表，连接一万遍。</li>\n<li>为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。</li>\n<li>花样 like。</li>\n<li>可能还有更高深的方法。。。</li>\n</ul>\n<h6 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h6><p>要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀<a href=\"https://blog.csdn.net/liyuxing6639801/article/details/105646853\">explain用法和结果的含义</a></p>\n<ul>\n<li><p>索引</p>\n<blockquote>\n<ol>\n<li>合理利用覆盖索引。</li>\n<li>索引中的字段数建议不超过5个。</li>\n<li>单张表的索引数量控制在5个以内。</li>\n<li>对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</li>\n<li>短索引。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>SQL</p>\n<blockquote>\n<ol>\n<li>SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。</li>\n<li>如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。</li>\n<li>WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</li>\n<li>SELECT语句只获取需要的字段。</li>\n<li>避免在SQL语句进行数学运算或者函数运算，否则不走索引。</li>\n<li>避免使用JOIN。</li>\n<li>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(*)也可以用Redis等其他方式代替。</li>\n<li>WHERE条件中的非等值条件（IN、BETWEEN、&lt;、&lt;=、&gt;、&gt;=）会导致后面的条件使用不了索引。</li>\n<li>复杂SQL拆分。</li>\n<li>使用合理的分页方式以提高分页的效率。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>建表</p>\n<blockquote>\n<ol>\n<li><p>每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个==null值列表==，存储上，查询上都增加了成本。</p>\n</li>\n<li><p>能用固定长度数据类型解决的，不用变长类型。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>表维护</p>\n<blockquote>\n<p>定期将历史数据存档，表内数据维持在一定数量范围。</p>\n<p>使用hash等方式分表。</p>\n</blockquote>\n</li>\n<li><p>碎片整理</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/liyuxing6639801/article/details/105646967\">碎片整理遇到的那些事</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Mysql有哪几种事物隔离级别及区别？\"><a href=\"#Mysql有哪几种事物隔离级别及区别？\" class=\"headerlink\" title=\"Mysql有哪几种事物隔离级别及区别？\"></a>Mysql有哪几种事物隔离级别及区别？</h3><ul>\n<li><h5 id=\"事务基本要素\"><a href=\"#事务基本要素\" class=\"headerlink\" title=\"事务基本要素\"></a>事务基本要素</h5><ol>\n<li>原子性<strong>Atomicity</strong></li>\n<li>一致性<strong>Consistency</strong></li>\n<li>隔离性<strong>Isolation</strong></li>\n<li>持久性<strong>Durability</strong></li>\n</ol>\n</li>\n<li><h5 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h5><p>默认隔离级别：repeatable-read 可重复读。</p>\n<p>事务隔离级别为串行化时，读写数据都会锁住整张表。</p>\n<p>事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。</p>\n<p>事务隔离级别为读提交时，写数据只会锁住相应的行。</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交read-uncommitted</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不可重复读read-committed</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>可重复读repeatable-read</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>串行化serializable</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><h5 id=\"不可重复读和幻读\"><a href=\"#不可重复读和幻读\" class=\"headerlink\" title=\"不可重复读和幻读\"></a>不可重复读和幻读</h5><p>不可重复读重点在于update</p>\n<p>幻读的重点在于insert</p>\n</li>\n</ul>\n<h3 id=\"Mysql中的锁\"><a href=\"#Mysql中的锁\" class=\"headerlink\" title=\"Mysql中的锁\"></a>Mysql中的锁</h3><ul>\n<li>锁结构</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>MySQL中的行锁和表锁</p>\n<ol>\n<li>行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。</li>\n<li>表锁实现简单，占用资源少，但是粒度大，性能较差。</li>\n<li>对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如<code>SELECT</code>、<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用==元数据锁==（MDL）实现。</li>\n</ol>\n</li>\n<li><p>一致性读</p>\n<p>事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。</p>\n</li>\n<li><p>行级锁</p>\n<ol>\n<li><p>共享锁</p>\n<p>Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select ... lock in share mode;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>独占锁</p>\n<p>也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select ... for update;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>行级锁兼容性</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>X</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>S</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p>表级锁</p>\n<ol>\n<li><p>表级共享锁</p>\n</li>\n<li><p>表级独占锁</p>\n</li>\n<li><p>意向共享锁（IS锁）</p>\n<p>给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。</p>\n</li>\n<li><p>意向独占锁（IX锁)</p>\n<p>同理</p>\n</li>\n<li><p>表级锁兼容性</p>\n<p>意向锁只是为了快速判断，意向锁之间都是兼容的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">兼容性</th>\n<th align=\"center\">X</th>\n<th align=\"center\">S</th>\n<th align=\"center\">IX</th>\n<th align=\"center\">IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">IX</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">IS</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><h5 id=\"表级别AUTO-INC锁\"><a href=\"#表级别AUTO-INC锁\" class=\"headerlink\" title=\"表级别AUTO-INC锁\"></a>表级别AUTO-INC锁</h5><p>主键通常添加==AUTO_INCREMENT==属性，系统实现自增的原理有两个：</p>\n<blockquote>\n<ol>\n<li><p>执行插入操作时，在表级别加一个==AUTO-INC==锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。</p>\n<p>AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。</p>\n</li>\n<li><p>采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。</p>\n</li>\n<li><p>InnoDB提供一个<code>innodb_autoinc_lock_mode</code>系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>行锁的具体类型</p>\n<ul>\n<li><p>普通行锁</p>\n</li>\n<li><p>间隙锁</p>\n<p>官方名为LOCK_GAP，简称gap锁，仅仅是为了==防止插入幻影记录==而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。</p>\n<p>MySQL在可重复读隔离级别下是可以解决幻读问题的：</p>\n<ol>\n<li>MVCC</li>\n<li>加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。</li>\n</ol>\n</li>\n<li><p>Next-Key Lock</p>\n<p>官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。</p>\n</li>\n<li><p>插入意向锁</p>\n<p>在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Mysql主从是怎么同步的？\"><a href=\"#Mysql主从是怎么同步的？\" class=\"headerlink\" title=\"Mysql主从是怎么同步的？\"></a>Mysql主从是怎么同步的？</h3><p>MySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。</p>\n<ul>\n<li><p>主从同步的好处</p>\n<ol>\n<li>读写分离。</li>\n<li>数据备份。</li>\n<li>故障切换。</li>\n<li>主服务器生成实时数据，从服务器分析，提高主服务器性能。</li>\n</ol>\n</li>\n<li><p>同步方法</p>\n<ol>\n<li><p>Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中</p>\n<p>优点：日志文件小；记录了所有语句，方便审计。</p>\n<p>缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；</p>\n</li>\n<li><p>Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。</p>\n<p>优点：最安全的复制方式；更少的行级锁</p>\n<p>缺点：日志文件大；不能进行日志审计</p>\n</li>\n<li><p>Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"MySQL主从同步延迟问题\"><a href=\"#MySQL主从同步延迟问题\" class=\"headerlink\" title=\"MySQL主从同步延迟问题\"></a>MySQL主从同步延迟问题</h3><ol>\n<li>高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。</li>\n<li>丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。</li>\n</ol>\n<blockquote>\n<p>主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？</p>\n<p>master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。</p>\n</blockquote>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show status # Seconds_Behind_Master查看从库落后多长时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MySQL主从同步解决方案</p>\n<ol>\n<li><p>半同步复制——解决数据丢失问题，但会增加延迟。</p>\n<p>默认是异步复制的方式，master并不关心slave数据有没有写入成功。</p>\n<p>从库写入relay_log成功才返回ack消息，然后才返回客户端。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>多库并行复制——解决从库复制延迟问题</p>\n<p>多启了几个线程</p>\n</li>\n</ol>\n</li>\n<li><h5 id=\"常见主从延迟原因及解决方案\"><a href=\"#常见主从延迟原因及解决方案\" class=\"headerlink\" title=\"常见主从延迟原因及解决方案\"></a>常见主从延迟原因及解决方案</h5><ol>\n<li>SQL执行速度慢：优化索引</li>\n<li>批量DML：通过缓存等方式降低DB并发压力</li>\n<li>大事务，耗时长：事务拆解，移除不必要事务</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"MySQL中varchar与char的区别以及char-10-中的10代表的涵义？\"><a href=\"#MySQL中varchar与char的区别以及char-10-中的10代表的涵义？\" class=\"headerlink\" title=\"MySQL中varchar与char的区别以及char(10)中的10代表的涵义？\"></a>MySQL中varchar与char的区别以及char(10)中的10代表的涵义？</h3><ul>\n<li>从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？</li>\n<li>在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。</li>\n<li>在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。</li>\n<li>char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。</li>\n</ul>\n<p>持续更新…</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h5 id=\"面试官：“了解MySQL吗？”\"><a href=\"#面试官：“了解MySQL吗？”\" class=\"headerlink\" title=\"面试官：“了解MySQL吗？”\"></a>面试官：“了解MySQL吗？”</h5><p>要是说不了解，接下来该聊些啥呀？</p>\n<h5 id=\"面试官：“了解的话，那说说XXX吧。”\"><a href=\"#面试官：“了解的话，那说说XXX吧。”\" class=\"headerlink\" title=\"面试官：“了解的话，那说说XXX吧。”\"></a>面试官：“了解的话，那说说XXX吧。”</h5><p>巴拉巴拉…</p>\n<h3 id=\"MySQL有哪些常见的引擎，说说他们的区别？\"><a href=\"#MySQL有哪些常见的引擎，说说他们的区别？\" class=\"headerlink\" title=\"MySQL有哪些常见的引擎，说说他们的区别？\"></a>MySQL有哪些常见的引擎，说说他们的区别？</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show engines; #查看支持的引擎<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MyISAM：非事务处理存储引擎</p>\n<p>索引放在XX.MYI文件中，数据放在XX.MYD文件中。</p>\n</li>\n<li><p>InnoDB：具备外键功能的存储引擎</p>\n<p>索引也是数据。数据和索引存在一个XX.IDB文件中。</p>\n</li>\n<li><p>Mermory：基于内存</p>\n<p>Memory表至少比MyISAM表要快一个数量级，因为所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p>\n</li>\n<li><p>Archive：数据存档，数据插入后不能修改</p>\n<p>针对高写入压缩做了优化的简单引擎。</p>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b+树索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>MVCC</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>None</td>\n</tr>\n<tr>\n<td>索引缓存</td>\n<td>yes</td>\n<td>yes</td>\n<td>本身就是缓存</td>\n<td>No</td>\n</tr>\n<tr>\n<td>外键</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>锁粒度</td>\n<td>row</td>\n<td>table</td>\n<td>table</td>\n<td>row</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>数据缓存</td>\n<td>yes</td>\n<td>no</td>\n<td>本身就是缓存</td>\n<td>no</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"有哪些索引和他们之间的区别？\"><a href=\"#有哪些索引和他们之间的区别？\" class=\"headerlink\" title=\"有哪些索引和他们之间的区别？\"></a>有哪些索引和他们之间的区别？</h3><ul>\n<li><h5 id=\"Hash索引\"><a href=\"#Hash索引\" class=\"headerlink\" title=\"Hash索引\"></a>Hash索引</h5><p>优点：</p>\n<ol>\n<li>Hash索引的检索可以一次到位，所以Hash索引的查询效率更高。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>Hash索引只能满足”=”，”IN”，”!=”，不能使用范围查询。</li>\n<li>Hash值的大小关系不一定个原键值一样，不能做排序操作。</li>\n<li>联合索引中不能利用部分索引键查询。</li>\n<li>遇到大量Hash值相等的情况后，性能不一定比B树高。</li>\n<li>存储引擎会为Hash索引中的每一列都计算hash码，Hash索引中存储的即hash码，所以每次读取都会进行两次查询。</li>\n</ol>\n<p>InnoDB引擎有一个特殊功能叫“自适应哈希索引”。当InnoDB发现某些索引值被使用的非常频繁是，会在内存中基于B-Tree索引之上再建一个哈希索引，这样可以让B-Tree索引具有哈希索引的优点。这是一个==完全自动的、内部的行为==，用户无法控制或配置（如果有必要，可以关闭该功能）。</p>\n</li>\n<li><h5 id=\"B-树索引\"><a href=\"#B-树索引\" class=\"headerlink\" title=\"B+树索引\"></a>B+树索引</h5><p>优点：</p>\n<ol>\n<li><p>所有索引数据都在叶子结点上，并且增加了顺序访问指针,每个叶子节点都有指向相邻叶子节点的指针。</p>\n</li>\n<li><p>利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。</p>\n</li>\n<li><p><strong>B-Tree中一次检索最多需要h-1次I/O（根节点常驻内存），渐进复杂度为O(h)=O(logdN)。</strong></p>\n<p>假设叶子节点页可以存放100条记录，内部节点可以存放1000条目录，则</p>\n<p>h=1，最多能放100条记录。</p>\n<p>h=2，最多能放1000*100=100000条记录。</p>\n<p>h=3，最多能放1000*1000*100=100000000（一亿）条记录。</p>\n<p>h=4，最多能放1000*1000*1000*100=100000000000（一千亿）条记录，应该不会有这种数据量的表吧！</p>\n<p>那为什么是O(logdN)呢？因为在页内查找一条记录时，使用的是==二分查找==。</p>\n</li>\n</ol>\n</li>\n<li><h5 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h5><ol>\n<li>5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。</li>\n<li>底层实现为倒排索引。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h5 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h5><ol>\n<li><p>表数据按照索引的顺序存储，也就是说索引项的顺序和表中记录的物理顺序一致。</p>\n</li>\n<li><p>聚簇索引叶子节点存储了真实的数据行，不在有单独的数据页。</p>\n</li>\n<li><p>一张表只能创建一个聚簇索引，因为物理存储顺序只能有一种。<strong>聚簇集</strong>指的是数据行和相关的键值都保存在一起。</p>\n</li>\n<li><p>如果主键不是自增ID，MySQL会不断的调整数据的物理地址、分页分裂、页合并。如果自增，只需要一页一页的写，索引结构相对紧凑，磁盘碎片少，效率高。</p>\n</li>\n<li><p>聚簇索引不是人为创建的，默认就有。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175724907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><h4 id=\"非聚集索引（二级索引）\"><a href=\"#非聚集索引（二级索引）\" class=\"headerlink\" title=\"非聚集索引（二级索引）\"></a>非聚集索引（二级索引）</h4><ol>\n<li><p>表数据存储顺序与索引顺序无关。叶子节点包含索引字段值及指向数据页数据行的逻辑指针（行的主键值）。</p>\n</li>\n<li><p>适当建立联合索引（索引列包含全部查找列）能达到不用回表即可获取数据的目的。</p>\n</li>\n<li><p>为了保证B+树的同一层内节点的目录项记录除页号字段外是唯一的，内节点需要增加主键字段，即二级索引内节点由三部分组成：</p>\n<blockquote>\n<p>索引列的值</p>\n<p>主键值</p>\n<p>页号（页指针）</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/2020041917570460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n<hr>\n</li>\n<li><p>主键索引</p>\n<ol>\n<li>每张表都会有主键，也会用主键生成主键索引。</li>\n<li>主键索引就是聚簇索引，因此建表时最好用自增类型主键。</li>\n<li>如果没有设置主键会发生什么？建表时如果没有设置主键，MySQL会启用内部的隐藏主键==row_id==（6个字节），也就是说无论如何一张表都必须有主键。MySQL会依次查找<strong>主键-&gt;唯一键-&gt;隐藏主键</strong>建立索引。</li>\n</ol>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">alter table table_name add primary key (column name);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>普通索引，联合索引</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create index 索引名 on table_name(column1,column2);\nalter table table_name add index 索引名(column1,column2);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>唯一索引</p>\n<ol>\n<li>唯一索引可以有多个null（不提倡有null值）,但不能有重复的内容。</li>\n<li>相比主键索引，主键字段不能为null，也不能重复。</li>\n</ol>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">create unique index index_name on table_name (column_list);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"为什么要使用索引？\"><a href=\"#为什么要使用索引？\" class=\"headerlink\" title=\"为什么要使用索引？\"></a>为什么要使用索引？</h3><ol>\n<li>减少存储引擎需要扫描的数据量，加快查询速度。</li>\n<li>索引可以把随机I/O变为顺序I/O。</li>\n<li>对索引结果进行排序以避免使用磁盘临时表。</li>\n</ol>\n<h3 id=\"建索引、使用索引要注意什么？\"><a href=\"#建索引、使用索引要注意什么？\" class=\"headerlink\" title=\"建索引、使用索引要注意什么？\"></a>建索引、使用索引要注意什么？</h3><ol>\n<li>数据类型越小越好。数据类型越小，在磁盘、内存和CPU缓存中需要的空间更少，处理速度更快。</li>\n<li>数据类型越简单越好。整形优于字符串，内置日期和时间优于字符串。</li>\n<li>尽量避免NULL。</li>\n<li>复合索引将最常用作限制条件的列放在最左边，依次递减。</li>\n<li>复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。</li>\n<li>短索引。对串列进行索引，如果可能应该指定一个前缀长度，不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</li>\n<li>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li>\n<li>建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。</li>\n<li>建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。</li>\n<li>使用NOT IN和!=操作，mysql将无法使用索引。</li>\n<li>不要在列上进行运算，where字句的查询条件里使用了函数将不会使用索引。</li>\n</ol>\n<h3 id=\"B-树有什么特点？为什么B-树更适合做索引？\"><a href=\"#B-树有什么特点？为什么B-树更适合做索引？\" class=\"headerlink\" title=\"B+树有什么特点？为什么B+树更适合做索引？\"></a>B+树有什么特点？为什么B+树更适合做索引？</h3><p>回答这个问题，心里一定要有点B树🐶。</p>\n<ol>\n<li><p>二叉查找树：</p>\n<ul>\n<li><p>左子树不为空，则左子树节点值均小于根节点。</p>\n</li>\n<li><p>右子树不为空，则右子树节点值均大于根节点。</p>\n</li>\n<li><p>任意节点的左右子树也是二叉查找树。</p>\n</li>\n<li><p>没有键值相同的节点。</p>\n</li>\n<li><p>有可能会退化成一条线性链。</p>\n</li>\n</ul>\n</li>\n<li><p>AVL树：</p>\n<ul>\n<li><p>AVL树是带有平衡条件的二叉查找树，一般用平衡因子差值判断是否平衡并通过旋转实现平衡。</p>\n</li>\n<li><p>左右子树高度差不超过1。</p>\n</li>\n<li><p>与红黑树相比，它是严格的平衡二叉树。</p>\n</li>\n<li><p>AVL树适合于插入删除比较少，但查找多的情况。</p>\n</li>\n</ul>\n</li>\n<li><p>红黑树：</p>\n<ul>\n<li>一种二叉查找树，每个节点增加一个存储位标识颜色。</li>\n<li>通过对任何一条从根节点到叶子节点的路径上各个节点着色方式的限制，确保没有一条路径会比其他路径长出两倍。</li>\n<li>是一种弱平衡二叉树，相对AVL树，它的旋转次数少，适用于搜索，插入，删除操作多的情况。</li>\n</ul>\n</li>\n<li><p>B树（b-树）</p>\n<ul>\n<li>为了磁盘或其它存储设备而设计的一种平衡多路查找树。</li>\n<li>与二叉树相比，每个节点有多个分支。在相同节点的情况下，高度远远低于红黑树。</li>\n<li>B/B+树操作时间由磁盘存取和CPU两部分构成，CPU速度非常快，多以B树的效率取决于磁盘访问次数。关键字总数相同的情况下B树的高度越小，磁盘I/O所花时间越少。</li>\n<li>所有叶子节点位于同一层。</li>\n</ul>\n</li>\n<li><p>B+树</p>\n<ul>\n<li>B树的变形树，非叶子节点只保存索引，不保存实际的数据，数据都保存在叶子节点中，且有序。</li>\n<li>B树不允许关键字重复,B+树允许重复。</li>\n<li>所有叶子节点都有指向下一个叶子节点的指针。</li>\n</ul>\n</li>\n<li><h5 id=\"那么为什么是B-树？\"><a href=\"#那么为什么是B-树？\" class=\"headerlink\" title=\"那么为什么是B+树？\"></a>那么为什么是B+树？</h5><ul>\n<li><p>磁盘读写代价更低：内部节点只有指向下层节点的页指针（6个字节），因此内部节点相对B树更小，一页空间能容纳的关键字数量更多，I/O次数也就更少。</p>\n</li>\n<li><p>查询效率更稳定：任何关键字的查找必须走一条从根结点到叶子结点的路，所以每一个数据的查询效率相当。</p>\n</li>\n<li><p>利于数据库的扫描：B+树只需要遍历叶子节点就可以实现对全部关键字的扫描，更有利于范围查询。B树如果需要扫描，需要进行一次中序遍历，效率太低。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"InnoDB的B-树索引\"><a href=\"#InnoDB的B-树索引\" class=\"headerlink\" title=\"InnoDB的B+树索引\"></a>InnoDB的B+树索引</h5><ul>\n<li>每当某个表创建B+树索引的时候，都会为这个索引创建一个根节点页面。开始没有数据的时候，根节点中既没有用户记录，也没有目录项记录。</li>\n<li>根节点中可用空间用完后再继续插入记录，会将根节点中的记录复制到一个新分配的页总，然后对新页进行页分裂。新插入的记录根据索引值大小分配到分裂的页中，根节点升级为存储目录项记录的页。</li>\n<li>B+树索引的根节点从创建开始，便不会再移动。InnoDB用到这个索引的时候，会从固定的地方取出根节点的页号，从而访问这个索引。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"说说什么是最左匹配，对组合索引的理解\"><a href=\"#说说什么是最左匹配，对组合索引的理解\" class=\"headerlink\" title=\"说说什么是最左匹配，对组合索引的理解\"></a>说说什么是最左匹配，对组合索引的理解</h3><p>两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。</p>\n<ul>\n<li><p>建立联合索引时，从左到右依次判断，如果左边列相同，则根据第二列的大小排列，多列以此类推。</p>\n</li>\n<li><p>想要找”二班的小Q“，因为不知道年级，所以需要遍历所有数据。</p>\n</li>\n<li><p>年级&gt;=三 and 年级&lt;=四 and 名字=小Q，因为不知道是几班的，所以要把三、四年级都遍历一遍，但是也用到了年级这个索引列，不用找其他年级。</p>\n</li>\n<li><p>如果期望order by的子句使用索引，后面的顺序也必须按照索引列的顺序给出。如：按照年级、班级、名字顺次取10位同学。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175555700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ul>\n<h3 id=\"有没有遇到过慢查询，如何优化？\"><a href=\"#有没有遇到过慢查询，如何优化？\" class=\"headerlink\" title=\"有没有遇到过慢查询，如何优化？\"></a>有没有遇到过慢查询，如何优化？</h3><p>要是说没遇到过，面试官也不会以为你SQL学的好，他一定认为”渣渣，连慢查询都没写过🐶🐶🐶“。</p>\n<h6 id=\"怎么更容易的写出慢查询？\"><a href=\"#怎么更容易的写出慢查询？\" class=\"headerlink\" title=\"怎么更容易的写出慢查询？\"></a>怎么更容易的写出慢查询？</h6><ul>\n<li>建表随便一点，能达到事半功倍的效果。</li>\n<li>建表不建索引，或者建了索引但是没有用上。</li>\n<li>隐式类型转换。</li>\n<li>select * where xxx=xxx 不管是啥，先查出来再说。</li>\n<li>select xxx limit 100000 符合条件的数据有多少，全部拿出来，用不用再说。</li>\n<li>join 各种表，连接一万遍。</li>\n<li>为了展现强大的SQL水平，一条SQL要写一页，谁都别想看懂。</li>\n<li>花样 like。</li>\n<li>可能还有更高深的方法。。。</li>\n</ul>\n<h6 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h6><p>要想优化，得先定位问题，explain或desc查看SQL是怎么执行的。👀👀👀<a href=\"https://blog.csdn.net/liyuxing6639801/article/details/105646853\">explain用法和结果的含义</a></p>\n<ul>\n<li><p>索引</p>\n<blockquote>\n<ol>\n<li>合理利用覆盖索引。</li>\n<li>索引中的字段数建议不超过5个。</li>\n<li>单张表的索引数量控制在5个以内。</li>\n<li>对长度过长的VARCHAR字段建立索引时，添加crc32或者MD5 Hash字段，对Hash字段建立索引。</li>\n<li>短索引。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>SQL</p>\n<blockquote>\n<ol>\n<li>SQL语句中IN包含的值不应过多，否则即使有索引还是可能扫全表。</li>\n<li>如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引（不建议）。</li>\n<li>WHERE条件中必须使用合适的类型，避免MySQL进行隐式类型转化。</li>\n<li>SELECT语句只获取需要的字段。</li>\n<li>避免在SQL语句进行数学运算或者函数运算，否则不走索引。</li>\n<li>避免使用JOIN。</li>\n<li>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1)。但是COUNT(*)也可以用Redis等其他方式代替。</li>\n<li>WHERE条件中的非等值条件（IN、BETWEEN、&lt;、&lt;=、&gt;、&gt;=）会导致后面的条件使用不了索引。</li>\n<li>复杂SQL拆分。</li>\n<li>使用合理的分页方式以提高分页的效率。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>建表</p>\n<blockquote>\n<ol>\n<li><p>每一列都是not null：如果某一列可能存储null值，那么mysql需要额外维护一个==null值列表==，存储上，查询上都增加了成本。</p>\n</li>\n<li><p>能用固定长度数据类型解决的，不用变长类型。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>表维护</p>\n<blockquote>\n<p>定期将历史数据存档，表内数据维持在一定数量范围。</p>\n<p>使用hash等方式分表。</p>\n</blockquote>\n</li>\n<li><p>碎片整理</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/liyuxing6639801/article/details/105646967\">碎片整理遇到的那些事</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Mysql有哪几种事物隔离级别及区别？\"><a href=\"#Mysql有哪几种事物隔离级别及区别？\" class=\"headerlink\" title=\"Mysql有哪几种事物隔离级别及区别？\"></a>Mysql有哪几种事物隔离级别及区别？</h3><ul>\n<li><h5 id=\"事务基本要素\"><a href=\"#事务基本要素\" class=\"headerlink\" title=\"事务基本要素\"></a>事务基本要素</h5><ol>\n<li>原子性<strong>Atomicity</strong></li>\n<li>一致性<strong>Consistency</strong></li>\n<li>隔离性<strong>Isolation</strong></li>\n<li>持久性<strong>Durability</strong></li>\n</ol>\n</li>\n<li><h5 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h5><p>默认隔离级别：repeatable-read 可重复读。</p>\n<p>事务隔离级别为串行化时，读写数据都会锁住整张表。</p>\n<p>事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。</p>\n<p>事务隔离级别为读提交时，写数据只会锁住相应的行。</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交read-uncommitted</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不可重复读read-committed</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>可重复读repeatable-read</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>串行化serializable</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><h5 id=\"不可重复读和幻读\"><a href=\"#不可重复读和幻读\" class=\"headerlink\" title=\"不可重复读和幻读\"></a>不可重复读和幻读</h5><p>不可重复读重点在于update</p>\n<p>幻读的重点在于insert</p>\n</li>\n</ul>\n<h3 id=\"Mysql中的锁\"><a href=\"#Mysql中的锁\" class=\"headerlink\" title=\"Mysql中的锁\"></a>Mysql中的锁</h3><ul>\n<li>锁结构</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175424893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_14,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>MySQL中的行锁和表锁</p>\n<ol>\n<li>行锁是InnoDB引擎才有的。MyISAM、Memory、Merge等引擎都只支持表锁，并且不支持事务。</li>\n<li>表锁实现简单，占用资源少，但是粒度大，性能较差。</li>\n<li>对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如<code>SELECT</code>、<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>的语句会发生阻塞，反之也会发生阻塞。这个过程通过在server层使用==元数据锁==（MDL）实现。</li>\n</ol>\n</li>\n<li><p>一致性读</p>\n<p>事务利用MVCC进行读取操作，称为一致性读、快照读或一致性无锁读。一致性读不会对表中记录进行加锁，其他事务可以自由对表中记录进行改动。</p>\n</li>\n<li><p>行级锁</p>\n<ol>\n<li><p>共享锁</p>\n<p>Share Locks，简称S锁。事务在读取一条记录时，需要先获取S锁。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select ... lock in share mode;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>独占锁</p>\n<p>也叫排它锁，Exclusive Locks，简称X锁。事务要改动一条记录时，需要先获取该记录的X锁。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">select ... for update;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>行级锁兼容性</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>X</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>S</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p>表级锁</p>\n<ol>\n<li><p>表级共享锁</p>\n</li>\n<li><p>表级独占锁</p>\n</li>\n<li><p>意向共享锁（IS锁）</p>\n<p>给表上锁前需要知道表中有没有行锁，遍历又不是MySQL的风格，于是提出了意向锁。也就是在给某条记录加S锁时，需要先加一个表级别的IX锁。</p>\n</li>\n<li><p>意向独占锁（IX锁)</p>\n<p>同理</p>\n</li>\n<li><p>表级锁兼容性</p>\n<p>意向锁只是为了快速判断，意向锁之间都是兼容的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">兼容性</th>\n<th align=\"center\">X</th>\n<th align=\"center\">S</th>\n<th align=\"center\">IX</th>\n<th align=\"center\">IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">IX</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">IS</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><h5 id=\"表级别AUTO-INC锁\"><a href=\"#表级别AUTO-INC锁\" class=\"headerlink\" title=\"表级别AUTO-INC锁\"></a>表级别AUTO-INC锁</h5><p>主键通常添加==AUTO_INCREMENT==属性，系统实现自增的原理有两个：</p>\n<blockquote>\n<ol>\n<li><p>执行插入操作时，在表级别加一个==AUTO-INC==锁，然后为每条记录分配递增值，该语句结束后再释放AUTO-INC锁，这样可以保证递增值是连续的。</p>\n<p>AUTO_INC锁的作用范围只是insert语句，insert语句执行完就被释放了，不用等到事务结束。</p>\n</li>\n<li><p>采用轻量级的锁，在为insert语句生成递增值的时候获取一下轻量级锁，获取到后即可释放，不用等insert语句执行完毕再释放。</p>\n</li>\n<li><p>InnoDB提供一个<code>innodb_autoinc_lock_mode</code>系统变量，值为0时，一律采用AUTO-INC锁；值为2时，一律采用轻量级锁（不安全）；值为1时，在插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>行锁的具体类型</p>\n<ul>\n<li><p>普通行锁</p>\n</li>\n<li><p>间隙锁</p>\n<p>官方名为LOCK_GAP，简称gap锁，仅仅是为了==防止插入幻影记录==而提出的。获取间隙锁后，其他事务不能在当前记录和相邻前一条记录的间隙中插入新记录。</p>\n<p>MySQL在可重复读隔离级别下是可以解决幻读问题的：</p>\n<ol>\n<li>MVCC</li>\n<li>加锁，加锁方案解决时，由于第一次执行读取操作时，幻影记录尚不存在，所以无法给其加锁。因此提出间隙锁。</li>\n</ol>\n</li>\n<li><p>Next-Key Lock</p>\n<p>官方名为LOCK_ORDINARY。既想锁住某条记录，又想阻止其他事务在该记录前面间隙插入新纪录。</p>\n</li>\n<li><p>插入意向锁</p>\n<p>在插入数据时发现存在间隙锁，需要进行等待。在等待的时候需要在内存中生成插入意向锁。插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（要它有啥用）。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Mysql主从是怎么同步的？\"><a href=\"#Mysql主从是怎么同步的？\" class=\"headerlink\" title=\"Mysql主从是怎么同步的？\"></a>Mysql主从是怎么同步的？</h3><p>MySQL服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行（两个线程）该日志文件保持与主服务器的数据一致。</p>\n<ul>\n<li><p>主从同步的好处</p>\n<ol>\n<li>读写分离。</li>\n<li>数据备份。</li>\n<li>故障切换。</li>\n<li>主服务器生成实时数据，从服务器分析，提高主服务器性能。</li>\n</ol>\n</li>\n<li><p>同步方法</p>\n<ol>\n<li><p>Statement Based Replication 基于SQL语句的复制，主服务器将SQL写到日志文件中</p>\n<p>优点：日志文件小；记录了所有语句，方便审计。</p>\n<p>缺点：sql中的函数语句不能正确复制；告警信息不能正确复制；</p>\n</li>\n<li><p>Row Based Replication 基于行的复制，行变化作为事件写入二进制日志。</p>\n<p>优点：最安全的复制方式；更少的行级锁</p>\n<p>缺点：日志文件大；不能进行日志审计</p>\n</li>\n<li><p>Mixed Based Replication 混合，既使用SBR又使用RBR，默认SBR。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"MySQL主从同步延迟问题\"><a href=\"#MySQL主从同步延迟问题\" class=\"headerlink\" title=\"MySQL主从同步延迟问题\"></a>MySQL主从同步延迟问题</h3><ol>\n<li>高延迟——高并发场景下从库的数据会比主库慢，从而导致延迟。出现写入主库成功，但是数据需要等待几十毫秒或者更长时间才能读到。</li>\n<li>丢数据——master节点突然挂掉，但是新写的数据还没有同步到slave节点，导致数据丢失。</li>\n</ol>\n<blockquote>\n<p>主库和从库执行相同的SQL，主库可以快速执行，为什么从库不行？</p>\n<p>master可以并发，但是slave的SQL线程只能顺序执行。当TPS较高时，产生的SQL超过slave一个SQL线程能承受的范围，延时就产生了。</p>\n</blockquote>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show status # Seconds_Behind_Master查看从库落后多长时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MySQL主从同步解决方案</p>\n<ol>\n<li><p>半同步复制——解决数据丢失问题，但会增加延迟。</p>\n<p>默认是异步复制的方式，master并不关心slave数据有没有写入成功。</p>\n<p>从库写入relay_log成功才返回ack消息，然后才返回客户端。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200419175312840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70#pic_left\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>多库并行复制——解决从库复制延迟问题</p>\n<p>多启了几个线程</p>\n</li>\n</ol>\n</li>\n<li><h5 id=\"常见主从延迟原因及解决方案\"><a href=\"#常见主从延迟原因及解决方案\" class=\"headerlink\" title=\"常见主从延迟原因及解决方案\"></a>常见主从延迟原因及解决方案</h5><ol>\n<li>SQL执行速度慢：优化索引</li>\n<li>批量DML：通过缓存等方式降低DB并发压力</li>\n<li>大事务，耗时长：事务拆解，移除不必要事务</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"MySQL中varchar与char的区别以及char-10-中的10代表的涵义？\"><a href=\"#MySQL中varchar与char的区别以及char-10-中的10代表的涵义？\" class=\"headerlink\" title=\"MySQL中varchar与char的区别以及char(10)中的10代表的涵义？\"></a>MySQL中varchar与char的区别以及char(10)中的10代表的涵义？</h3><ul>\n<li>从字面上看varchar是变长，char是定长，实际是这样吗？如果使用utf8进行编码有什么不同？</li>\n<li>在utf8下char(10)代表最小可以存储10字节的字符，最大可以存储30字节的字符。也就意味着变长长度列表中会记录char数据类型的长度。</li>\n<li>在多字节字符集（如：utf8)的情况下，char和varchar的实际存储都是变长字符类型。</li>\n<li>char(10)最小存储10个字节，如果不足用0x20（空格）补足，因此在InnoDB utf8编码集下更推荐使用varchar。</li>\n</ul>\n<p>持续更新…</p>\n"},{"title":"Redis-SortedSet排行榜同分","comments":1,"date":"2021-03-07T10:47:18.000Z","author":null,"_content":"\n#### 排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\n1. 谁排名靠前，按需求展示。\n2. 同分名次并列。\n\n#### 同分不同名\nSortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。\n> 如 1/timestamp 或 1/(时间戳最大值-timestamp)，这里可能有精度问题注意一下。\n\n#### 同分同名次\n这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。\n\n - 两个SortedSet，一个Hash\nA SortedSet 放所有排名信息 member score\nB SortedSet 放不重复的分数排名 member和score都用A中的score\nC Hash记录 score 及 该分数成员的数量\n\n - 数据更新\n分数增加或减少\n1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。\n2.C key新的分数下团的数量加1。\n3.A key正常增加分数。\n\n- 存在的问题：\n两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。\n\n- 解决方案：\n如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。","source":"_posts/2021-03-07-Redis-SortedSet排行榜同分.md","raw":"---\ntitle: Redis-SortedSet排行榜同分\ncomments: true\ndate: 2021-03-07 18:47:18\nauthor:\ntags:\n - Redis\ncategories:\n - 中间件\n---\n\n#### 排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\n1. 谁排名靠前，按需求展示。\n2. 同分名次并列。\n\n#### 同分不同名\nSortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。\n> 如 1/timestamp 或 1/(时间戳最大值-timestamp)，这里可能有精度问题注意一下。\n\n#### 同分同名次\n这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。\n\n - 两个SortedSet，一个Hash\nA SortedSet 放所有排名信息 member score\nB SortedSet 放不重复的分数排名 member和score都用A中的score\nC Hash记录 score 及 该分数成员的数量\n\n - 数据更新\n分数增加或减少\n1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。\n2.C key新的分数下团的数量加1。\n3.A key正常增加分数。\n\n- 存在的问题：\n两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。\n\n- 解决方案：\n如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。","slug":"Redis-SortedSet排行榜同分","published":1,"updated":"2021-03-07T10:48:23.004Z","_id":"cklz174mv003j6rs6hixlaizp","layout":"post","photos":[],"link":"","content":"<h4 id=\"排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\"><a href=\"#排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\" class=\"headerlink\" title=\"排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\"></a>排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：</h4><ol>\n<li>谁排名靠前，按需求展示。</li>\n<li>同分名次并列。</li>\n</ol>\n<h4 id=\"同分不同名\"><a href=\"#同分不同名\" class=\"headerlink\" title=\"同分不同名\"></a>同分不同名</h4><p>SortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。</p>\n<blockquote>\n<p>如 1/timestamp 或 1/(时间戳最大值-timestamp)，这里可能有精度问题注意一下。</p>\n</blockquote>\n<h4 id=\"同分同名次\"><a href=\"#同分同名次\" class=\"headerlink\" title=\"同分同名次\"></a>同分同名次</h4><p>这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。</p>\n<ul>\n<li><p>两个SortedSet，一个Hash<br>A SortedSet 放所有排名信息 member score<br>B SortedSet 放不重复的分数排名 member和score都用A中的score<br>C Hash记录 score 及 该分数成员的数量</p>\n</li>\n<li><p>数据更新<br>分数增加或减少</p>\n</li>\n</ul>\n<p>1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。<br>2.C key新的分数下团的数量加1。<br>3.A key正常增加分数。</p>\n<ul>\n<li><p>存在的问题：<br>两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。</p>\n</li>\n<li><p>解决方案：<br>如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\"><a href=\"#排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\" class=\"headerlink\" title=\"排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：\"></a>排行榜可以使用SortedSet，但是如果同分的时候会有两种相对难搞的情况：</h4><ol>\n<li>谁排名靠前，按需求展示。</li>\n<li>同分名次并列。</li>\n</ol>\n<h4 id=\"同分不同名\"><a href=\"#同分不同名\" class=\"headerlink\" title=\"同分不同名\"></a>同分不同名</h4><p>SortedSet score支持浮点数，只要给每个score加上对应的小数，就能实现按先后达到目标值的排序进行展示。</p>\n<blockquote>\n<p>如 1/timestamp 或 1/(时间戳最大值-timestamp)，这里可能有精度问题注意一下。</p>\n</blockquote>\n<h4 id=\"同分同名次\"><a href=\"#同分同名次\" class=\"headerlink\" title=\"同分同名次\"></a>同分同名次</h4><p>这时一个SortedSet 就不能满足需求了，因为不知道前面有多少个同分的成员。</p>\n<ul>\n<li><p>两个SortedSet，一个Hash<br>A SortedSet 放所有排名信息 member score<br>B SortedSet 放不重复的分数排名 member和score都用A中的score<br>C Hash记录 score 及 该分数成员的数量</p>\n</li>\n<li><p>数据更新<br>分数增加或减少</p>\n</li>\n</ul>\n<p>1.检查C key中原分数下成员的数量，并减1，如果数量为0，删除在 B key中对应分数；检查新的分数是否已经在B key中，如果没有，加进去。<br>2.C key新的分数下团的数量加1。<br>3.A key正常增加分数。</p>\n<ul>\n<li><p>存在的问题：<br>两次分页请求可能存在排名变化，导致获取的数据重复的丢失的情况。</p>\n</li>\n<li><p>解决方案：<br>如果不能接受两次请求间排名变化导致的数据误差，可以给榜单做快照，请求时将快照编号带给服务端来解决。</p>\n</li>\n</ul>\n"},{"title":"Golang-9宫格头像生成","comments":1,"date":"2021-03-07T10:49:37.000Z","author":null,"_content":"\n### 先看效果\n- 头像间有间隔\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200303144245619.png)\n- 头像间无间隔\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200303144310558.png)\n\n### 代码\n1. 网络图片下载到本地\n```go\nfunc multiGetImages(urls []string, dir string, prefix string)(localPath []string){\n\tvar w = sync.WaitGroup{}\n\tw.Add(len(urls))\n\ttimestamp := time.Now().UnixNano()\n\tfor i, url :=range urls {\n\t\tname := fmt.Sprintf(\"%s/%s_%d_%d.png\", dir, prefix, timestamp, i)\n\t\tlocalPath = append(localPath, name)\n\t\tgo downloadImage(url, name, &w)\n\t}\n\tw.Wait()\n\treturn\n}\n\nfunc downloadImage(url string, imgName string, wg *sync.WaitGroup){\n\tdefer wg.Done()\n\tout, err := os.Create(imgName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer out.Close()\n\tclient := http.Client{Timeout: 2 * time.Second}\n\tresp, err := client.Get(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tpix, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t_, err = io.Copy(out, bytes.NewReader(pix))\n\treturn\n}\n```\n2. 图片拼接\n```go\nfunc imageCompose(imagePath string, localPaths []string, gap int) {\n\timageSize := 80\n\timageRow := int(math.Sqrt(float64(len(localPaths)))) // 根据传入图片数量判断行列数量\n\timageCol := imageRow\n\trowOffset := gap\n\tcolOffset := gap\n\tbackImg := imaging.New(imageSize*imageRow+gap*(imageCol+1), imageSize*imageCol+gap*(imageRow+1), color.NRGBA{255, 255, 255, 255})\n\ttempRow, tempCol := 1, 1\n\tfor tempRow < imageRow+1 {\n\t\tfor tempCol < imageCol+1 {\n\t\t\timgIndex := imageCol*(tempRow-1) + tempCol - 1\n\t\t\tresizeImg, err := imaging.Open(localPaths[imgIndex])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t\t\tresizeImg = imaging.Blur(imaging.Resize(resizeImg, imageSize, imageSize, imaging.Lanczos), 2) // 加了模糊操作\n\t\t\tbackImg = imaging.Paste(backImg, resizeImg, image.Pt((tempCol-1)*imageSize+colOffset, (tempRow-1)*imageSize+rowOffset))\n\t\t\ttempCol += 1\n\t\t\tcolOffset += gap\n\t\t}\n\t\ttempRow += 1\n\t\trowOffset += gap\n\t\ttempCol = 1\n\t\tcolOffset = gap\n\t}\n\terr := imaging.Save(backImg, imagePath)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\treturn\n}\n```\n\n3. 删除临时图片\n```go\nfunc removeFile(filePaths []string){\n\tfor _,url := range filePaths{\n\t\terr := os.RemoveAll(url)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}\n}\n```\n","source":"_posts/2021-03-07-Golang-9宫格头像生成.md","raw":"---\ntitle: Golang-9宫格头像生成\ncomments: true\ndate: 2021-03-07 18:49:37\nauthor:\ntags:\n - Golang\n - 图片\ncategories:\n - 后端开发\n---\n\n### 先看效果\n- 头像间有间隔\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200303144245619.png)\n- 头像间无间隔\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200303144310558.png)\n\n### 代码\n1. 网络图片下载到本地\n```go\nfunc multiGetImages(urls []string, dir string, prefix string)(localPath []string){\n\tvar w = sync.WaitGroup{}\n\tw.Add(len(urls))\n\ttimestamp := time.Now().UnixNano()\n\tfor i, url :=range urls {\n\t\tname := fmt.Sprintf(\"%s/%s_%d_%d.png\", dir, prefix, timestamp, i)\n\t\tlocalPath = append(localPath, name)\n\t\tgo downloadImage(url, name, &w)\n\t}\n\tw.Wait()\n\treturn\n}\n\nfunc downloadImage(url string, imgName string, wg *sync.WaitGroup){\n\tdefer wg.Done()\n\tout, err := os.Create(imgName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer out.Close()\n\tclient := http.Client{Timeout: 2 * time.Second}\n\tresp, err := client.Get(url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tpix, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t_, err = io.Copy(out, bytes.NewReader(pix))\n\treturn\n}\n```\n2. 图片拼接\n```go\nfunc imageCompose(imagePath string, localPaths []string, gap int) {\n\timageSize := 80\n\timageRow := int(math.Sqrt(float64(len(localPaths)))) // 根据传入图片数量判断行列数量\n\timageCol := imageRow\n\trowOffset := gap\n\tcolOffset := gap\n\tbackImg := imaging.New(imageSize*imageRow+gap*(imageCol+1), imageSize*imageCol+gap*(imageRow+1), color.NRGBA{255, 255, 255, 255})\n\ttempRow, tempCol := 1, 1\n\tfor tempRow < imageRow+1 {\n\t\tfor tempCol < imageCol+1 {\n\t\t\timgIndex := imageCol*(tempRow-1) + tempCol - 1\n\t\t\tresizeImg, err := imaging.Open(localPaths[imgIndex])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t\t\tresizeImg = imaging.Blur(imaging.Resize(resizeImg, imageSize, imageSize, imaging.Lanczos), 2) // 加了模糊操作\n\t\t\tbackImg = imaging.Paste(backImg, resizeImg, image.Pt((tempCol-1)*imageSize+colOffset, (tempRow-1)*imageSize+rowOffset))\n\t\t\ttempCol += 1\n\t\t\tcolOffset += gap\n\t\t}\n\t\ttempRow += 1\n\t\trowOffset += gap\n\t\ttempCol = 1\n\t\tcolOffset = gap\n\t}\n\terr := imaging.Save(backImg, imagePath)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\treturn\n}\n```\n\n3. 删除临时图片\n```go\nfunc removeFile(filePaths []string){\n\tfor _,url := range filePaths{\n\t\terr := os.RemoveAll(url)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}\n}\n```\n","slug":"Golang-9宫格头像生成","published":1,"updated":"2021-03-07T10:50:46.069Z","_id":"cklz1a3jp003o6rs672sh2a0g","layout":"post","photos":[],"link":"","content":"<h3 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h3><ul>\n<li>头像间有间隔<br><img src=\"https://img-blog.csdnimg.cn/20200303144245619.png\" alt=\"在这里插入图片描述\"></li>\n<li>头像间无间隔<br><img src=\"https://img-blog.csdnimg.cn/20200303144310558.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li><p>网络图片下载到本地</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">multiGetImages</span><span class=\"token punctuation\">(</span>urls <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> dir <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> prefix <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>localPath <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttimestamp <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span><span class=\"token keyword\">range</span> urls <span class=\"token punctuation\">&#123;</span>\n\t\tname <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s/%s_%d_%d.png\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t\tlocalPath <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>localPath<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">downloadImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">downloadImage</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> imgName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tout<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>imgName<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tclient <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">&#123;</span>Timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">&#125;</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>图片拼接</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">imageCompose</span><span class=\"token punctuation\">(</span>imagePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> localPaths <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gap <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\timageSize <span class=\"token operator\">:=</span> <span class=\"token number\">80</span>\n\timageRow <span class=\"token operator\">:=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>localPaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据传入图片数量判断行列数量</span>\n\timageCol <span class=\"token operator\">:=</span> imageRow\n\trowOffset <span class=\"token operator\">:=</span> gap\n\tcolOffset <span class=\"token operator\">:=</span> gap\n\tbackImg <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>imageSize<span class=\"token operator\">*</span>imageRow<span class=\"token operator\">+</span>gap<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>imageCol<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> imageSize<span class=\"token operator\">*</span>imageCol<span class=\"token operator\">+</span>gap<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>imageRow<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>NRGBA<span class=\"token punctuation\">&#123;</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\ttempRow<span class=\"token punctuation\">,</span> tempCol <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">for</span> tempRow <span class=\"token operator\">&lt;</span> imageRow<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> tempCol <span class=\"token operator\">&lt;</span> imageCol<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\timgIndex <span class=\"token operator\">:=</span> imageCol<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>tempRow<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tempCol <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t\t\tresizeImg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>localPaths<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tresizeImg <span class=\"token operator\">=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Blur</span><span class=\"token punctuation\">(</span>imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Resize</span><span class=\"token punctuation\">(</span>resizeImg<span class=\"token punctuation\">,</span> imageSize<span class=\"token punctuation\">,</span> imageSize<span class=\"token punctuation\">,</span> imaging<span class=\"token punctuation\">.</span>Lanczos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加了模糊操作</span>\n\t\t\tbackImg <span class=\"token operator\">=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Paste</span><span class=\"token punctuation\">(</span>backImg<span class=\"token punctuation\">,</span> resizeImg<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">Pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tempCol<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>imageSize<span class=\"token operator\">+</span>colOffset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tempRow<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>imageSize<span class=\"token operator\">+</span>rowOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\ttempCol <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t\tcolOffset <span class=\"token operator\">+=</span> gap\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttempRow <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\trowOffset <span class=\"token operator\">+=</span> gap\n\t\ttempCol <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\tcolOffset <span class=\"token operator\">=</span> gap\n\t<span class=\"token punctuation\">&#125;</span>\n\terr <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>backImg<span class=\"token punctuation\">,</span> imagePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>删除临时图片</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span>filePaths <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filePaths<span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h3><ul>\n<li>头像间有间隔<br><img src=\"https://img-blog.csdnimg.cn/20200303144245619.png\" alt=\"在这里插入图片描述\"></li>\n<li>头像间无间隔<br><img src=\"https://img-blog.csdnimg.cn/20200303144310558.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ol>\n<li><p>网络图片下载到本地</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">multiGetImages</span><span class=\"token punctuation\">(</span>urls <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> dir <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> prefix <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>localPath <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttimestamp <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span><span class=\"token keyword\">range</span> urls <span class=\"token punctuation\">&#123;</span>\n\t\tname <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s/%s_%d_%d.png\"</span><span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t\tlocalPath <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>localPath<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">downloadImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">downloadImage</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> imgName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tout<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>imgName<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tclient <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">&#123;</span>Timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">&#125;</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpix<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>图片拼接</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">imageCompose</span><span class=\"token punctuation\">(</span>imagePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> localPaths <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gap <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\timageSize <span class=\"token operator\">:=</span> <span class=\"token number\">80</span>\n\timageRow <span class=\"token operator\">:=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>localPaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据传入图片数量判断行列数量</span>\n\timageCol <span class=\"token operator\">:=</span> imageRow\n\trowOffset <span class=\"token operator\">:=</span> gap\n\tcolOffset <span class=\"token operator\">:=</span> gap\n\tbackImg <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>imageSize<span class=\"token operator\">*</span>imageRow<span class=\"token operator\">+</span>gap<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>imageCol<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> imageSize<span class=\"token operator\">*</span>imageCol<span class=\"token operator\">+</span>gap<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>imageRow<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>NRGBA<span class=\"token punctuation\">&#123;</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\ttempRow<span class=\"token punctuation\">,</span> tempCol <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">for</span> tempRow <span class=\"token operator\">&lt;</span> imageRow<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> tempCol <span class=\"token operator\">&lt;</span> imageCol<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\timgIndex <span class=\"token operator\">:=</span> imageCol<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>tempRow<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tempCol <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t\t\tresizeImg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>localPaths<span class=\"token punctuation\">[</span>imgIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tresizeImg <span class=\"token operator\">=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Blur</span><span class=\"token punctuation\">(</span>imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Resize</span><span class=\"token punctuation\">(</span>resizeImg<span class=\"token punctuation\">,</span> imageSize<span class=\"token punctuation\">,</span> imageSize<span class=\"token punctuation\">,</span> imaging<span class=\"token punctuation\">.</span>Lanczos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加了模糊操作</span>\n\t\t\tbackImg <span class=\"token operator\">=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Paste</span><span class=\"token punctuation\">(</span>backImg<span class=\"token punctuation\">,</span> resizeImg<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">Pt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tempCol<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>imageSize<span class=\"token operator\">+</span>colOffset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tempRow<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>imageSize<span class=\"token operator\">+</span>rowOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\ttempCol <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t\tcolOffset <span class=\"token operator\">+=</span> gap\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttempRow <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\trowOffset <span class=\"token operator\">+=</span> gap\n\t\ttempCol <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\tcolOffset <span class=\"token operator\">=</span> gap\n\t<span class=\"token punctuation\">&#125;</span>\n\terr <span class=\"token operator\">:=</span> imaging<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>backImg<span class=\"token punctuation\">,</span> imagePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>删除临时图片</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span>filePaths <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span>url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> filePaths<span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n"},{"title":"Mysql-自增列AUTO_INCREMENT","comments":1,"date":"2021-03-07T10:52:58.000Z","author":null,"_content":"\n### AUTO_INCREMENT\n###### 两种情况\n\n1、在载入语句执行前，已经**不确定**要插入多少条记录。\n\n- 在执行插入语句时在==表级别==加一个==auto-inc锁==，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。\n> AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。\n\n2、插入语句执行前就**确定**要插入多少条记录。\n- 采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，==立马释放==，不需要等语句执行。\n\n> InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。\n> 1. innodb_autoinc_lock_mode=0 一律采用auto-inc锁。\n> 2. innodb_autoinc_lock_mode=2 一律采用轻量级锁。\n> 3. innodb_autoinc_lock_mode=1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。\n> \n> 当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。\n","source":"_posts/2021-03-07-Mysql-自增列AUTO-INCREMENT.md","raw":"---\ntitle: Mysql-自增列AUTO_INCREMENT\ncomments: true\ndate: 2021-03-07 18:52:58\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### AUTO_INCREMENT\n###### 两种情况\n\n1、在载入语句执行前，已经**不确定**要插入多少条记录。\n\n- 在执行插入语句时在==表级别==加一个==auto-inc锁==，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。\n> AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。\n\n2、插入语句执行前就**确定**要插入多少条记录。\n- 采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，==立马释放==，不需要等语句执行。\n\n> InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。\n> 1. innodb_autoinc_lock_mode=0 一律采用auto-inc锁。\n> 2. innodb_autoinc_lock_mode=2 一律采用轻量级锁。\n> 3. innodb_autoinc_lock_mode=1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。\n> \n> 当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。\n","slug":"Mysql-自增列AUTO-INCREMENT","published":1,"updated":"2021-03-07T10:53:17.283Z","_id":"cklz1eesp003t6rs640uq2rsf","layout":"post","photos":[],"link":"","content":"<h3 id=\"AUTO-INCREMENT\"><a href=\"#AUTO-INCREMENT\" class=\"headerlink\" title=\"AUTO_INCREMENT\"></a>AUTO_INCREMENT</h3><h6 id=\"两种情况\"><a href=\"#两种情况\" class=\"headerlink\" title=\"两种情况\"></a>两种情况</h6><p>1、在载入语句执行前，已经<strong>不确定</strong>要插入多少条记录。</p>\n<ul>\n<li>在执行插入语句时在==表级别==加一个==auto-inc锁==，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。<blockquote>\n<p>AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。</p>\n</blockquote>\n</li>\n</ul>\n<p>2、插入语句执行前就<strong>确定</strong>要插入多少条记录。</p>\n<ul>\n<li>采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，==立马释放==，不需要等语句执行。</li>\n</ul>\n<blockquote>\n<p>InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。</p>\n<ol>\n<li>innodb_autoinc_lock_mode=0 一律采用auto-inc锁。</li>\n<li>innodb_autoinc_lock_mode=2 一律采用轻量级锁。</li>\n<li>innodb_autoinc_lock_mode=1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</li>\n</ol>\n<p>当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"AUTO-INCREMENT\"><a href=\"#AUTO-INCREMENT\" class=\"headerlink\" title=\"AUTO_INCREMENT\"></a>AUTO_INCREMENT</h3><h6 id=\"两种情况\"><a href=\"#两种情况\" class=\"headerlink\" title=\"两种情况\"></a>两种情况</h6><p>1、在载入语句执行前，已经<strong>不确定</strong>要插入多少条记录。</p>\n<ul>\n<li>在执行插入语句时在==表级别==加一个==auto-inc锁==，然后为每条待插入记录的auto-increment修饰的列分配递增的值，语句执行结束后，再把auto-inc锁释放掉。一个事务再持有auto-inc锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。<blockquote>\n<p>AUTO-INC锁的作用范围只是单个插入语句，插入语句执行完成后，这个锁就被释放了，跟我们之前介绍的锁在事务结束时释放是不一样的。</p>\n</blockquote>\n</li>\n</ul>\n<p>2、插入语句执行前就<strong>确定</strong>要插入多少条记录。</p>\n<ul>\n<li>采用一个轻量级的锁，在为插入语句生成auto-increment修饰的列的值时获取一下这个轻量级锁，生成需要用到的auto-increment列的值后，==立马释放==，不需要等语句执行。</li>\n</ul>\n<blockquote>\n<p>InnoDB中提供系统变量 innodb_autoinc_lock_mode 控制用以上哪种方式进行自增的赋值。</p>\n<ol>\n<li>innodb_autoinc_lock_mode=0 一律采用auto-inc锁。</li>\n<li>innodb_autoinc_lock_mode=2 一律采用轻量级锁。</li>\n<li>innodb_autoinc_lock_mode=1 混着来，插入记录数量确定时采用轻量级锁，不确定时使用AUTO-INC锁。</li>\n</ol>\n<p>当一律采用轻量级锁时，可能会造成不同事物中插入语句生成的值时交叉的，在有主从复制的场景中是不安全的。</p>\n</blockquote>\n"},{"title":"常用在线网站","comments":1,"date":"2021-03-07T11:10:55.000Z","author":null,"_content":"\n欢迎补充\n\n#### curl 命令转换\n[https://curl.trillworks.com/](https://curl.trillworks.com/)\n\n#### curl-to-Go\n[https://mholt.github.io/curl-to-go/](https://mholt.github.io/curl-to-go/)\n\n#### JSON-to-Go\n[https://mholt.github.io/json-to-go/](https://mholt.github.io/json-to-go/)\n\n#### mysql 转 ES 工具\n[http://www.ischoolbar.com/EsParser/](http://www.ischoolbar.com/EsParser/)\n\n#### json格式化、压缩、转义\n[http://www.bejson.com/](http://www.bejson.com/)\n\n#### 代码对比\n[https://tool.oschina.net/diff](https://tool.oschina.net/diff)\n\n#### corntab\n[https://tool.lu/crontab/](https://tool.lu/crontab/)\n\n#### 时间戳转换\n[https://unixtime.51240.com/](https://unixtime.51240.com/)\n\n#### URL编解码\n[http://www.jsons.cn/urlencode/](http://www.jsons.cn/urlencode/)\n\n#### 中文字符与Unicode字符相互转换\n[https://javawind.net/tools/native2ascii.jsp?action=transform](https://javawind.net/tools/native2ascii.jsp?action=transform)\n\n#### 解压缩\n[https://cloudconvert.com/extract-7z-archive](https://cloudconvert.com/extract-7z-archive)\n\n#### 流程图\n[https://app.diagrams.net/](https://app.diagrams.net/)\n\n#### Golang程序员开发效率神器汇总\n[https://juejin.cn/post/6844904007169736718](https://juejin.cn/post/6844904007169736718)\n\n## 前端\n\n#### 加载等待CSS、GIF图\n\n[https://preloaders.net/](https://preloaders.net/)\n[https://loading.io/](https://loading.io/)\n\n#### CSS代码兼容补全\n[http://autoprefixer.github.io/](http://autoprefixer.github.io/)\n\n\n","source":"_posts/2021-03-07-常用在线网站.md","raw":"---\ntitle: 常用在线网站\ncomments: true\ndate: 2021-03-07 19:10:55\nauthor:\ntags:\n - 工具\ncategories:\n - 效率工具\n---\n\n欢迎补充\n\n#### curl 命令转换\n[https://curl.trillworks.com/](https://curl.trillworks.com/)\n\n#### curl-to-Go\n[https://mholt.github.io/curl-to-go/](https://mholt.github.io/curl-to-go/)\n\n#### JSON-to-Go\n[https://mholt.github.io/json-to-go/](https://mholt.github.io/json-to-go/)\n\n#### mysql 转 ES 工具\n[http://www.ischoolbar.com/EsParser/](http://www.ischoolbar.com/EsParser/)\n\n#### json格式化、压缩、转义\n[http://www.bejson.com/](http://www.bejson.com/)\n\n#### 代码对比\n[https://tool.oschina.net/diff](https://tool.oschina.net/diff)\n\n#### corntab\n[https://tool.lu/crontab/](https://tool.lu/crontab/)\n\n#### 时间戳转换\n[https://unixtime.51240.com/](https://unixtime.51240.com/)\n\n#### URL编解码\n[http://www.jsons.cn/urlencode/](http://www.jsons.cn/urlencode/)\n\n#### 中文字符与Unicode字符相互转换\n[https://javawind.net/tools/native2ascii.jsp?action=transform](https://javawind.net/tools/native2ascii.jsp?action=transform)\n\n#### 解压缩\n[https://cloudconvert.com/extract-7z-archive](https://cloudconvert.com/extract-7z-archive)\n\n#### 流程图\n[https://app.diagrams.net/](https://app.diagrams.net/)\n\n#### Golang程序员开发效率神器汇总\n[https://juejin.cn/post/6844904007169736718](https://juejin.cn/post/6844904007169736718)\n\n## 前端\n\n#### 加载等待CSS、GIF图\n\n[https://preloaders.net/](https://preloaders.net/)\n[https://loading.io/](https://loading.io/)\n\n#### CSS代码兼容补全\n[http://autoprefixer.github.io/](http://autoprefixer.github.io/)\n\n\n","slug":"常用在线网站","published":1,"updated":"2021-03-07T11:21:31.387Z","_id":"cklz21ht30000jvs6bcy38rs6","layout":"post","photos":[],"link":"","content":"<p>欢迎补充</p>\n<h4 id=\"curl-命令转换\"><a href=\"#curl-命令转换\" class=\"headerlink\" title=\"curl 命令转换\"></a>curl 命令转换</h4><p><a href=\"https://curl.trillworks.com/\">https://curl.trillworks.com/</a></p>\n<h4 id=\"curl-to-Go\"><a href=\"#curl-to-Go\" class=\"headerlink\" title=\"curl-to-Go\"></a>curl-to-Go</h4><p><a href=\"https://mholt.github.io/curl-to-go/\">https://mholt.github.io/curl-to-go/</a></p>\n<h4 id=\"JSON-to-Go\"><a href=\"#JSON-to-Go\" class=\"headerlink\" title=\"JSON-to-Go\"></a>JSON-to-Go</h4><p><a href=\"https://mholt.github.io/json-to-go/\">https://mholt.github.io/json-to-go/</a></p>\n<h4 id=\"mysql-转-ES-工具\"><a href=\"#mysql-转-ES-工具\" class=\"headerlink\" title=\"mysql 转 ES 工具\"></a>mysql 转 ES 工具</h4><p><a href=\"http://www.ischoolbar.com/EsParser/\">http://www.ischoolbar.com/EsParser/</a></p>\n<h4 id=\"json格式化、压缩、转义\"><a href=\"#json格式化、压缩、转义\" class=\"headerlink\" title=\"json格式化、压缩、转义\"></a>json格式化、压缩、转义</h4><p><a href=\"http://www.bejson.com/\">http://www.bejson.com/</a></p>\n<h4 id=\"代码对比\"><a href=\"#代码对比\" class=\"headerlink\" title=\"代码对比\"></a>代码对比</h4><p><a href=\"https://tool.oschina.net/diff\">https://tool.oschina.net/diff</a></p>\n<h4 id=\"corntab\"><a href=\"#corntab\" class=\"headerlink\" title=\"corntab\"></a>corntab</h4><p><a href=\"https://tool.lu/crontab/\">https://tool.lu/crontab/</a></p>\n<h4 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h4><p><a href=\"https://unixtime.51240.com/\">https://unixtime.51240.com/</a></p>\n<h4 id=\"URL编解码\"><a href=\"#URL编解码\" class=\"headerlink\" title=\"URL编解码\"></a>URL编解码</h4><p><a href=\"http://www.jsons.cn/urlencode/\">http://www.jsons.cn/urlencode/</a></p>\n<h4 id=\"中文字符与Unicode字符相互转换\"><a href=\"#中文字符与Unicode字符相互转换\" class=\"headerlink\" title=\"中文字符与Unicode字符相互转换\"></a>中文字符与Unicode字符相互转换</h4><p><a href=\"https://javawind.net/tools/native2ascii.jsp?action=transform\">https://javawind.net/tools/native2ascii.jsp?action=transform</a></p>\n<h4 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h4><p><a href=\"https://cloudconvert.com/extract-7z-archive\">https://cloudconvert.com/extract-7z-archive</a></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><a href=\"https://app.diagrams.net/\">https://app.diagrams.net/</a></p>\n<h4 id=\"Golang程序员开发效率神器汇总\"><a href=\"#Golang程序员开发效率神器汇总\" class=\"headerlink\" title=\"Golang程序员开发效率神器汇总\"></a>Golang程序员开发效率神器汇总</h4><p><a href=\"https://juejin.cn/post/6844904007169736718\">https://juejin.cn/post/6844904007169736718</a></p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h4 id=\"加载等待CSS、GIF图\"><a href=\"#加载等待CSS、GIF图\" class=\"headerlink\" title=\"加载等待CSS、GIF图\"></a>加载等待CSS、GIF图</h4><p><a href=\"https://preloaders.net/\">https://preloaders.net/</a><br><a href=\"https://loading.io/\">https://loading.io/</a></p>\n<h4 id=\"CSS代码兼容补全\"><a href=\"#CSS代码兼容补全\" class=\"headerlink\" title=\"CSS代码兼容补全\"></a>CSS代码兼容补全</h4><p><a href=\"http://autoprefixer.github.io/\">http://autoprefixer.github.io/</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>欢迎补充</p>\n<h4 id=\"curl-命令转换\"><a href=\"#curl-命令转换\" class=\"headerlink\" title=\"curl 命令转换\"></a>curl 命令转换</h4><p><a href=\"https://curl.trillworks.com/\">https://curl.trillworks.com/</a></p>\n<h4 id=\"curl-to-Go\"><a href=\"#curl-to-Go\" class=\"headerlink\" title=\"curl-to-Go\"></a>curl-to-Go</h4><p><a href=\"https://mholt.github.io/curl-to-go/\">https://mholt.github.io/curl-to-go/</a></p>\n<h4 id=\"JSON-to-Go\"><a href=\"#JSON-to-Go\" class=\"headerlink\" title=\"JSON-to-Go\"></a>JSON-to-Go</h4><p><a href=\"https://mholt.github.io/json-to-go/\">https://mholt.github.io/json-to-go/</a></p>\n<h4 id=\"mysql-转-ES-工具\"><a href=\"#mysql-转-ES-工具\" class=\"headerlink\" title=\"mysql 转 ES 工具\"></a>mysql 转 ES 工具</h4><p><a href=\"http://www.ischoolbar.com/EsParser/\">http://www.ischoolbar.com/EsParser/</a></p>\n<h4 id=\"json格式化、压缩、转义\"><a href=\"#json格式化、压缩、转义\" class=\"headerlink\" title=\"json格式化、压缩、转义\"></a>json格式化、压缩、转义</h4><p><a href=\"http://www.bejson.com/\">http://www.bejson.com/</a></p>\n<h4 id=\"代码对比\"><a href=\"#代码对比\" class=\"headerlink\" title=\"代码对比\"></a>代码对比</h4><p><a href=\"https://tool.oschina.net/diff\">https://tool.oschina.net/diff</a></p>\n<h4 id=\"corntab\"><a href=\"#corntab\" class=\"headerlink\" title=\"corntab\"></a>corntab</h4><p><a href=\"https://tool.lu/crontab/\">https://tool.lu/crontab/</a></p>\n<h4 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h4><p><a href=\"https://unixtime.51240.com/\">https://unixtime.51240.com/</a></p>\n<h4 id=\"URL编解码\"><a href=\"#URL编解码\" class=\"headerlink\" title=\"URL编解码\"></a>URL编解码</h4><p><a href=\"http://www.jsons.cn/urlencode/\">http://www.jsons.cn/urlencode/</a></p>\n<h4 id=\"中文字符与Unicode字符相互转换\"><a href=\"#中文字符与Unicode字符相互转换\" class=\"headerlink\" title=\"中文字符与Unicode字符相互转换\"></a>中文字符与Unicode字符相互转换</h4><p><a href=\"https://javawind.net/tools/native2ascii.jsp?action=transform\">https://javawind.net/tools/native2ascii.jsp?action=transform</a></p>\n<h4 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h4><p><a href=\"https://cloudconvert.com/extract-7z-archive\">https://cloudconvert.com/extract-7z-archive</a></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><a href=\"https://app.diagrams.net/\">https://app.diagrams.net/</a></p>\n<h4 id=\"Golang程序员开发效率神器汇总\"><a href=\"#Golang程序员开发效率神器汇总\" class=\"headerlink\" title=\"Golang程序员开发效率神器汇总\"></a>Golang程序员开发效率神器汇总</h4><p><a href=\"https://juejin.cn/post/6844904007169736718\">https://juejin.cn/post/6844904007169736718</a></p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h4 id=\"加载等待CSS、GIF图\"><a href=\"#加载等待CSS、GIF图\" class=\"headerlink\" title=\"加载等待CSS、GIF图\"></a>加载等待CSS、GIF图</h4><p><a href=\"https://preloaders.net/\">https://preloaders.net/</a><br><a href=\"https://loading.io/\">https://loading.io/</a></p>\n<h4 id=\"CSS代码兼容补全\"><a href=\"#CSS代码兼容补全\" class=\"headerlink\" title=\"CSS代码兼容补全\"></a>CSS代码兼容补全</h4><p><a href=\"http://autoprefixer.github.io/\">http://autoprefixer.github.io/</a></p>\n"},{"title":"Python-BloomFilter实现","comments":1,"date":"2021-03-07T11:23:29.000Z","author":null,"_content":"\n- 学习笔记，如有不足之处，欢迎指正。\n\n#### 类定义\n```python\nimport math\nimport time\nimport redis\nfrom hashlib import md5\n\n\nclass SimpleHash(object):\n    def __init__(self, cap, seed):\n        self.cap = cap\n        self.seed = seed\n\n    def hash(self, value):\n        ret = 0\n        for i in range(len(value)):\n            ret += self.seed * ret + ord(value[i])\n        return (self.cap - 1) & ret\n\n\nclass BloomFilter(object):\n    # 随机种子\n    SEEDS = [543, 460, 171, 876, 796, 607, 650, 81, 837, 545, 591, 946, 846, 521, 913, 636, 878, 735, 414, 372,\n             344, 324, 223, 180, 327, 891, 798, 933, 493, 293, 836, 10, 6, 544, 924, 849, 438, 41, 862, 648, 338,\n             465, 562, 693, 979, 52, 763, 103, 387, 374, 349, 94, 384, 680, 574, 480, 307, 580, 71, 535, 300, 53,\n             481, 519, 644, 219, 686, 236, 424, 326, 244, 212, 909, 202, 951, 56, 812, 901, 926, 250, 507, 739, 371,\n             63, 584, 154, 7, 284, 617, 332, 472, 140, 605, 262, 355, 526, 647, 923, 199, 518]\n\n    def __init__(self, capacity=100000000, error_rate=0.0000001, redis_con=None, key=\"bloomfilter\"):\n        self.bit_size = math.ceil(capacity * math.log2(math.e) * math.log2(1 / error_rate))  # 所需位数\n        self.hash_time = math.ceil(math.log1p(2) * self.bit_size / capacity)  # 最少hash次数\n        self.memery = math.ceil(self.bit_size / 8 / 1024 / 1024)  # 占用多少M内存\n        self.block_num = math.ceil(self.memery / 512)  # 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块\n        self.seeds = self.SEEDS[0:self.hash_time]\n        self.key = key\n        self.N = 2 ** 31 - 1\n        self.hash_func = [SimpleHash(self.bit_size, seed) for seed in self.seeds]\n        self.redis_con = redis_con\n\n    def get_key(self, value):\n        return self.key + str(int(value[0:2], 16) % self.block_num)\n\n    def is_contains(self, str_input):\n        try:\n            if not str_input:\n                return False\n            m5 = md5()\n            m5.update(str_input)\n            str_input = m5.hexdigest()\n            ret = True\n            name = self.get_key(str_input)\n            for f in self.hash_func:\n                loc = f.hash(str_input)\n                ret = ret & self.redis_con.getbit(name, loc)\n            return ret\n        except Exception as e:\n            raise\n\n    def insert(self, str_input):\n        try:\n            m5 = md5()\n            m5.update(str_input)\n            str_input = m5.hexdigest()\n            name = self.get_key(str_input)\n            for f in self.hash_func:\n                loc = f.hash(str_input)\n                self.redis_con.setbit(name, loc, 1)\n        except Exception as e:\n            raise \n```\n#### Test\n\n```python\nif __name__ == '__main__':\n    bloom_filter_redis_conn_args = {\n        \"host\": \"127.0.0.1\",\n        \"port\": \"6379\",\n        \"db\": 0\n    }\n    redis_con = redis.StrictRedis(connection_pool=redis.ConnectionPool(**bloom_filter_redis_conn_args))\n    bloom_filter = BloomFilter(redis_con=redis_con)\n    \n    start_time = time.time()\n    for i in range(6100000, 6101000):\n        bloom_filter.insert(str(i).encode(\"utf-8\"))\n    print(time.time() - start_time)\n    print(bloom_filter.is_contains(\"6100101\".encode(\"utf-8\")))\n```\n\n#### 初步结论（本地测试）\n- 插入1000条耗时在2-4s之间。\n- 插入和查询耗时基本相同。\n\n#### Redis数据查询\n\n```powershell\n➜  ~ redis-cli --bigkeys -i 0.1 -h 127.0.0.1\n\n# Scanning the entire keyspace to find biggest keys as well as\n# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec\n# per 100 SCAN commands (not usually needed).\n\n[00.00%] Biggest string found so far 'bloomfilter0' with 419346305 bytes\n\n-------- summary -------\n\nSampled 1 keys in the keyspace!\nTotal key length in bytes is 12 (avg len 12.00)\n\nBiggest string found 'bloomfilter0' has 419346305 bytes\n\n1 strings with 419346305 bytes (100.00% of keys, avg size 419346305.00)\n0 lists with 0 items (00.00% of keys, avg size 0.00)\n0 hashs with 0 fields (00.00% of keys, avg size 0.00)\n0 streams with 0 entries (00.00% of keys, avg size 0.00)\n0 sets with 0 members (00.00% of keys, avg size 0.00)\n0 zsets with 0 members (00.00% of keys, avg size 0.00)\n```\n可以看到 bloomfilter0 所占内存为400M左右\n","source":"_posts/2021-03-07-Python-BloomFilter实现.md","raw":"---\ntitle: Python-BloomFilter实现\ncomments: true\ndate: 2021-03-07 19:23:29\nauthor:\ntags:\n - Python\n - Redis\ncategories: [\"后端开发\"]\n---\n\n- 学习笔记，如有不足之处，欢迎指正。\n\n#### 类定义\n```python\nimport math\nimport time\nimport redis\nfrom hashlib import md5\n\n\nclass SimpleHash(object):\n    def __init__(self, cap, seed):\n        self.cap = cap\n        self.seed = seed\n\n    def hash(self, value):\n        ret = 0\n        for i in range(len(value)):\n            ret += self.seed * ret + ord(value[i])\n        return (self.cap - 1) & ret\n\n\nclass BloomFilter(object):\n    # 随机种子\n    SEEDS = [543, 460, 171, 876, 796, 607, 650, 81, 837, 545, 591, 946, 846, 521, 913, 636, 878, 735, 414, 372,\n             344, 324, 223, 180, 327, 891, 798, 933, 493, 293, 836, 10, 6, 544, 924, 849, 438, 41, 862, 648, 338,\n             465, 562, 693, 979, 52, 763, 103, 387, 374, 349, 94, 384, 680, 574, 480, 307, 580, 71, 535, 300, 53,\n             481, 519, 644, 219, 686, 236, 424, 326, 244, 212, 909, 202, 951, 56, 812, 901, 926, 250, 507, 739, 371,\n             63, 584, 154, 7, 284, 617, 332, 472, 140, 605, 262, 355, 526, 647, 923, 199, 518]\n\n    def __init__(self, capacity=100000000, error_rate=0.0000001, redis_con=None, key=\"bloomfilter\"):\n        self.bit_size = math.ceil(capacity * math.log2(math.e) * math.log2(1 / error_rate))  # 所需位数\n        self.hash_time = math.ceil(math.log1p(2) * self.bit_size / capacity)  # 最少hash次数\n        self.memery = math.ceil(self.bit_size / 8 / 1024 / 1024)  # 占用多少M内存\n        self.block_num = math.ceil(self.memery / 512)  # 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块\n        self.seeds = self.SEEDS[0:self.hash_time]\n        self.key = key\n        self.N = 2 ** 31 - 1\n        self.hash_func = [SimpleHash(self.bit_size, seed) for seed in self.seeds]\n        self.redis_con = redis_con\n\n    def get_key(self, value):\n        return self.key + str(int(value[0:2], 16) % self.block_num)\n\n    def is_contains(self, str_input):\n        try:\n            if not str_input:\n                return False\n            m5 = md5()\n            m5.update(str_input)\n            str_input = m5.hexdigest()\n            ret = True\n            name = self.get_key(str_input)\n            for f in self.hash_func:\n                loc = f.hash(str_input)\n                ret = ret & self.redis_con.getbit(name, loc)\n            return ret\n        except Exception as e:\n            raise\n\n    def insert(self, str_input):\n        try:\n            m5 = md5()\n            m5.update(str_input)\n            str_input = m5.hexdigest()\n            name = self.get_key(str_input)\n            for f in self.hash_func:\n                loc = f.hash(str_input)\n                self.redis_con.setbit(name, loc, 1)\n        except Exception as e:\n            raise \n```\n#### Test\n\n```python\nif __name__ == '__main__':\n    bloom_filter_redis_conn_args = {\n        \"host\": \"127.0.0.1\",\n        \"port\": \"6379\",\n        \"db\": 0\n    }\n    redis_con = redis.StrictRedis(connection_pool=redis.ConnectionPool(**bloom_filter_redis_conn_args))\n    bloom_filter = BloomFilter(redis_con=redis_con)\n    \n    start_time = time.time()\n    for i in range(6100000, 6101000):\n        bloom_filter.insert(str(i).encode(\"utf-8\"))\n    print(time.time() - start_time)\n    print(bloom_filter.is_contains(\"6100101\".encode(\"utf-8\")))\n```\n\n#### 初步结论（本地测试）\n- 插入1000条耗时在2-4s之间。\n- 插入和查询耗时基本相同。\n\n#### Redis数据查询\n\n```powershell\n➜  ~ redis-cli --bigkeys -i 0.1 -h 127.0.0.1\n\n# Scanning the entire keyspace to find biggest keys as well as\n# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec\n# per 100 SCAN commands (not usually needed).\n\n[00.00%] Biggest string found so far 'bloomfilter0' with 419346305 bytes\n\n-------- summary -------\n\nSampled 1 keys in the keyspace!\nTotal key length in bytes is 12 (avg len 12.00)\n\nBiggest string found 'bloomfilter0' has 419346305 bytes\n\n1 strings with 419346305 bytes (100.00% of keys, avg size 419346305.00)\n0 lists with 0 items (00.00% of keys, avg size 0.00)\n0 hashs with 0 fields (00.00% of keys, avg size 0.00)\n0 streams with 0 entries (00.00% of keys, avg size 0.00)\n0 sets with 0 members (00.00% of keys, avg size 0.00)\n0 zsets with 0 members (00.00% of keys, avg size 0.00)\n```\n可以看到 bloomfilter0 所占内存为400M左右\n","slug":"Python-BloomFilter实现","published":1,"updated":"2021-03-07T11:46:22.470Z","_id":"cklz2hnq00003jvs67nw0dbqb","layout":"post","photos":[],"link":"","content":"<ul>\n<li>学习笔记，如有不足之处，欢迎指正。</li>\n</ul>\n<h4 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> redis\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleHash</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> cap\n        self<span class=\"token punctuation\">.</span>seed <span class=\"token operator\">=</span> seed\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ret <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>seed <span class=\"token operator\">*</span> ret <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> ret\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BloomFilter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 随机种子</span>\n    SEEDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">543</span><span class=\"token punctuation\">,</span> <span class=\"token number\">460</span><span class=\"token punctuation\">,</span> <span class=\"token number\">171</span><span class=\"token punctuation\">,</span> <span class=\"token number\">876</span><span class=\"token punctuation\">,</span> <span class=\"token number\">796</span><span class=\"token punctuation\">,</span> <span class=\"token number\">607</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">837</span><span class=\"token punctuation\">,</span> <span class=\"token number\">545</span><span class=\"token punctuation\">,</span> <span class=\"token number\">591</span><span class=\"token punctuation\">,</span> <span class=\"token number\">946</span><span class=\"token punctuation\">,</span> <span class=\"token number\">846</span><span class=\"token punctuation\">,</span> <span class=\"token number\">521</span><span class=\"token punctuation\">,</span> <span class=\"token number\">913</span><span class=\"token punctuation\">,</span> <span class=\"token number\">636</span><span class=\"token punctuation\">,</span> <span class=\"token number\">878</span><span class=\"token punctuation\">,</span> <span class=\"token number\">735</span><span class=\"token punctuation\">,</span> <span class=\"token number\">414</span><span class=\"token punctuation\">,</span> <span class=\"token number\">372</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">344</span><span class=\"token punctuation\">,</span> <span class=\"token number\">324</span><span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">327</span><span class=\"token punctuation\">,</span> <span class=\"token number\">891</span><span class=\"token punctuation\">,</span> <span class=\"token number\">798</span><span class=\"token punctuation\">,</span> <span class=\"token number\">933</span><span class=\"token punctuation\">,</span> <span class=\"token number\">493</span><span class=\"token punctuation\">,</span> <span class=\"token number\">293</span><span class=\"token punctuation\">,</span> <span class=\"token number\">836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">544</span><span class=\"token punctuation\">,</span> <span class=\"token number\">924</span><span class=\"token punctuation\">,</span> <span class=\"token number\">849</span><span class=\"token punctuation\">,</span> <span class=\"token number\">438</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">862</span><span class=\"token punctuation\">,</span> <span class=\"token number\">648</span><span class=\"token punctuation\">,</span> <span class=\"token number\">338</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">465</span><span class=\"token punctuation\">,</span> <span class=\"token number\">562</span><span class=\"token punctuation\">,</span> <span class=\"token number\">693</span><span class=\"token punctuation\">,</span> <span class=\"token number\">979</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">763</span><span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">387</span><span class=\"token punctuation\">,</span> <span class=\"token number\">374</span><span class=\"token punctuation\">,</span> <span class=\"token number\">349</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">574</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">307</span><span class=\"token punctuation\">,</span> <span class=\"token number\">580</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">535</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">481</span><span class=\"token punctuation\">,</span> <span class=\"token number\">519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">644</span><span class=\"token punctuation\">,</span> <span class=\"token number\">219</span><span class=\"token punctuation\">,</span> <span class=\"token number\">686</span><span class=\"token punctuation\">,</span> <span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">424</span><span class=\"token punctuation\">,</span> <span class=\"token number\">326</span><span class=\"token punctuation\">,</span> <span class=\"token number\">244</span><span class=\"token punctuation\">,</span> <span class=\"token number\">212</span><span class=\"token punctuation\">,</span> <span class=\"token number\">909</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span><span class=\"token punctuation\">,</span> <span class=\"token number\">951</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">812</span><span class=\"token punctuation\">,</span> <span class=\"token number\">901</span><span class=\"token punctuation\">,</span> <span class=\"token number\">926</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">507</span><span class=\"token punctuation\">,</span> <span class=\"token number\">739</span><span class=\"token punctuation\">,</span> <span class=\"token number\">371</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">584</span><span class=\"token punctuation\">,</span> <span class=\"token number\">154</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">284</span><span class=\"token punctuation\">,</span> <span class=\"token number\">617</span><span class=\"token punctuation\">,</span> <span class=\"token number\">332</span><span class=\"token punctuation\">,</span> <span class=\"token number\">472</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">,</span> <span class=\"token number\">605</span><span class=\"token punctuation\">,</span> <span class=\"token number\">262</span><span class=\"token punctuation\">,</span> <span class=\"token number\">355</span><span class=\"token punctuation\">,</span> <span class=\"token number\">526</span><span class=\"token punctuation\">,</span> <span class=\"token number\">647</span><span class=\"token punctuation\">,</span> <span class=\"token number\">923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">199</span><span class=\"token punctuation\">,</span> <span class=\"token number\">518</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">=</span><span class=\"token number\">100000000</span><span class=\"token punctuation\">,</span> error_rate<span class=\"token operator\">=</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> redis_con<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"bloomfilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>log2<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>log2<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> error_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 所需位数</span>\n        self<span class=\"token punctuation\">.</span>hash_time <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">/</span> capacity<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 最少hash次数</span>\n        self<span class=\"token punctuation\">.</span>memery <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 占用多少M内存</span>\n        self<span class=\"token punctuation\">.</span>block_num <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>memery <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块</span>\n        self<span class=\"token punctuation\">.</span>seeds <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>SEEDS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>hash_time<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key\n        self<span class=\"token punctuation\">.</span>N <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">31</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>hash_func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>SimpleHash<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit_size<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seed <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>seeds<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>redis_con <span class=\"token operator\">=</span> redis_con\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>block_num<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> str_input<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            m5 <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            m5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            str_input <span class=\"token operator\">=</span> m5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_key<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hash_func<span class=\"token punctuation\">:</span>\n                loc <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n                ret <span class=\"token operator\">=</span> ret <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>redis_con<span class=\"token punctuation\">.</span>getbit<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ret\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            m5 <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            m5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            str_input <span class=\"token operator\">=</span> m5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_key<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hash_func<span class=\"token punctuation\">:</span>\n                loc <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>redis_con<span class=\"token punctuation\">.</span>setbit<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    bloom_filter_redis_conn_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"6379\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n    redis_con <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>StrictRedis<span class=\"token punctuation\">(</span>connection_pool<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span>ConnectionPool<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>bloom_filter_redis_conn_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    bloom_filter <span class=\"token operator\">=</span> BloomFilter<span class=\"token punctuation\">(</span>redis_con<span class=\"token operator\">=</span>redis_con<span class=\"token punctuation\">)</span>\n    \n    start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6101000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bloom_filter<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bloom_filter<span class=\"token punctuation\">.</span>is_contains<span class=\"token punctuation\">(</span><span class=\"token string\">\"6100101\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"初步结论（本地测试）\"><a href=\"#初步结论（本地测试）\" class=\"headerlink\" title=\"初步结论（本地测试）\"></a>初步结论（本地测试）</h4><ul>\n<li>插入1000条耗时在2-4s之间。</li>\n<li>插入和查询耗时基本相同。</li>\n</ul>\n<h4 id=\"Redis数据查询\"><a href=\"#Redis数据查询\" class=\"headerlink\" title=\"Redis数据查询\"></a>Redis数据查询</h4><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">➜  ~ redis<span class=\"token operator\">-</span><span class=\"token function\">cli</span> <span class=\"token operator\">--</span>bigkeys <span class=\"token operator\">-</span>i 0<span class=\"token punctuation\">.</span>1 <span class=\"token operator\">-</span>h 127<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1\n\n<span class=\"token comment\"># Scanning the entire keyspace to find biggest keys as well as</span>\n<span class=\"token comment\"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span>\n<span class=\"token comment\"># per 100 SCAN commands (not usually needed).</span>\n\n<span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span><span class=\"token punctuation\">]</span> Biggest string found so far <span class=\"token string\">'bloomfilter0'</span> with 419346305 bytes\n\n<span class=\"token operator\">--</span>-<span class=\"token operator\">--</span>-<span class=\"token operator\">--</span> summary <span class=\"token operator\">--</span>-<span class=\"token operator\">--</span>-<span class=\"token operator\">-</span>\n\nSampled 1 keys in the keyspace<span class=\"token operator\">!</span>\nTotal key length in bytes is 12 <span class=\"token punctuation\">(</span>avg len 12<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n\nBiggest string found <span class=\"token string\">'bloomfilter0'</span> has 419346305 bytes\n\n1 strings with 419346305 bytes <span class=\"token punctuation\">(</span>100<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 419346305<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 lists with 0 items <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 hashs with 0 fields <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 streams with 0 entries <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 sets with 0 members <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 zsets with 0 members <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到 bloomfilter0 所占内存为400M左右</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<ul>\n<li>学习笔记，如有不足之处，欢迎指正。</li>\n</ul>\n<h4 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> redis\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleHash</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">=</span> cap\n        self<span class=\"token punctuation\">.</span>seed <span class=\"token operator\">=</span> seed\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ret <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>seed <span class=\"token operator\">*</span> ret <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> ret\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BloomFilter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 随机种子</span>\n    SEEDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">543</span><span class=\"token punctuation\">,</span> <span class=\"token number\">460</span><span class=\"token punctuation\">,</span> <span class=\"token number\">171</span><span class=\"token punctuation\">,</span> <span class=\"token number\">876</span><span class=\"token punctuation\">,</span> <span class=\"token number\">796</span><span class=\"token punctuation\">,</span> <span class=\"token number\">607</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">837</span><span class=\"token punctuation\">,</span> <span class=\"token number\">545</span><span class=\"token punctuation\">,</span> <span class=\"token number\">591</span><span class=\"token punctuation\">,</span> <span class=\"token number\">946</span><span class=\"token punctuation\">,</span> <span class=\"token number\">846</span><span class=\"token punctuation\">,</span> <span class=\"token number\">521</span><span class=\"token punctuation\">,</span> <span class=\"token number\">913</span><span class=\"token punctuation\">,</span> <span class=\"token number\">636</span><span class=\"token punctuation\">,</span> <span class=\"token number\">878</span><span class=\"token punctuation\">,</span> <span class=\"token number\">735</span><span class=\"token punctuation\">,</span> <span class=\"token number\">414</span><span class=\"token punctuation\">,</span> <span class=\"token number\">372</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">344</span><span class=\"token punctuation\">,</span> <span class=\"token number\">324</span><span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">327</span><span class=\"token punctuation\">,</span> <span class=\"token number\">891</span><span class=\"token punctuation\">,</span> <span class=\"token number\">798</span><span class=\"token punctuation\">,</span> <span class=\"token number\">933</span><span class=\"token punctuation\">,</span> <span class=\"token number\">493</span><span class=\"token punctuation\">,</span> <span class=\"token number\">293</span><span class=\"token punctuation\">,</span> <span class=\"token number\">836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">544</span><span class=\"token punctuation\">,</span> <span class=\"token number\">924</span><span class=\"token punctuation\">,</span> <span class=\"token number\">849</span><span class=\"token punctuation\">,</span> <span class=\"token number\">438</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">862</span><span class=\"token punctuation\">,</span> <span class=\"token number\">648</span><span class=\"token punctuation\">,</span> <span class=\"token number\">338</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">465</span><span class=\"token punctuation\">,</span> <span class=\"token number\">562</span><span class=\"token punctuation\">,</span> <span class=\"token number\">693</span><span class=\"token punctuation\">,</span> <span class=\"token number\">979</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">763</span><span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">387</span><span class=\"token punctuation\">,</span> <span class=\"token number\">374</span><span class=\"token punctuation\">,</span> <span class=\"token number\">349</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">574</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">307</span><span class=\"token punctuation\">,</span> <span class=\"token number\">580</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">535</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">481</span><span class=\"token punctuation\">,</span> <span class=\"token number\">519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">644</span><span class=\"token punctuation\">,</span> <span class=\"token number\">219</span><span class=\"token punctuation\">,</span> <span class=\"token number\">686</span><span class=\"token punctuation\">,</span> <span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">424</span><span class=\"token punctuation\">,</span> <span class=\"token number\">326</span><span class=\"token punctuation\">,</span> <span class=\"token number\">244</span><span class=\"token punctuation\">,</span> <span class=\"token number\">212</span><span class=\"token punctuation\">,</span> <span class=\"token number\">909</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span><span class=\"token punctuation\">,</span> <span class=\"token number\">951</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">812</span><span class=\"token punctuation\">,</span> <span class=\"token number\">901</span><span class=\"token punctuation\">,</span> <span class=\"token number\">926</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">507</span><span class=\"token punctuation\">,</span> <span class=\"token number\">739</span><span class=\"token punctuation\">,</span> <span class=\"token number\">371</span><span class=\"token punctuation\">,</span>\n             <span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">584</span><span class=\"token punctuation\">,</span> <span class=\"token number\">154</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">284</span><span class=\"token punctuation\">,</span> <span class=\"token number\">617</span><span class=\"token punctuation\">,</span> <span class=\"token number\">332</span><span class=\"token punctuation\">,</span> <span class=\"token number\">472</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">,</span> <span class=\"token number\">605</span><span class=\"token punctuation\">,</span> <span class=\"token number\">262</span><span class=\"token punctuation\">,</span> <span class=\"token number\">355</span><span class=\"token punctuation\">,</span> <span class=\"token number\">526</span><span class=\"token punctuation\">,</span> <span class=\"token number\">647</span><span class=\"token punctuation\">,</span> <span class=\"token number\">923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">199</span><span class=\"token punctuation\">,</span> <span class=\"token number\">518</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">=</span><span class=\"token number\">100000000</span><span class=\"token punctuation\">,</span> error_rate<span class=\"token operator\">=</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> redis_con<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"bloomfilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>log2<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>log2<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> error_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 所需位数</span>\n        self<span class=\"token punctuation\">.</span>hash_time <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">/</span> capacity<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 最少hash次数</span>\n        self<span class=\"token punctuation\">.</span>memery <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit_size <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 占用多少M内存</span>\n        self<span class=\"token punctuation\">.</span>block_num <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>memery <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 需要多少个512M的内存块,value的第一个字符必须是ascii码，最多有256个内存块</span>\n        self<span class=\"token punctuation\">.</span>seeds <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>SEEDS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>hash_time<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key\n        self<span class=\"token punctuation\">.</span>N <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">31</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>hash_func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>SimpleHash<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bit_size<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seed <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>seeds<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>redis_con <span class=\"token operator\">=</span> redis_con\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>key <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>block_num<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> str_input<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            m5 <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            m5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            str_input <span class=\"token operator\">=</span> m5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_key<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hash_func<span class=\"token punctuation\">:</span>\n                loc <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n                ret <span class=\"token operator\">=</span> ret <span class=\"token operator\">&amp;</span> self<span class=\"token punctuation\">.</span>redis_con<span class=\"token punctuation\">.</span>getbit<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ret\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            m5 <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            m5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            str_input <span class=\"token operator\">=</span> m5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_key<span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hash_func<span class=\"token punctuation\">:</span>\n                loc <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>str_input<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>redis_con<span class=\"token punctuation\">.</span>setbit<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loc<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    bloom_filter_redis_conn_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"6379\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n    redis_con <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>StrictRedis<span class=\"token punctuation\">(</span>connection_pool<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span>ConnectionPool<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>bloom_filter_redis_conn_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    bloom_filter <span class=\"token operator\">=</span> BloomFilter<span class=\"token punctuation\">(</span>redis_con<span class=\"token operator\">=</span>redis_con<span class=\"token punctuation\">)</span>\n    \n    start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6101000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bloom_filter<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bloom_filter<span class=\"token punctuation\">.</span>is_contains<span class=\"token punctuation\">(</span><span class=\"token string\">\"6100101\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"初步结论（本地测试）\"><a href=\"#初步结论（本地测试）\" class=\"headerlink\" title=\"初步结论（本地测试）\"></a>初步结论（本地测试）</h4><ul>\n<li>插入1000条耗时在2-4s之间。</li>\n<li>插入和查询耗时基本相同。</li>\n</ul>\n<h4 id=\"Redis数据查询\"><a href=\"#Redis数据查询\" class=\"headerlink\" title=\"Redis数据查询\"></a>Redis数据查询</h4><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">➜  ~ redis<span class=\"token operator\">-</span><span class=\"token function\">cli</span> <span class=\"token operator\">--</span>bigkeys <span class=\"token operator\">-</span>i 0<span class=\"token punctuation\">.</span>1 <span class=\"token operator\">-</span>h 127<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1\n\n<span class=\"token comment\"># Scanning the entire keyspace to find biggest keys as well as</span>\n<span class=\"token comment\"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span>\n<span class=\"token comment\"># per 100 SCAN commands (not usually needed).</span>\n\n<span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span><span class=\"token punctuation\">]</span> Biggest string found so far <span class=\"token string\">'bloomfilter0'</span> with 419346305 bytes\n\n<span class=\"token operator\">--</span>-<span class=\"token operator\">--</span>-<span class=\"token operator\">--</span> summary <span class=\"token operator\">--</span>-<span class=\"token operator\">--</span>-<span class=\"token operator\">-</span>\n\nSampled 1 keys in the keyspace<span class=\"token operator\">!</span>\nTotal key length in bytes is 12 <span class=\"token punctuation\">(</span>avg len 12<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n\nBiggest string found <span class=\"token string\">'bloomfilter0'</span> has 419346305 bytes\n\n1 strings with 419346305 bytes <span class=\"token punctuation\">(</span>100<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 419346305<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 lists with 0 items <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 hashs with 0 fields <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 streams with 0 entries <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 sets with 0 members <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span>\n0 zsets with 0 members <span class=\"token punctuation\">(</span>00<span class=\"token punctuation\">.</span>00<span class=\"token operator\">%</span> of keys<span class=\"token punctuation\">,</span> avg size 0<span class=\"token punctuation\">.</span>00<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到 bloomfilter0 所占内存为400M左右</p>\n"},{"title":"Mac-安装sshpass","comments":1,"date":"2021-03-07T11:26:11.000Z","author":null,"_content":"\n网上好多都失效了，2019-11-20以下方法亲测可行。\n```\nbrew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb\n```\n安装成功后执行 sshpass出现以下效果，说明安装成功。\n\n```\n➜  ~ sshpass\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var \"SSHPASS\"\n   With no parameters - password will be taken from stdin\n\n   -P prompt     Which string should sshpass search for to detect a password prompt\n   -v            Be verbose about what you're doing\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used\n```\n\n安装成功了，那就把密码记下来吧\n```\nvim ~/.bashrc\n```\n\n```\nalias jump=\"sshpass -p '666' ssh host\"\n```\n\n载入文件 source ~/.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是`source ~/.zshrc`。\n\n接下来就是验证成果是时候了。\n\n```\n➜  ~ jump\nLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151\nWelcome to Alibaba Cloud Elastic Compute Service !\n```\n\n## Success\n","source":"_posts/2021-03-07-Mac-安装sshpass.md","raw":"---\ntitle: Mac-安装sshpass\ncomments: true\ndate: 2021-03-07 19:26:11\nauthor:\ntags:\n - Mac\n - sshpass\ncategories:\n---\n\n网上好多都失效了，2019-11-20以下方法亲测可行。\n```\nbrew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb\n```\n安装成功后执行 sshpass出现以下效果，说明安装成功。\n\n```\n➜  ~ sshpass\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var \"SSHPASS\"\n   With no parameters - password will be taken from stdin\n\n   -P prompt     Which string should sshpass search for to detect a password prompt\n   -v            Be verbose about what you're doing\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used\n```\n\n安装成功了，那就把密码记下来吧\n```\nvim ~/.bashrc\n```\n\n```\nalias jump=\"sshpass -p '666' ssh host\"\n```\n\n载入文件 source ~/.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是`source ~/.zshrc`。\n\n接下来就是验证成果是时候了。\n\n```\n➜  ~ jump\nLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151\nWelcome to Alibaba Cloud Elastic Compute Service !\n```\n\n## Success\n","slug":"Mac-安装sshpass","published":1,"updated":"2021-03-07T11:27:03.445Z","_id":"cklz2l4jg000ajvs6b4b2gotg","layout":"post","photos":[],"link":"","content":"<p>网上好多都失效了，2019-11-20以下方法亲测可行。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brew install https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kadwanev&#x2F;bigboybrew&#x2F;master&#x2F;Library&#x2F;Formula&#x2F;sshpass.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装成功后执行 sshpass出现以下效果，说明安装成功。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">➜  ~ sshpass\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var &quot;SSHPASS&quot;\n   With no parameters - password will be taken from stdin\n\n   -P prompt     Which string should sshpass search for to detect a password prompt\n   -v            Be verbose about what you&#39;re doing\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装成功了，那就把密码记下来吧</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vim ~&#x2F;.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">alias jump&#x3D;&quot;sshpass -p &#39;666&#39; ssh host&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>载入文件 source ~/.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是<code>source ~/.zshrc</code>。</p>\n<p>接下来就是验证成果是时候了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">➜  ~ jump\nLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151\nWelcome to Alibaba Cloud Elastic Compute Service !<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success\"></a>Success</h2>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>网上好多都失效了，2019-11-20以下方法亲测可行。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brew install https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kadwanev&#x2F;bigboybrew&#x2F;master&#x2F;Library&#x2F;Formula&#x2F;sshpass.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装成功后执行 sshpass出现以下效果，说明安装成功。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">➜  ~ sshpass\nUsage: sshpass [-f|-d|-p|-e] [-hV] command parameters\n   -f filename   Take password to use from file\n   -d number     Use number as file descriptor for getting password\n   -p password   Provide password as argument (security unwise)\n   -e            Password is passed as env-var &quot;SSHPASS&quot;\n   With no parameters - password will be taken from stdin\n\n   -P prompt     Which string should sshpass search for to detect a password prompt\n   -v            Be verbose about what you&#39;re doing\n   -h            Show help (this screen)\n   -V            Print version information\nAt most one of -f, -d, -p or -e should be used<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装成功了，那就把密码记下来吧</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vim ~&#x2F;.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">alias jump&#x3D;&quot;sshpass -p &#39;666&#39; ssh host&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>载入文件 source ~/.bashrc, 具体是哪个文件根据自身情况决定，我把.bashrc 加在了.zshrc里，所以我执行的是<code>source ~/.zshrc</code>。</p>\n<p>接下来就是验证成果是时候了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">➜  ~ jump\nLast login: Wed Nov 20 21:59:08 2019 from 172.16.113.151\nWelcome to Alibaba Cloud Elastic Compute Service !<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success\"></a>Success</h2>"},{"title":"程序人生-优秀的工程师文化","comments":1,"date":"2021-03-07T11:28:26.000Z","author":null,"_content":"\n#### 自我认识\n- `有深刻的认知和认同`\n- **暂时没有做到或没有切身体会**\n#### 优秀的工程师文化最基本三要素\n- 尊重\n- 信任\n- 责任\n\n#### 工程师文化\n1. `团队才是王道`\n2. `快速失败，学习，迭代`\n3. **为学习预留时间**，`保持学习耐心`\n4. `必须坦诚，隐瞒是有害的`\n5. **学会批评**和`接受批评`\n6. 所谓强壮的文化，是能接受有益的改变，抵御有害的变化\n7. `建设团队文化并不是负责人的事，团队所有成员都有份`\n8. 团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素\n9. 想要优秀的工程师为自己工作，首要的是雇佣出色的工程师\n10. 每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石\n11. 诤友难得\n12. `同步沟通的时候人越少越好（开会，群讨论）`，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的\n13. 时间尚早但议题已经讨论完毕，立刻散会\n14. `不做设计，直接写代码的行为是不可取的`\n15. 任何warning都可能要了你的命\n16. 每个提交都必须经过代码审查\n17. 真正的测试和发布流程\n18. 负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄\n19. 理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业\n20. 做一个禅师，保持淡定和冷静\n21. 学会提问式沟通，`不要随便给人打标签`，任何人都会成长\n22. 培养敢于冒险精神的氛围\n23. 称赞同事可以，但是每个人都称赞那叫“互吹”\n24. 团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致\n25. 多关心下同伴在工作之外的情况是很有必要的\n26. 对同伴需要更多的激励和方向指引\n27. `独立工作不需要别人看着才能工作`\n28. 学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药\n29. 需要给自己目标，长期目标，`短期目标`\n30. 快速走出负面情绪\n31. 不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围\n32. 尊重别人的时间\n33. 不要过分的索取\n34. **转移完美主义者的注意力**\n35. 知道什么时候放弃\n36. `在完成自己工作的前提下，要求更多的责任`\n37. 敢于冒险，不怕失败\n38. `对不确定的事情提出疑问`\n39. `在leader问你进展之前，主动汇报`。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生\n40. 不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情\n41. **过度的向上管理不可取**\n42. **要分清什么是进取型工作什么是防御性工作**\n43. `要有自己的偶像`，并向偶像模仿，提高\n44. 如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博\n45. 大而全的系统往往是完美主义者的臆想\n46. 最好不要纸上谈兵，架构不是设计出来的，是优化出来的\n47. `懒惰是千万要小心的陷阱`","source":"_posts/2021-03-07-程序人生-优秀的工程师文化.md","raw":"---\ntitle: 程序人生-优秀的工程师文化\ncomments: true\ndate: 2021-03-07 19:28:26\nauthor:\ntags:\n - 程序人生\ncategories:\n---\n\n#### 自我认识\n- `有深刻的认知和认同`\n- **暂时没有做到或没有切身体会**\n#### 优秀的工程师文化最基本三要素\n- 尊重\n- 信任\n- 责任\n\n#### 工程师文化\n1. `团队才是王道`\n2. `快速失败，学习，迭代`\n3. **为学习预留时间**，`保持学习耐心`\n4. `必须坦诚，隐瞒是有害的`\n5. **学会批评**和`接受批评`\n6. 所谓强壮的文化，是能接受有益的改变，抵御有害的变化\n7. `建设团队文化并不是负责人的事，团队所有成员都有份`\n8. 团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素\n9. 想要优秀的工程师为自己工作，首要的是雇佣出色的工程师\n10. 每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石\n11. 诤友难得\n12. `同步沟通的时候人越少越好（开会，群讨论）`，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的\n13. 时间尚早但议题已经讨论完毕，立刻散会\n14. `不做设计，直接写代码的行为是不可取的`\n15. 任何warning都可能要了你的命\n16. 每个提交都必须经过代码审查\n17. 真正的测试和发布流程\n18. 负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄\n19. 理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业\n20. 做一个禅师，保持淡定和冷静\n21. 学会提问式沟通，`不要随便给人打标签`，任何人都会成长\n22. 培养敢于冒险精神的氛围\n23. 称赞同事可以，但是每个人都称赞那叫“互吹”\n24. 团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致\n25. 多关心下同伴在工作之外的情况是很有必要的\n26. 对同伴需要更多的激励和方向指引\n27. `独立工作不需要别人看着才能工作`\n28. 学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药\n29. 需要给自己目标，长期目标，`短期目标`\n30. 快速走出负面情绪\n31. 不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围\n32. 尊重别人的时间\n33. 不要过分的索取\n34. **转移完美主义者的注意力**\n35. 知道什么时候放弃\n36. `在完成自己工作的前提下，要求更多的责任`\n37. 敢于冒险，不怕失败\n38. `对不确定的事情提出疑问`\n39. `在leader问你进展之前，主动汇报`。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生\n40. 不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情\n41. **过度的向上管理不可取**\n42. **要分清什么是进取型工作什么是防御性工作**\n43. `要有自己的偶像`，并向偶像模仿，提高\n44. 如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博\n45. 大而全的系统往往是完美主义者的臆想\n46. 最好不要纸上谈兵，架构不是设计出来的，是优化出来的\n47. `懒惰是千万要小心的陷阱`","slug":"程序人生-优秀的工程师文化","published":1,"updated":"2021-03-07T11:28:53.190Z","_id":"cklz2o0sn000fjvs66k20fa59","layout":"post","photos":[],"link":"","content":"<h4 id=\"自我认识\"><a href=\"#自我认识\" class=\"headerlink\" title=\"自我认识\"></a>自我认识</h4><ul>\n<li><code>有深刻的认知和认同</code></li>\n<li><strong>暂时没有做到或没有切身体会</strong><h4 id=\"优秀的工程师文化最基本三要素\"><a href=\"#优秀的工程师文化最基本三要素\" class=\"headerlink\" title=\"优秀的工程师文化最基本三要素\"></a>优秀的工程师文化最基本三要素</h4></li>\n<li>尊重</li>\n<li>信任</li>\n<li>责任</li>\n</ul>\n<h4 id=\"工程师文化\"><a href=\"#工程师文化\" class=\"headerlink\" title=\"工程师文化\"></a>工程师文化</h4><ol>\n<li><code>团队才是王道</code></li>\n<li><code>快速失败，学习，迭代</code></li>\n<li><strong>为学习预留时间</strong>，<code>保持学习耐心</code></li>\n<li><code>必须坦诚，隐瞒是有害的</code></li>\n<li><strong>学会批评</strong>和<code>接受批评</code></li>\n<li>所谓强壮的文化，是能接受有益的改变，抵御有害的变化</li>\n<li><code>建设团队文化并不是负责人的事，团队所有成员都有份</code></li>\n<li>团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素</li>\n<li>想要优秀的工程师为自己工作，首要的是雇佣出色的工程师</li>\n<li>每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石</li>\n<li>诤友难得</li>\n<li><code>同步沟通的时候人越少越好（开会，群讨论）</code>，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的</li>\n<li>时间尚早但议题已经讨论完毕，立刻散会</li>\n<li><code>不做设计，直接写代码的行为是不可取的</code></li>\n<li>任何warning都可能要了你的命</li>\n<li>每个提交都必须经过代码审查</li>\n<li>真正的测试和发布流程</li>\n<li>负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄</li>\n<li>理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业</li>\n<li>做一个禅师，保持淡定和冷静</li>\n<li>学会提问式沟通，<code>不要随便给人打标签</code>，任何人都会成长</li>\n<li>培养敢于冒险精神的氛围</li>\n<li>称赞同事可以，但是每个人都称赞那叫“互吹”</li>\n<li>团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致</li>\n<li>多关心下同伴在工作之外的情况是很有必要的</li>\n<li>对同伴需要更多的激励和方向指引</li>\n<li><code>独立工作不需要别人看着才能工作</code></li>\n<li>学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药</li>\n<li>需要给自己目标，长期目标，<code>短期目标</code></li>\n<li>快速走出负面情绪</li>\n<li>不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围</li>\n<li>尊重别人的时间</li>\n<li>不要过分的索取</li>\n<li><strong>转移完美主义者的注意力</strong></li>\n<li>知道什么时候放弃</li>\n<li><code>在完成自己工作的前提下，要求更多的责任</code></li>\n<li>敢于冒险，不怕失败</li>\n<li><code>对不确定的事情提出疑问</code></li>\n<li><code>在leader问你进展之前，主动汇报</code>。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生</li>\n<li>不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情</li>\n<li><strong>过度的向上管理不可取</strong></li>\n<li><strong>要分清什么是进取型工作什么是防御性工作</strong></li>\n<li><code>要有自己的偶像</code>，并向偶像模仿，提高</li>\n<li>如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博</li>\n<li>大而全的系统往往是完美主义者的臆想</li>\n<li>最好不要纸上谈兵，架构不是设计出来的，是优化出来的</li>\n<li><code>懒惰是千万要小心的陷阱</code></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"自我认识\"><a href=\"#自我认识\" class=\"headerlink\" title=\"自我认识\"></a>自我认识</h4><ul>\n<li><code>有深刻的认知和认同</code></li>\n<li><strong>暂时没有做到或没有切身体会</strong><h4 id=\"优秀的工程师文化最基本三要素\"><a href=\"#优秀的工程师文化最基本三要素\" class=\"headerlink\" title=\"优秀的工程师文化最基本三要素\"></a>优秀的工程师文化最基本三要素</h4></li>\n<li>尊重</li>\n<li>信任</li>\n<li>责任</li>\n</ul>\n<h4 id=\"工程师文化\"><a href=\"#工程师文化\" class=\"headerlink\" title=\"工程师文化\"></a>工程师文化</h4><ol>\n<li><code>团队才是王道</code></li>\n<li><code>快速失败，学习，迭代</code></li>\n<li><strong>为学习预留时间</strong>，<code>保持学习耐心</code></li>\n<li><code>必须坦诚，隐瞒是有害的</code></li>\n<li><strong>学会批评</strong>和<code>接受批评</code></li>\n<li>所谓强壮的文化，是能接受有益的改变，抵御有害的变化</li>\n<li><code>建设团队文化并不是负责人的事，团队所有成员都有份</code></li>\n<li>团队文化从招聘开始，技术再牛，如果步调跟团队不一致，往往会成为一个很大的不确定因素</li>\n<li>想要优秀的工程师为自己工作，首要的是雇佣出色的工程师</li>\n<li>每个人都对产品的成功抱有强烈的主人翁精神和责任感，初创团队成员更应有这种意识建设性批评是工程团队的成长基石</li>\n<li>诤友难得</li>\n<li><code>同步沟通的时候人越少越好（开会，群讨论）</code>，异步沟通的时候听众越多越好（邮件）能够参加会议跟身份地位等同起来的做法是极其愚蠢的</li>\n<li>时间尚早但议题已经讨论完毕，立刻散会</li>\n<li><code>不做设计，直接写代码的行为是不可取的</code></li>\n<li>任何warning都可能要了你的命</li>\n<li>每个提交都必须经过代码审查</li>\n<li>真正的测试和发布流程</li>\n<li>负责人要做李云龙式的冲锋队长不要学诸葛亮运筹帷幄</li>\n<li>理解每一位员工的困难，萝卜加大棒式的管理方式不适合现在企业</li>\n<li>做一个禅师，保持淡定和冷静</li>\n<li>学会提问式沟通，<code>不要随便给人打标签</code>，任何人都会成长</li>\n<li>培养敢于冒险精神的氛围</li>\n<li>称赞同事可以，但是每个人都称赞那叫“互吹”</li>\n<li>团队想要在一个方向上快速前进就要让所有人同心协力，步调必须一致</li>\n<li>多关心下同伴在工作之外的情况是很有必要的</li>\n<li>对同伴需要更多的激励和方向指引</li>\n<li><code>独立工作不需要别人看着才能工作</code></li>\n<li>学习新技能，在现有基础上继续磨练得到提高是一个工程师职业生涯的续命丹药</li>\n<li>需要给自己目标，长期目标，<code>短期目标</code></li>\n<li>快速走出负面情绪</li>\n<li>不是要把“烂人”轰走，而是要培养一种拒绝负面行为的文化氛围</li>\n<li>尊重别人的时间</li>\n<li>不要过分的索取</li>\n<li><strong>转移完美主义者的注意力</strong></li>\n<li>知道什么时候放弃</li>\n<li><code>在完成自己工作的前提下，要求更多的责任</code></li>\n<li>敢于冒险，不怕失败</li>\n<li><code>对不确定的事情提出疑问</code></li>\n<li><code>在leader问你进展之前，主动汇报</code>。遇到的困难、完成任务、需要帮助，或者不希望什么事情发生</li>\n<li>不尊重工程师的公司，只把他们当实现商业目的工具的公司，工程师不会对这家公司有任何感情</li>\n<li><strong>过度的向上管理不可取</strong></li>\n<li><strong>要分清什么是进取型工作什么是防御性工作</strong></li>\n<li><code>要有自己的偶像</code>，并向偶像模仿，提高</li>\n<li>如果不努力去学习、了解引导公司的方法，那就等于拿自己的命运去赌博</li>\n<li>大而全的系统往往是完美主义者的臆想</li>\n<li>最好不要纸上谈兵，架构不是设计出来的，是优化出来的</li>\n<li><code>懒惰是千万要小心的陷阱</code></li>\n</ol>\n"},{"title":"Python-基础知识整理","comments":1,"date":"2021-03-07T11:30:08.000Z","author":null,"_content":"\n#### 数据类型\n基本数据类型：int,float,str,list,dict,tuple,set,bool\n数值类型：int,float,bool\n序列类型：str,list,tuple\n散列类型：set,dict\n\n字节类型 a=bytes('123')/a = b'123'\n字节数组 bytearray('123')\n\n可变序列：list,set,dict\n不可变序列：str,tuple\n\n#### 数据类型方法\n##### 字符串方法\n1. 增\n\n```python\nstrs = str1 + str2 + str3\nstrs = \"\".join([str1, str2, str3])\nstrs = \"%s%s%s\" % (str1, str2, str3)\nstrs = \"{}{}{}\".format(str1, str2, str3)\n```\n2. 删\n```python\n# m准备替换的内容，n替换的内容，x替换的个数\nstrs = x.replace(m, n, x)\n```\n3. 改\n```python\nx.upper() # x转化为大写\nx.lower() # x转化为小写\nx.strip() # 去x左右空白\nx.lstrip() # 去左空白\nx.rstrip() # 去右空白\nx.title() # x标题化\nx.capitalize() # 第一个字母大写\nx.split(m, x) # 以m为界分割，分割x次\n```\n4. 查\n```python\nx.index(m) # m的索引 找不到抛异常\nx.find(m) # m的索引 找不到返-1\nx.count(m) # 计数\nx.isdigit(m) # 是否是数字\nx.isalpha() # 是否是字母\nx.isupper() # 是否是大写\nx.islower() # 是否是小写\nx.startswith(m) # 是否以m开头\nx.endswith(m) # 是否以m结尾\n```\n\n##### 列表方法\n\n1. 增\n\n```python\nli.append(m)\nli.insert(x, m) # 在x下标处插入m\nli.extend(list)\n```\n2. 删\n```python\nli.pop(x) # 删除并返回该元素的值，若无参数则从最后开始删\nli.remove(m) # 删掉第一个m\nli.clear() # 清空 py2无此方法\n```\n3. 改\n```python\nli[n] = x\n```\n4. 查 \n```python\nli.index(m) # m索引的内容\nli.count(m) # m的数量\n```\n5. 浅复制\n```python\ncopy()\n```\n6. 深复制\n```python\nimport copy\nli2 = copy.deepcopy(li1)\n```\n7. 永久排序\n```python\nli.sort(reverse=True/False)\nli.reverse() # 倒排序\n```\n8. 临时排序\n```python\nli2 = sorted(li, reverse=True/False) # li2是list\nli2 = reversed(li) # li2是listreverseiterator 对象\n```\n\n##### 元组方法\n1. 查\n\n```python\nt.index(m)\nt.count(m)\n```\n\n##### 集合方法\n**交集&**\n**并集|**\n**差集-**\n1. 增\n```python\na.add(m)\n```\n2. 删\n```python\na.pop() # 随机删除\na.remove(m)\n```\n3. 改\n```python\na.update(m) # 向集合添加m，m可以为str list tuple set dict\n```\n4. 查\n```python\na.isdisjoint(b) # 是否存在交集 \na.issubset(b) # a是否是b的子集\na.issuperset(b) # a是否是b的父集\n```","source":"_posts/2021-03-07-Python-基础知识整理.md","raw":"---\ntitle: Python-基础知识整理\ncomments: true\ndate: 2021-03-07 19:30:08\nauthor:\ntags:\n - Python\ncategories:\n---\n\n#### 数据类型\n基本数据类型：int,float,str,list,dict,tuple,set,bool\n数值类型：int,float,bool\n序列类型：str,list,tuple\n散列类型：set,dict\n\n字节类型 a=bytes('123')/a = b'123'\n字节数组 bytearray('123')\n\n可变序列：list,set,dict\n不可变序列：str,tuple\n\n#### 数据类型方法\n##### 字符串方法\n1. 增\n\n```python\nstrs = str1 + str2 + str3\nstrs = \"\".join([str1, str2, str3])\nstrs = \"%s%s%s\" % (str1, str2, str3)\nstrs = \"{}{}{}\".format(str1, str2, str3)\n```\n2. 删\n```python\n# m准备替换的内容，n替换的内容，x替换的个数\nstrs = x.replace(m, n, x)\n```\n3. 改\n```python\nx.upper() # x转化为大写\nx.lower() # x转化为小写\nx.strip() # 去x左右空白\nx.lstrip() # 去左空白\nx.rstrip() # 去右空白\nx.title() # x标题化\nx.capitalize() # 第一个字母大写\nx.split(m, x) # 以m为界分割，分割x次\n```\n4. 查\n```python\nx.index(m) # m的索引 找不到抛异常\nx.find(m) # m的索引 找不到返-1\nx.count(m) # 计数\nx.isdigit(m) # 是否是数字\nx.isalpha() # 是否是字母\nx.isupper() # 是否是大写\nx.islower() # 是否是小写\nx.startswith(m) # 是否以m开头\nx.endswith(m) # 是否以m结尾\n```\n\n##### 列表方法\n\n1. 增\n\n```python\nli.append(m)\nli.insert(x, m) # 在x下标处插入m\nli.extend(list)\n```\n2. 删\n```python\nli.pop(x) # 删除并返回该元素的值，若无参数则从最后开始删\nli.remove(m) # 删掉第一个m\nli.clear() # 清空 py2无此方法\n```\n3. 改\n```python\nli[n] = x\n```\n4. 查 \n```python\nli.index(m) # m索引的内容\nli.count(m) # m的数量\n```\n5. 浅复制\n```python\ncopy()\n```\n6. 深复制\n```python\nimport copy\nli2 = copy.deepcopy(li1)\n```\n7. 永久排序\n```python\nli.sort(reverse=True/False)\nli.reverse() # 倒排序\n```\n8. 临时排序\n```python\nli2 = sorted(li, reverse=True/False) # li2是list\nli2 = reversed(li) # li2是listreverseiterator 对象\n```\n\n##### 元组方法\n1. 查\n\n```python\nt.index(m)\nt.count(m)\n```\n\n##### 集合方法\n**交集&**\n**并集|**\n**差集-**\n1. 增\n```python\na.add(m)\n```\n2. 删\n```python\na.pop() # 随机删除\na.remove(m)\n```\n3. 改\n```python\na.update(m) # 向集合添加m，m可以为str list tuple set dict\n```\n4. 查\n```python\na.isdisjoint(b) # 是否存在交集 \na.issubset(b) # a是否是b的子集\na.issuperset(b) # a是否是b的父集\n```","slug":"Python-基础知识整理","published":1,"updated":"2021-03-07T11:30:30.262Z","_id":"cklz2q70r000ijvs65zfh6or3","layout":"post","photos":[],"link":"","content":"<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>基本数据类型：int,float,str,list,dict,tuple,set,bool<br>数值类型：int,float,bool<br>序列类型：str,list,tuple<br>散列类型：set,dict</p>\n<p>字节类型 a=bytes(‘123’)/a = b’123’<br>字节数组 bytearray(‘123’)</p>\n<p>可变序列：list,set,dict<br>不可变序列：str,tuple</p>\n<h4 id=\"数据类型方法\"><a href=\"#数据类型方法\" class=\"headerlink\" title=\"数据类型方法\"></a>数据类型方法</h4><h5 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h5><ol>\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">strs <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2 <span class=\"token operator\">+</span> str3\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"%s%s%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">)</span>\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;&#125;&#123;&#125;&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># m准备替换的内容，n替换的内容，x替换的个数</span>\nstrs <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x转化为大写</span>\nx<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x转化为小写</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去x左右空白</span>\nx<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去左空白</span>\nx<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去右空白</span>\nx<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x标题化</span>\nx<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 第一个字母大写</span>\nx<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 以m为界分割，分割x次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的索引 找不到抛异常</span>\nx<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的索引 找不到返-1</span>\nx<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计数</span>\nx<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是数字</span>\nx<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是字母</span>\nx<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是大写</span>\nx<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是小写</span>\nx<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否以m开头</span>\nx<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否以m结尾</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"列表方法\"><a href=\"#列表方法\" class=\"headerlink\" title=\"列表方法\"></a>列表方法</h5><ol>\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\nli<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 在x下标处插入m</span>\nli<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除并返回该元素的值，若无参数则从最后开始删</span>\nli<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删掉第一个m</span>\nli<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 清空 py2无此方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>查 <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m索引的内容</span>\nli<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的数量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>浅复制<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>深复制<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> copy\nli2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>永久排序<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token operator\">/</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nli<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 倒排序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>临时排序<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li2 <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token operator\">/</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># li2是list</span>\nli2 <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token comment\"># li2是listreverseiterator 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"元组方法\"><a href=\"#元组方法\" class=\"headerlink\" title=\"元组方法\"></a>元组方法</h5><ol>\n<li>查</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"集合方法\"><a href=\"#集合方法\" class=\"headerlink\" title=\"集合方法\"></a>集合方法</h5><p><strong>交集&amp;</strong><br><strong>并集|</strong><br><strong>差集-</strong></p>\n<ol>\n<li>增<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 随机删除</span>\na<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向集合添加m，m可以为str list tuple set dict</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>查<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>isdisjoint<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否存在交集 </span>\na<span class=\"token punctuation\">.</span>issubset<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># a是否是b的子集</span>\na<span class=\"token punctuation\">.</span>issuperset<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># a是否是b的父集</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>基本数据类型：int,float,str,list,dict,tuple,set,bool<br>数值类型：int,float,bool<br>序列类型：str,list,tuple<br>散列类型：set,dict</p>\n<p>字节类型 a=bytes(‘123’)/a = b’123’<br>字节数组 bytearray(‘123’)</p>\n<p>可变序列：list,set,dict<br>不可变序列：str,tuple</p>\n<h4 id=\"数据类型方法\"><a href=\"#数据类型方法\" class=\"headerlink\" title=\"数据类型方法\"></a>数据类型方法</h4><h5 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h5><ol>\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">strs <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2 <span class=\"token operator\">+</span> str3\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"%s%s%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">)</span>\nstrs <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;&#125;&#123;&#125;&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> str3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># m准备替换的内容，n替换的内容，x替换的个数</span>\nstrs <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x转化为大写</span>\nx<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x转化为小写</span>\nx<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去x左右空白</span>\nx<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去左空白</span>\nx<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 去右空白</span>\nx<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x标题化</span>\nx<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 第一个字母大写</span>\nx<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 以m为界分割，分割x次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的索引 找不到抛异常</span>\nx<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的索引 找不到返-1</span>\nx<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计数</span>\nx<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是数字</span>\nx<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是字母</span>\nx<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是大写</span>\nx<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否是小写</span>\nx<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否以m开头</span>\nx<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否以m结尾</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"列表方法\"><a href=\"#列表方法\" class=\"headerlink\" title=\"列表方法\"></a>列表方法</h5><ol>\n<li>增</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\nli<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 在x下标处插入m</span>\nli<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除并返回该元素的值，若无参数则从最后开始删</span>\nli<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删掉第一个m</span>\nli<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 清空 py2无此方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>查 <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m索引的内容</span>\nli<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># m的数量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>浅复制<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>深复制<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> copy\nli2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>永久排序<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token operator\">/</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nli<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 倒排序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>临时排序<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">li2 <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token operator\">/</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># li2是list</span>\nli2 <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token comment\"># li2是listreverseiterator 对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"元组方法\"><a href=\"#元组方法\" class=\"headerlink\" title=\"元组方法\"></a>元组方法</h5><ol>\n<li>查</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"集合方法\"><a href=\"#集合方法\" class=\"headerlink\" title=\"集合方法\"></a>集合方法</h5><p><strong>交集&amp;</strong><br><strong>并集|</strong><br><strong>差集-</strong></p>\n<ol>\n<li>增<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>删<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 随机删除</span>\na<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>改<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向集合添加m，m可以为str list tuple set dict</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>查<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token punctuation\">.</span>isdisjoint<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 是否存在交集 </span>\na<span class=\"token punctuation\">.</span>issubset<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># a是否是b的子集</span>\na<span class=\"token punctuation\">.</span>issuperset<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># a是否是b的父集</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n"},{"title":"Redis-两次redis操作用不用pipeline","comments":1,"date":"2021-03-07T11:31:08.000Z","author":null,"_content":"\n#### 为什么需要 pipeline ？\n- 正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。\n- pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png)\n#### 两次redis操作，用pipeline会不会好一点\n- 执行10万次set\n```python\nimport redis\nimport time\n\nif __name__ == '__main__':\n    my_redis = redis.StrictRedis(connection_pool=redis.ConnectionPool.from_url(\"redis://:@127.0.0.1/0\"), socket_timeout=2)\n\t# 不用pipeline\n    start_time = int(time.time() * 1000)\n    for i in range(0,100000):\n        key1 = \"test1_%s\" % i\n        my_redis.set(key1, i)\n        my_redis.expire(key1, 3600)\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n\n\t# 使用pipeline\n    start_time = int(time.time() * 1000)\n    pipe = my_redis.pipeline()\n    for i in range(0,100000):\n        key1 = \"test2_%s\" % i\n        pipe.set(key1, i)\n        pipe.expire(key1, 3600)\n    pipe.execute()\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n```\n- 执行结果\n> 16651、14477、15041 # 不用pipeline\n> 4517、4158、4325  # 使用pipeline\n- 初步结论\n> 即使只有两次redis操作，pipeline的效果也很突出。\n\n#### 两次已经表现优异了，次数多点怎么样？\n- 执行100万次sadd 操作\n```python\n    start_time = int(time.time() * 1000)\n    for i in range(0, 100000):\n        for j in range(0, 10):\n            key1 = \"test1_%s_%s\" % (i,j)\n            my_redis.sadd(key1, i)\n        my_redis.expire(key1, 3600)\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n\n    start_time = int(time.time() * 1000)\n    pipe = my_redis.pipeline()\n    for i in range(0, 100000):\n        for j in range(0,10):\n            key1 = \"test2_%s_%s\" % (i,j)\n            pipe.sadd(key1, i)\n        pipe.expire(key1, 3600)\n    pipe.execute()\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n```\n\n- 执行结果\n> 83849\n> 26313\n- 初步结论\n> pipeline居家必备\n","source":"_posts/2021-03-07-Redis-两次redis操作用不用pipeline.md","raw":"---\ntitle: Redis-两次redis操作用不用pipeline\ncomments: true\ndate: 2021-03-07 19:31:08\nauthor:\ntags:\n - Redis\ncategories:\n - 中间件\n---\n\n#### 为什么需要 pipeline ？\n- 正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。\n- pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png)\n#### 两次redis操作，用pipeline会不会好一点\n- 执行10万次set\n```python\nimport redis\nimport time\n\nif __name__ == '__main__':\n    my_redis = redis.StrictRedis(connection_pool=redis.ConnectionPool.from_url(\"redis://:@127.0.0.1/0\"), socket_timeout=2)\n\t# 不用pipeline\n    start_time = int(time.time() * 1000)\n    for i in range(0,100000):\n        key1 = \"test1_%s\" % i\n        my_redis.set(key1, i)\n        my_redis.expire(key1, 3600)\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n\n\t# 使用pipeline\n    start_time = int(time.time() * 1000)\n    pipe = my_redis.pipeline()\n    for i in range(0,100000):\n        key1 = \"test2_%s\" % i\n        pipe.set(key1, i)\n        pipe.expire(key1, 3600)\n    pipe.execute()\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n```\n- 执行结果\n> 16651、14477、15041 # 不用pipeline\n> 4517、4158、4325  # 使用pipeline\n- 初步结论\n> 即使只有两次redis操作，pipeline的效果也很突出。\n\n#### 两次已经表现优异了，次数多点怎么样？\n- 执行100万次sadd 操作\n```python\n    start_time = int(time.time() * 1000)\n    for i in range(0, 100000):\n        for j in range(0, 10):\n            key1 = \"test1_%s_%s\" % (i,j)\n            my_redis.sadd(key1, i)\n        my_redis.expire(key1, 3600)\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n\n    start_time = int(time.time() * 1000)\n    pipe = my_redis.pipeline()\n    for i in range(0, 100000):\n        for j in range(0,10):\n            key1 = \"test2_%s_%s\" % (i,j)\n            pipe.sadd(key1, i)\n        pipe.expire(key1, 3600)\n    pipe.execute()\n    end_time = int(time.time() * 1000)\n    print end_time - start_time\n```\n\n- 执行结果\n> 83849\n> 26313\n- 初步结论\n> pipeline居家必备\n","slug":"Redis-两次redis操作用不用pipeline","published":1,"updated":"2021-03-07T11:31:38.192Z","_id":"cklz2rhyb000kjvs68pedcugg","layout":"post","photos":[],"link":"","content":"<h4 id=\"为什么需要-pipeline-？\"><a href=\"#为什么需要-pipeline-？\" class=\"headerlink\" title=\"为什么需要 pipeline ？\"></a>为什么需要 pipeline ？</h4><ul>\n<li>正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。</li>\n<li>pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><h4 id=\"两次redis操作，用pipeline会不会好一点\"><a href=\"#两次redis操作，用pipeline会不会好一点\" class=\"headerlink\" title=\"两次redis操作，用pipeline会不会好一点\"></a>两次redis操作，用pipeline会不会好一点</h4></li>\n<li>执行10万次set<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> redis\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    my_redis <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>StrictRedis<span class=\"token punctuation\">(</span>connection_pool<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span>ConnectionPool<span class=\"token punctuation\">.</span>from_url<span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://:@127.0.0.1/0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> socket_timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 不用pipeline</span>\n    start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test1_%s\"</span> <span class=\"token operator\">%</span> i\n        my_redis<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        my_redis<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n    end_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time\n\n\t<span class=\"token comment\"># 使用pipeline</span>\n    start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    pipe <span class=\"token operator\">=</span> my_redis<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2_%s\"</span> <span class=\"token operator\">%</span> i\n        pipe<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        pipe<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n    pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    end_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>执行结果<blockquote>\n<p>16651、14477、15041 # 不用pipeline<br>4517、4158、4325  # 使用pipeline</p>\n</blockquote>\n</li>\n<li>初步结论<blockquote>\n<p>即使只有两次redis操作，pipeline的效果也很突出。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"两次已经表现优异了，次数多点怎么样？\"><a href=\"#两次已经表现优异了，次数多点怎么样？\" class=\"headerlink\" title=\"两次已经表现优异了，次数多点怎么样？\"></a>两次已经表现优异了，次数多点怎么样？</h4><ul>\n<li><p>执行100万次sadd 操作</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test1_%s_%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n        my_redis<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    my_redis<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\nend_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time\n\nstart_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\npipe <span class=\"token operator\">=</span> my_redis<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2_%s_%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n        pipe<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    pipe<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\npipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>执行结果</p>\n<blockquote>\n<p>83849<br>26313</p>\n</blockquote>\n</li>\n<li><p>初步结论</p>\n<blockquote>\n<p>pipeline居家必备</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"为什么需要-pipeline-？\"><a href=\"#为什么需要-pipeline-？\" class=\"headerlink\" title=\"为什么需要 pipeline ？\"></a>为什么需要 pipeline ？</h4><ul>\n<li>正常情况下，客户端发送一个命令，等待 Redis 应答；Redis 接收到命令，处理后应答。请求发出到响应的时间叫做往返时间，即 RTT（Round Time Trip）。在这种情况下，如果需要执行大量的命令，就需要等待上一条命令应答后再执行。这中间不仅仅多了许多次 RTT，而且还频繁的调用系统 IO，发送网络请求。</li>\n<li>pipeline 允许客户端可以一次发送多条命令，而不等待上一条命令执行的结果。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9iVlY5MTY?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><h4 id=\"两次redis操作，用pipeline会不会好一点\"><a href=\"#两次redis操作，用pipeline会不会好一点\" class=\"headerlink\" title=\"两次redis操作，用pipeline会不会好一点\"></a>两次redis操作，用pipeline会不会好一点</h4></li>\n<li>执行10万次set<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> redis\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    my_redis <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>StrictRedis<span class=\"token punctuation\">(</span>connection_pool<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span>ConnectionPool<span class=\"token punctuation\">.</span>from_url<span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://:@127.0.0.1/0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> socket_timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 不用pipeline</span>\n    start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test1_%s\"</span> <span class=\"token operator\">%</span> i\n        my_redis<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        my_redis<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n    end_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time\n\n\t<span class=\"token comment\"># 使用pipeline</span>\n    start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    pipe <span class=\"token operator\">=</span> my_redis<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2_%s\"</span> <span class=\"token operator\">%</span> i\n        pipe<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        pipe<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n    pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    end_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>执行结果<blockquote>\n<p>16651、14477、15041 # 不用pipeline<br>4517、4158、4325  # 使用pipeline</p>\n</blockquote>\n</li>\n<li>初步结论<blockquote>\n<p>即使只有两次redis操作，pipeline的效果也很突出。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"两次已经表现优异了，次数多点怎么样？\"><a href=\"#两次已经表现优异了，次数多点怎么样？\" class=\"headerlink\" title=\"两次已经表现优异了，次数多点怎么样？\"></a>两次已经表现优异了，次数多点怎么样？</h4><ul>\n<li><p>执行100万次sadd 操作</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">start_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test1_%s_%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n        my_redis<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    my_redis<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\nend_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time\n\nstart_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\npipe <span class=\"token operator\">=</span> my_redis<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2_%s_%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span>\n        pipe<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    pipe<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\npipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend_time <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> end_time <span class=\"token operator\">-</span> start_time<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>执行结果</p>\n<blockquote>\n<p>83849<br>26313</p>\n</blockquote>\n</li>\n<li><p>初步结论</p>\n<blockquote>\n<p>pipeline居家必备</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Redis-expire比exists更好用","comments":1,"date":"2021-03-07T11:32:41.000Z","author":null,"_content":"\n[参考文章——简书](https://www.jianshu.com/p/9352d20fb2e0)\n#### 什么情况下expire比exists更好？\n###### 前提\n- redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。\n###### 场景\n- 每次都需要判断某个key是否存在，然后才能执行相应的操作。\n###### 问题\n- 最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。\n- 条件虽然比较极端，但是在代码里——一切皆有可能。\n###### 解决\n- expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。\n\n\n# 过期相关补充\n#### 设置过期时间\n\n```python\n    EXPIRE <KEY> <TTL> : 将键的生存时间设为 ttl 秒\n    PEXPIRE <KEY> <TTL> :将键的生存时间设为 ttl 毫秒\n    EXPIREAT <KEY> <timestamp> :将键的过期时间设为 timestamp 所指定的秒数时间戳\n    PEXPIREAT <KEY> <timestamp>: 将键的过期时间设为 timestamp 所指定的毫秒数时间戳.\n```\n\n#### 移除过期时间\n\n```python\n\tpersist key\n```\n\n#### redis值和过期时间的存储\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png)\n#### 删除book键的过期时间后的存储结构\n- book键的过期时间没有了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)","source":"_posts/2021-03-07-Redis-expire比exists更好用.md","raw":"---\ntitle: Redis-expire比exists更好用\ncomments: true\ndate: 2021-03-07 19:32:41\nauthor:\ntags:\n - Redis\ncategories:\n - 中间件\n---\n\n[参考文章——简书](https://www.jianshu.com/p/9352d20fb2e0)\n#### 什么情况下expire比exists更好？\n###### 前提\n- redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。\n###### 场景\n- 每次都需要判断某个key是否存在，然后才能执行相应的操作。\n###### 问题\n- 最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。\n- 条件虽然比较极端，但是在代码里——一切皆有可能。\n###### 解决\n- expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。\n\n\n# 过期相关补充\n#### 设置过期时间\n\n```python\n    EXPIRE <KEY> <TTL> : 将键的生存时间设为 ttl 秒\n    PEXPIRE <KEY> <TTL> :将键的生存时间设为 ttl 毫秒\n    EXPIREAT <KEY> <timestamp> :将键的过期时间设为 timestamp 所指定的秒数时间戳\n    PEXPIREAT <KEY> <timestamp>: 将键的过期时间设为 timestamp 所指定的毫秒数时间戳.\n```\n\n#### 移除过期时间\n\n```python\n\tpersist key\n```\n\n#### redis值和过期时间的存储\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png)\n#### 删除book键的过期时间后的存储结构\n- book键的过期时间没有了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)","slug":"Redis-expire比exists更好用","published":1,"updated":"2021-03-07T11:33:14.868Z","_id":"cklz2thll000njvs6dr836eg1","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.jianshu.com/p/9352d20fb2e0\">参考文章——简书</a></p>\n<h4 id=\"什么情况下expire比exists更好？\"><a href=\"#什么情况下expire比exists更好？\" class=\"headerlink\" title=\"什么情况下expire比exists更好？\"></a>什么情况下expire比exists更好？</h4><h6 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h6><ul>\n<li>redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。<h6 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h6></li>\n<li>每次都需要判断某个key是否存在，然后才能执行相应的操作。<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h6></li>\n<li>最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。</li>\n<li>条件虽然比较极端，但是在代码里——一切皆有可能。<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6></li>\n<li>expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。</li>\n</ul>\n<h1 id=\"过期相关补充\"><a href=\"#过期相关补充\" class=\"headerlink\" title=\"过期相关补充\"></a>过期相关补充</h1><h4 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">EXPIRE <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>TTL<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> 将键的生存时间设为 ttl 秒\nPEXPIRE <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>TTL<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>将键的生存时间设为 ttl 毫秒\nEXPIREAT <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>timestamp<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>将键的过期时间设为 timestamp 所指定的秒数时间戳\nPEXPIREAT <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>timestamp<span class=\"token operator\">></span><span class=\"token punctuation\">:</span> 将键的过期时间设为 timestamp 所指定的毫秒数时间戳<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"移除过期时间\"><a href=\"#移除过期时间\" class=\"headerlink\" title=\"移除过期时间\"></a>移除过期时间</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">persist key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"redis值和过期时间的存储\"><a href=\"#redis值和过期时间的存储\" class=\"headerlink\" title=\"redis值和过期时间的存储\"></a>redis值和过期时间的存储</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"删除book键的过期时间后的存储结构\"><a href=\"#删除book键的过期时间后的存储结构\" class=\"headerlink\" title=\"删除book键的过期时间后的存储结构\"></a>删除book键的过期时间后的存储结构</h4><ul>\n<li>book键的过期时间没有了<br><img src=\"https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/9352d20fb2e0\">参考文章——简书</a></p>\n<h4 id=\"什么情况下expire比exists更好？\"><a href=\"#什么情况下expire比exists更好？\" class=\"headerlink\" title=\"什么情况下expire比exists更好？\"></a>什么情况下expire比exists更好？</h4><h6 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h6><ul>\n<li>redis key过期时间必须设置（特殊需求除外），但是如果DB的值有变动会主动更新到redis，所以不会有数据不同步的情况。<h6 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h6></li>\n<li>每次都需要判断某个key是否存在，然后才能执行相应的操作。<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h6></li>\n<li>最坏情况下，代码在执行exists时key是有效的，后面对key进行操作时，发现在那两行代码执行的中间，key被清掉了。</li>\n<li>条件虽然比较极端，但是在代码里——一切皆有可能。<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6></li>\n<li>expire代替exists，重置key的过期时间。相当于利用expire给key续命，可以合理的“长生不死”。</li>\n</ul>\n<h1 id=\"过期相关补充\"><a href=\"#过期相关补充\" class=\"headerlink\" title=\"过期相关补充\"></a>过期相关补充</h1><h4 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">EXPIRE <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>TTL<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> 将键的生存时间设为 ttl 秒\nPEXPIRE <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>TTL<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>将键的生存时间设为 ttl 毫秒\nEXPIREAT <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>timestamp<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>将键的过期时间设为 timestamp 所指定的秒数时间戳\nPEXPIREAT <span class=\"token operator\">&lt;</span>KEY<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>timestamp<span class=\"token operator\">></span><span class=\"token punctuation\">:</span> 将键的过期时间设为 timestamp 所指定的毫秒数时间戳<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"移除过期时间\"><a href=\"#移除过期时间\" class=\"headerlink\" title=\"移除过期时间\"></a>移除过期时间</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">persist key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"redis值和过期时间的存储\"><a href=\"#redis值和过期时间的存储\" class=\"headerlink\" title=\"redis值和过期时间的存储\"></a>redis值和过期时间的存储</h4><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy83MzYxMzgzLTcwMDYyYTM2ZDQxOWZjMTcucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"删除book键的过期时间后的存储结构\"><a href=\"#删除book键的过期时间后的存储结构\" class=\"headerlink\" title=\"删除book键的过期时间后的存储结构\"></a>删除book键的过期时间后的存储结构</h4><ul>\n<li>book键的过期时间没有了<br><img src=\"https://img-blog.csdnimg.cn/20190823213116792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n"},{"title":"Python-PIL—ImageFilter函数","comments":1,"date":"2021-03-07T11:34:16.000Z","author":null,"_content":"\n[参考地址](https://blog.csdn.net/icamera0/article/details/50708888)\n#### 滤镜函数\n##### 先看效果\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n##### Kernel\n> Kernel(size, kernel, scale=None, offset=0)\n- 生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。\n- kernel与size对应，必须为9或25个整数或浮点数。\n- 如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。\n- 如果设置offset，则将offset值与卷积核相加，然后除以scale\n\n```python\nim = Image.open(src_file)\nKernel_im = im.filter(ImageFilter.Kernel((3,3),(1,1,1,0,0,0,2,0,2)))\n```\n\n##### RankFilter\n> RankFilter(size, rank)\n- 等级滤波器。\n- 对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。\n- size，以像素点为中心size * size 的像素点中进行排序。\n- rank，size * size 的像素中选择排序第rank位的像素作为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.RankFilter(5,24))\n```\n\n##### MinFilter, MedianFilter,MaxFilter\n> MinFilter(size)\n> 最小滤波器。\n> MedianFilter(size)\n> 中值滤波器。\n> MaxFilter(size)\n> 最大滤波器。\n- size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.MinFilter(5))\nim = im.filter(ImageFilter.MedianFilterFilter(5))\nim = im.filter(ImageFilter.MaxFilter(5))\n```\n\n##### ModeFilter\n> ModeFilter(size)\n- 模式滤波器\n- size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.ModeFilter(5))\n```\n\n","source":"_posts/2021-03-07-Python-PIL—ImageFilter函数.md","raw":"---\ntitle: Python-PIL—ImageFilter函数\ncomments: true\ndate: 2021-03-07 19:34:16\nauthor:\ntags:\n - Python\n - PIL\ncategories:\n - 后端开发\n---\n\n[参考地址](https://blog.csdn.net/icamera0/article/details/50708888)\n#### 滤镜函数\n##### 先看效果\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n##### Kernel\n> Kernel(size, kernel, scale=None, offset=0)\n- 生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。\n- kernel与size对应，必须为9或25个整数或浮点数。\n- 如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。\n- 如果设置offset，则将offset值与卷积核相加，然后除以scale\n\n```python\nim = Image.open(src_file)\nKernel_im = im.filter(ImageFilter.Kernel((3,3),(1,1,1,0,0,0,2,0,2)))\n```\n\n##### RankFilter\n> RankFilter(size, rank)\n- 等级滤波器。\n- 对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。\n- size，以像素点为中心size * size 的像素点中进行排序。\n- rank，size * size 的像素中选择排序第rank位的像素作为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.RankFilter(5,24))\n```\n\n##### MinFilter, MedianFilter,MaxFilter\n> MinFilter(size)\n> 最小滤波器。\n> MedianFilter(size)\n> 中值滤波器。\n> MaxFilter(size)\n> 最大滤波器。\n- size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.MinFilter(5))\nim = im.filter(ImageFilter.MedianFilterFilter(5))\nim = im.filter(ImageFilter.MaxFilter(5))\n```\n\n##### ModeFilter\n> ModeFilter(size)\n- 模式滤波器\n- size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。\n\n```python\nim = Image.open(src_file)\nim = im.filter(ImageFilter.ModeFilter(5))\n```\n\n","slug":"Python-PIL—ImageFilter函数","published":1,"updated":"2021-03-07T11:36:32.334Z","_id":"cklz2vixt000qjvs67kgg4mub","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://blog.csdn.net/icamera0/article/details/50708888\">参考地址</a></p>\n<h4 id=\"滤镜函数\"><a href=\"#滤镜函数\" class=\"headerlink\" title=\"滤镜函数\"></a>滤镜函数</h4><h5 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h5><p><img src=\"https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"Kernel\"><a href=\"#Kernel\" class=\"headerlink\" title=\"Kernel\"></a>Kernel</h5><blockquote>\n<p>Kernel(size, kernel, scale=None, offset=0)</p>\n</blockquote>\n<ul>\n<li>生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。</li>\n<li>kernel与size对应，必须为9或25个整数或浮点数。</li>\n<li>如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。</li>\n<li>如果设置offset，则将offset值与卷积核相加，然后除以scale</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nKernel_im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>Kernel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"RankFilter\"><a href=\"#RankFilter\" class=\"headerlink\" title=\"RankFilter\"></a>RankFilter</h5><blockquote>\n<p>RankFilter(size, rank)</p>\n</blockquote>\n<ul>\n<li>等级滤波器。</li>\n<li>对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。</li>\n<li>size，以像素点为中心size * size 的像素点中进行排序。</li>\n<li>rank，size * size 的像素中选择排序第rank位的像素作为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>RankFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"MinFilter-MedianFilter-MaxFilter\"><a href=\"#MinFilter-MedianFilter-MaxFilter\" class=\"headerlink\" title=\"MinFilter, MedianFilter,MaxFilter\"></a>MinFilter, MedianFilter,MaxFilter</h5><blockquote>\n<p>MinFilter(size)<br>最小滤波器。<br>MedianFilter(size)<br>中值滤波器。<br>MaxFilter(size)<br>最大滤波器。</p>\n</blockquote>\n<ul>\n<li>size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MinFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MedianFilterFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MaxFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"ModeFilter\"><a href=\"#ModeFilter\" class=\"headerlink\" title=\"ModeFilter\"></a>ModeFilter</h5><blockquote>\n<p>ModeFilter(size)</p>\n</blockquote>\n<ul>\n<li>模式滤波器</li>\n<li>size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>ModeFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/icamera0/article/details/50708888\">参考地址</a></p>\n<h4 id=\"滤镜函数\"><a href=\"#滤镜函数\" class=\"headerlink\" title=\"滤镜函数\"></a>滤镜函数</h4><h5 id=\"先看效果\"><a href=\"#先看效果\" class=\"headerlink\" title=\"先看效果\"></a>先看效果</h5><p><img src=\"https://img-blog.csdnimg.cn/20190729010351783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"Kernel\"><a href=\"#Kernel\" class=\"headerlink\" title=\"Kernel\"></a>Kernel</h5><blockquote>\n<p>Kernel(size, kernel, scale=None, offset=0)</p>\n</blockquote>\n<ul>\n<li>生成给定尺寸的卷积核，变量的size必须为(3, 3) 或(5, 5)。</li>\n<li>kernel与size对应，必须为9或25个整数或浮点数。</li>\n<li>如果设置scale，则卷积核作用于每个像素之后都要除以scale值，默认值为卷积核的权重之和。</li>\n<li>如果设置offset，则将offset值与卷积核相加，然后除以scale</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nKernel_im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>Kernel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"RankFilter\"><a href=\"#RankFilter\" class=\"headerlink\" title=\"RankFilter\"></a>RankFilter</h5><blockquote>\n<p>RankFilter(size, rank)</p>\n</blockquote>\n<ul>\n<li>等级滤波器。</li>\n<li>对于输入图像的每个像素点，等级滤波器根据像素值，在(size, size) 的区域中对所有像素点进行排序，然后拷贝对应等级的值存储到输出图像中。</li>\n<li>size，以像素点为中心size * size 的像素点中进行排序。</li>\n<li>rank，size * size 的像素中选择排序第rank位的像素作为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>RankFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"MinFilter-MedianFilter-MaxFilter\"><a href=\"#MinFilter-MedianFilter-MaxFilter\" class=\"headerlink\" title=\"MinFilter, MedianFilter,MaxFilter\"></a>MinFilter, MedianFilter,MaxFilter</h5><blockquote>\n<p>MinFilter(size)<br>最小滤波器。<br>MedianFilter(size)<br>中值滤波器。<br>MaxFilter(size)<br>最大滤波器。</p>\n</blockquote>\n<ul>\n<li>size，以像素点为中心的(size * size) 区域中选择最小、中值、最大的像素作为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MinFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MedianFilterFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>MaxFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"ModeFilter\"><a href=\"#ModeFilter\" class=\"headerlink\" title=\"ModeFilter\"></a>ModeFilter</h5><blockquote>\n<p>ModeFilter(size)</p>\n</blockquote>\n<ul>\n<li>模式滤波器</li>\n<li>size，以像素点为中心的(size * size)区域中选择出现次数最多的像素最为新值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\nim <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>ModeFilter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n"},{"title":"Python-PIL—Color","comments":1,"date":"2021-03-07T11:35:38.000Z","author":null,"_content":"\n#### ImageColor\n##### 十六进制\n- 共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000\n\n##### RGB\n- 如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)\n\n##### HSL(Hue-Saturation-Ligntness)\n- hsl(hue, saturation%, lightness%)\n- hue 为[0, 360], red=0, green=120, blue=240\n- saturation 为[0%, 100%] gray=0, full=100%\n- lightness 为[0%, 100%] black=0, normal=50%, white=100%\n- 如：hsl(0, 100%, 50%)\n\n##### Getrgb\n- 六种方法获取红色tuple值\n```python\nImageColors.getrgb(\"ff0000\")\n# (255,0,0)\nImageColors.getrgb(\"rgb(255,0,0)\")\n# (255,0,0)\nImageColors.getrgb(\"rgb(100%,0%,0%)\")\n# (255,0,0)\nImageColors.getrgb(\"hsl(0,100%,50%)\")\n# (255,0,0)\nImageColors.getrgb(\"red\") # 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色\n# (255,0,0)\nImageColors.getrgb(\"Red\")\n# (255,0,0)\n```\n\n\n","source":"_posts/2021-03-07-Python-PIL—Color.md","raw":"---\ntitle: Python-PIL—Color\ncomments: true\ndate: 2021-03-07 19:35:38\nauthor:\ntags:\n - Python\n - PIL\ncategories:\n - 后端开发\n---\n\n#### ImageColor\n##### 十六进制\n- 共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000\n\n##### RGB\n- 如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)\n\n##### HSL(Hue-Saturation-Ligntness)\n- hsl(hue, saturation%, lightness%)\n- hue 为[0, 360], red=0, green=120, blue=240\n- saturation 为[0%, 100%] gray=0, full=100%\n- lightness 为[0%, 100%] black=0, normal=50%, white=100%\n- 如：hsl(0, 100%, 50%)\n\n##### Getrgb\n- 六种方法获取红色tuple值\n```python\nImageColors.getrgb(\"ff0000\")\n# (255,0,0)\nImageColors.getrgb(\"rgb(255,0,0)\")\n# (255,0,0)\nImageColors.getrgb(\"rgb(100%,0%,0%)\")\n# (255,0,0)\nImageColors.getrgb(\"hsl(0,100%,50%)\")\n# (255,0,0)\nImageColors.getrgb(\"red\") # 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色\n# (255,0,0)\nImageColors.getrgb(\"Red\")\n# (255,0,0)\n```\n\n\n","slug":"Python-PIL—Color","published":1,"updated":"2021-03-07T11:36:50.566Z","_id":"cklz2x9sp000ujvs61fkb2s5g","layout":"post","photos":[],"link":"","content":"<h4 id=\"ImageColor\"><a href=\"#ImageColor\" class=\"headerlink\" title=\"ImageColor\"></a>ImageColor</h4><h5 id=\"十六进制\"><a href=\"#十六进制\" class=\"headerlink\" title=\"十六进制\"></a>十六进制</h5><ul>\n<li>共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000</li>\n</ul>\n<h5 id=\"RGB\"><a href=\"#RGB\" class=\"headerlink\" title=\"RGB\"></a>RGB</h5><ul>\n<li>如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)</li>\n</ul>\n<h5 id=\"HSL-Hue-Saturation-Ligntness\"><a href=\"#HSL-Hue-Saturation-Ligntness\" class=\"headerlink\" title=\"HSL(Hue-Saturation-Ligntness)\"></a>HSL(Hue-Saturation-Ligntness)</h5><ul>\n<li>hsl(hue, saturation%, lightness%)</li>\n<li>hue 为[0, 360], red=0, green=120, blue=240</li>\n<li>saturation 为[0%, 100%] gray=0, full=100%</li>\n<li>lightness 为[0%, 100%] black=0, normal=50%, white=100%</li>\n<li>如：hsl(0, 100%, 50%)</li>\n</ul>\n<h5 id=\"Getrgb\"><a href=\"#Getrgb\" class=\"headerlink\" title=\"Getrgb\"></a>Getrgb</h5><ul>\n<li>六种方法获取红色tuple值<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"ff0000\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"rgb(255,0,0)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"rgb(100%,0%,0%)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"hsl(0,100%,50%)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"ImageColor\"><a href=\"#ImageColor\" class=\"headerlink\" title=\"ImageColor\"></a>ImageColor</h4><h5 id=\"十六进制\"><a href=\"#十六进制\" class=\"headerlink\" title=\"十六进制\"></a>十六进制</h5><ul>\n<li>共六位前两位表示R，中间两位表示G，后两位表示B 如：#ff0000</li>\n</ul>\n<h5 id=\"RGB\"><a href=\"#RGB\" class=\"headerlink\" title=\"RGB\"></a>RGB</h5><ul>\n<li>如：rgb(255, 0, 0)、rgb(100%, 0%, 0%)</li>\n</ul>\n<h5 id=\"HSL-Hue-Saturation-Ligntness\"><a href=\"#HSL-Hue-Saturation-Ligntness\" class=\"headerlink\" title=\"HSL(Hue-Saturation-Ligntness)\"></a>HSL(Hue-Saturation-Ligntness)</h5><ul>\n<li>hsl(hue, saturation%, lightness%)</li>\n<li>hue 为[0, 360], red=0, green=120, blue=240</li>\n<li>saturation 为[0%, 100%] gray=0, full=100%</li>\n<li>lightness 为[0%, 100%] black=0, normal=50%, white=100%</li>\n<li>如：hsl(0, 100%, 50%)</li>\n</ul>\n<h5 id=\"Getrgb\"><a href=\"#Getrgb\" class=\"headerlink\" title=\"Getrgb\"></a>Getrgb</h5><ul>\n<li>六种方法获取红色tuple值<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"ff0000\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"rgb(255,0,0)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"rgb(100%,0%,0%)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"hsl(0,100%,50%)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不是每个颜色类型的单词都可以这样用，pil中罗列了常用的颜色</span>\n<span class=\"token comment\"># (255,0,0)</span>\nImageColors<span class=\"token punctuation\">.</span>getrgb<span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (255,0,0)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"Python-PIL—Transpose,Blend,Split,Composite","comments":1,"date":"2021-03-07T11:37:52.000Z","author":null,"_content":"\n#### Transpose 方向变换\n- 横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Blend 调节透明度并合并\n- \t前提：两张图片的尺寸和模式一致。\n- 一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。\n> - 合并公式：res_img = image1 * (1 - alpha) + image2 * alpha\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Split RGB通道\n每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Composite 两张图片合并，并加入mask图像作为透明度。\n- 前提：image1, image2, mask 图片的尺寸和模式一致。\n相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 原代码\n```python\n#!/usr/local/env python\n# -*- coding: utf-8 -*-\nfrom PIL import Image, ImageFont, ImageDraw\n\nfont_posotion = 20,20\ncolor =  255,0,0,255\nfont = ImageFont.truetype('Arial.ttf', size=25, encoding=\"unic\")\nthumbnail_size = 400,400\nrow_count = 3\n\n\ndef create_thumbnail(src_file):\n    size = thumbnail_size\n    im = Image.open(src_file)\n\n    im.thumbnail(size, Image.ANTIALIAS)\n    return im\n\ndef get_position(count):\n\n    width = thumbnail_size[0]\n    pic_width = width*row_count\n    position = (count * width)%pic_width, (count * width)/pic_width*width\n    return position\n\ndef get_pic_size(thumbnail_size, pic_num, row_count):\n    pic_width = thumbnail_size[0] * row_count\n    extra_row = 1 if pic_num % row_count else 0\n    pic_height = (pic_num / row_count + extra_row) * thumbnail_size[1]\n\n    return pic_width, pic_height\n\n\nclass MyTranspose(object):\n    FLIP_LEFT_RIGHT = \"FLIP_LEFT_RIGHT\"\n    FLIP_TOP_BOTTOM = \"FLIP_TOP_BOTTOM\"\n    ROTATE_90 = \"ROTATE_90\"\n    ROTATE_180 = \"ROTATE_180\"\n    ROTATE_270 = \"ROTATE_270\"\n    TRANSPOSE = \"TRANSPOSE\"\n\n    TransposeList = [FLIP_LEFT_RIGHT,FLIP_TOP_BOTTOM,ROTATE_90,ROTATE_180,ROTATE_270,TRANSPOSE]\n    ImageTransposeList = [Image.FLIP_LEFT_RIGHT,Image.FLIP_TOP_BOTTOM,Image.ROTATE_90,\n                          Image.ROTATE_180,Image.ROTATE_270,Image.TRANSPOSE]\n\nclass MySplit(object):\n    R = \"R\"\n    G = \"G\"\n    B = \"B\"\n\n    SplitList = [R, G, B]\n\ndef create_transpose(src_file):\n    # 方向变换\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyTranspose.TransposeList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, len(MyTranspose.TransposeList)):\n        img = thumbnail_im.copy()\n        CONTOURimg = img.transpose(MyTranspose.ImageTransposeList[i])\n        CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n        CONTOURdraw.text(font_posotion, MyTranspose.TransposeList[count], font=font, fill=color)\n        image.paste(CONTOURimg, get_position(count))\n        count+=1\n    CONTOURimg = thumbnail_im.copy()\n    CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n    CONTOURdraw.text(font_posotion, \"ORIGINAL PIC\", font=font, fill=color)\n    image.paste(CONTOURimg, get_position(count))\n    # image.show()\n    image.save(\"transpose.jpg\")\n\ndef create_blend(src_file):\n    # 合并\n    img = Image.open(src_file)\n    copy_img = img.transpose(Image.FLIP_LEFT_RIGHT)\n    res_img = Image.blend(img, copy_img, 0.5)\n\n    res_img.show()\n\ndef create_composite(src_file):\n    # 蒙版工具\n    count = 0\n    mask_name = [\"R\",\"G\",\"B\"]\n    image = Image.new(\"RGBA\", (1200,400), \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, 3):\n        print i\n        copy_img = thumbnail_im.transpose(Image.FLIP_LEFT_RIGHT)\n        res_img = Image.blend(thumbnail_im, copy_img, 0.5)\n        my_split = res_img.split()\n        im = Image.composite(thumbnail_im, res_img, my_split[i])\n        CONTOURdraw = ImageDraw.Draw(im)\n        CONTOURdraw.text(font_posotion, \"mask: %s\" % mask_name[i], font=font, fill=color)\n        image.paste(im, get_position(count))\n        count += 1\n    image.save(\"composite.jpg\")\n    # image.show()\n\ndef create_split(src_file):\n    # 图层\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MySplit.SplitList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, len(MySplit.SplitList)):\n        CONTOURimg = thumbnail_im.split()[i].copy()\n        CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n        CONTOURdraw.text(font_posotion, MySplit.SplitList[count], font=font)\n        image.paste(CONTOURimg, get_position(count))\n        count += 1\n\n    # image.show()\n    image.save(\"split.jpg\")\n\nif __name__ == '__main__':\n    # create_transpose(\"res.jpg\")\n    # create_split(\"res.jpg\")\n    # create_blend(\"res.jpg\")\n    create_composite(\"res.jpg\")\n\n```\n","source":"_posts/2021-03-07-Python-PIL—Transpose-Blend-Split-Composite.md","raw":"---\ntitle: 'Python-PIL—Transpose,Blend,Split,Composite'\ncomments: true\ndate: 2021-03-07 19:37:52\nauthor:\ntags:\n - Python\n - PIL\ncategories:\n - 后端开发\n---\n\n#### Transpose 方向变换\n- 横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Blend 调节透明度并合并\n- \t前提：两张图片的尺寸和模式一致。\n- 一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。\n> - 合并公式：res_img = image1 * (1 - alpha) + image2 * alpha\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Split RGB通道\n每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### Composite 两张图片合并，并加入mask图像作为透明度。\n- 前提：image1, image2, mask 图片的尺寸和模式一致。\n相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 原代码\n```python\n#!/usr/local/env python\n# -*- coding: utf-8 -*-\nfrom PIL import Image, ImageFont, ImageDraw\n\nfont_posotion = 20,20\ncolor =  255,0,0,255\nfont = ImageFont.truetype('Arial.ttf', size=25, encoding=\"unic\")\nthumbnail_size = 400,400\nrow_count = 3\n\n\ndef create_thumbnail(src_file):\n    size = thumbnail_size\n    im = Image.open(src_file)\n\n    im.thumbnail(size, Image.ANTIALIAS)\n    return im\n\ndef get_position(count):\n\n    width = thumbnail_size[0]\n    pic_width = width*row_count\n    position = (count * width)%pic_width, (count * width)/pic_width*width\n    return position\n\ndef get_pic_size(thumbnail_size, pic_num, row_count):\n    pic_width = thumbnail_size[0] * row_count\n    extra_row = 1 if pic_num % row_count else 0\n    pic_height = (pic_num / row_count + extra_row) * thumbnail_size[1]\n\n    return pic_width, pic_height\n\n\nclass MyTranspose(object):\n    FLIP_LEFT_RIGHT = \"FLIP_LEFT_RIGHT\"\n    FLIP_TOP_BOTTOM = \"FLIP_TOP_BOTTOM\"\n    ROTATE_90 = \"ROTATE_90\"\n    ROTATE_180 = \"ROTATE_180\"\n    ROTATE_270 = \"ROTATE_270\"\n    TRANSPOSE = \"TRANSPOSE\"\n\n    TransposeList = [FLIP_LEFT_RIGHT,FLIP_TOP_BOTTOM,ROTATE_90,ROTATE_180,ROTATE_270,TRANSPOSE]\n    ImageTransposeList = [Image.FLIP_LEFT_RIGHT,Image.FLIP_TOP_BOTTOM,Image.ROTATE_90,\n                          Image.ROTATE_180,Image.ROTATE_270,Image.TRANSPOSE]\n\nclass MySplit(object):\n    R = \"R\"\n    G = \"G\"\n    B = \"B\"\n\n    SplitList = [R, G, B]\n\ndef create_transpose(src_file):\n    # 方向变换\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyTranspose.TransposeList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, len(MyTranspose.TransposeList)):\n        img = thumbnail_im.copy()\n        CONTOURimg = img.transpose(MyTranspose.ImageTransposeList[i])\n        CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n        CONTOURdraw.text(font_posotion, MyTranspose.TransposeList[count], font=font, fill=color)\n        image.paste(CONTOURimg, get_position(count))\n        count+=1\n    CONTOURimg = thumbnail_im.copy()\n    CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n    CONTOURdraw.text(font_posotion, \"ORIGINAL PIC\", font=font, fill=color)\n    image.paste(CONTOURimg, get_position(count))\n    # image.show()\n    image.save(\"transpose.jpg\")\n\ndef create_blend(src_file):\n    # 合并\n    img = Image.open(src_file)\n    copy_img = img.transpose(Image.FLIP_LEFT_RIGHT)\n    res_img = Image.blend(img, copy_img, 0.5)\n\n    res_img.show()\n\ndef create_composite(src_file):\n    # 蒙版工具\n    count = 0\n    mask_name = [\"R\",\"G\",\"B\"]\n    image = Image.new(\"RGBA\", (1200,400), \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, 3):\n        print i\n        copy_img = thumbnail_im.transpose(Image.FLIP_LEFT_RIGHT)\n        res_img = Image.blend(thumbnail_im, copy_img, 0.5)\n        my_split = res_img.split()\n        im = Image.composite(thumbnail_im, res_img, my_split[i])\n        CONTOURdraw = ImageDraw.Draw(im)\n        CONTOURdraw.text(font_posotion, \"mask: %s\" % mask_name[i], font=font, fill=color)\n        image.paste(im, get_position(count))\n        count += 1\n    image.save(\"composite.jpg\")\n    # image.show()\n\ndef create_split(src_file):\n    # 图层\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MySplit.SplitList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n    for i in range(0, len(MySplit.SplitList)):\n        CONTOURimg = thumbnail_im.split()[i].copy()\n        CONTOURdraw = ImageDraw.Draw(CONTOURimg)\n        CONTOURdraw.text(font_posotion, MySplit.SplitList[count], font=font)\n        image.paste(CONTOURimg, get_position(count))\n        count += 1\n\n    # image.show()\n    image.save(\"split.jpg\")\n\nif __name__ == '__main__':\n    # create_transpose(\"res.jpg\")\n    # create_split(\"res.jpg\")\n    # create_blend(\"res.jpg\")\n    create_composite(\"res.jpg\")\n\n```\n","slug":"Python-PIL—Transpose-Blend-Split-Composite","published":1,"updated":"2021-03-07T11:38:24.381Z","_id":"cklz305ls0010jvs62ss7c4k1","layout":"post","photos":[],"link":"","content":"<h4 id=\"Transpose-方向变换\"><a href=\"#Transpose-方向变换\" class=\"headerlink\" title=\"Transpose 方向变换\"></a>Transpose 方向变换</h4><ul>\n<li>横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Blend-调节透明度并合并\"><a href=\"#Blend-调节透明度并合并\" class=\"headerlink\" title=\"Blend 调节透明度并合并\"></a>Blend 调节透明度并合并</h4><ul>\n<li><pre><code>前提：两张图片的尺寸和模式一致。\n</code></pre>\n</li>\n<li>一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。<blockquote>\n<ul>\n<li>合并公式：res_img = image1 * (1 - alpha) + image2 * alpha</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Split-RGB通道\"><a href=\"#Split-RGB通道\" class=\"headerlink\" title=\"Split RGB通道\"></a>Split RGB通道</h4><p>每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。<br><img src=\"https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Composite-两张图片合并，并加入mask图像作为透明度。\"><a href=\"#Composite-两张图片合并，并加入mask图像作为透明度。\" class=\"headerlink\" title=\"Composite 两张图片合并，并加入mask图像作为透明度。\"></a>Composite 两张图片合并，并加入mask图像作为透明度。</h4><ul>\n<li>前提：image1, image2, mask 图片的尺寸和模式一致。<br>相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。<br><img src=\"https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"原代码\"><a href=\"#原代码\" class=\"headerlink\" title=\"原代码\"></a>原代码</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/local/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageDraw\n\nfont_posotion <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>\ncolor <span class=\"token operator\">=</span>  <span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span>\nfont <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial.ttf'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"unic\"</span><span class=\"token punctuation\">)</span>\nthumbnail_size <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span>\nrow_count <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_thumbnail</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> thumbnail_size\n    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    im<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> im\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_position</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    pic_width <span class=\"token operator\">=</span> width<span class=\"token operator\">*</span>row_count\n    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>pic_width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>pic_width<span class=\"token operator\">*</span>width\n    <span class=\"token keyword\">return</span> position\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pic_size</span><span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> pic_num<span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pic_width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> row_count\n    extra_row <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> pic_num <span class=\"token operator\">%</span> row_count <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    pic_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pic_num <span class=\"token operator\">/</span> row_count <span class=\"token operator\">+</span> extra_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> pic_width<span class=\"token punctuation\">,</span> pic_height\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTranspose</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    FLIP_LEFT_RIGHT <span class=\"token operator\">=</span> <span class=\"token string\">\"FLIP_LEFT_RIGHT\"</span>\n    FLIP_TOP_BOTTOM <span class=\"token operator\">=</span> <span class=\"token string\">\"FLIP_TOP_BOTTOM\"</span>\n    ROTATE_90 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_90\"</span>\n    ROTATE_180 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_180\"</span>\n    ROTATE_270 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_270\"</span>\n    TRANSPOSE <span class=\"token operator\">=</span> <span class=\"token string\">\"TRANSPOSE\"</span>\n\n    TransposeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">,</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">,</span>ROTATE_90<span class=\"token punctuation\">,</span>ROTATE_180<span class=\"token punctuation\">,</span>ROTATE_270<span class=\"token punctuation\">,</span>TRANSPOSE<span class=\"token punctuation\">]</span>\n    ImageTransposeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>ROTATE_90<span class=\"token punctuation\">,</span>\n                          Image<span class=\"token punctuation\">.</span>ROTATE_180<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>ROTATE_270<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>TRANSPOSE<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySplit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    R <span class=\"token operator\">=</span> <span class=\"token string\">\"R\"</span>\n    G <span class=\"token operator\">=</span> <span class=\"token string\">\"G\"</span>\n    B <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span>\n\n    SplitList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_transpose</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 方向变换</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>ImageTransposeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n    CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n    CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ORIGINAL PIC\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n    image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># image.show()</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"transpose.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_blend</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 合并</span>\n    img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    copy_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\n    res_img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>blend<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> copy_img<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    res_img<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_composite</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 蒙版工具</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    mask_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> i\n        copy_img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\n        res_img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>blend<span class=\"token punctuation\">(</span>thumbnail_im<span class=\"token punctuation\">,</span> copy_img<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        my_split <span class=\"token operator\">=</span> res_img<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>composite<span class=\"token punctuation\">(</span>thumbnail_im<span class=\"token punctuation\">,</span> res_img<span class=\"token punctuation\">,</span> my_split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mask: %s\"</span> <span class=\"token operator\">%</span> mask_name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"composite.jpg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># image.show()</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_split</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 图层</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.show()</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"split.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># create_transpose(\"res.jpg\")</span>\n    <span class=\"token comment\"># create_split(\"res.jpg\")</span>\n    <span class=\"token comment\"># create_blend(\"res.jpg\")</span>\n    create_composite<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"Transpose-方向变换\"><a href=\"#Transpose-方向变换\" class=\"headerlink\" title=\"Transpose 方向变换\"></a>Transpose 方向变换</h4><ul>\n<li>横看成岭侧成峰，好不容易有了Object，还不从各个方向都欣赏一下。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727215620420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Blend-调节透明度并合并\"><a href=\"#Blend-调节透明度并合并\" class=\"headerlink\" title=\"Blend 调节透明度并合并\"></a>Blend 调节透明度并合并</h4><ul>\n<li><pre><code>前提：两张图片的尺寸和模式一致。\n</code></pre>\n</li>\n<li>一张图想同时放两个Object，也不是不可以，但是图这两个Object怎么分配资源？当然是55开还是28开都可以，原则就是你只有两者的和为1。<blockquote>\n<ul>\n<li>合并公式：res_img = image1 * (1 - alpha) + image2 * alpha</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727220007302.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Split-RGB通道\"><a href=\"#Split-RGB通道\" class=\"headerlink\" title=\"Split RGB通道\"></a>Split RGB通道</h4><p>每张图片都是有红绿蓝三个通道的，split方法可以将三个通道分离，像不像三种肤色的Object。<br><img src=\"https://img-blog.csdnimg.cn/20190727220155886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"Composite-两张图片合并，并加入mask图像作为透明度。\"><a href=\"#Composite-两张图片合并，并加入mask图像作为透明度。\" class=\"headerlink\" title=\"Composite 两张图片合并，并加入mask图像作为透明度。\"></a>Composite 两张图片合并，并加入mask图像作为透明度。</h4><ul>\n<li>前提：image1, image2, mask 图片的尺寸和模式一致。<br>相当于Photoshop里的通道蒙版，下图效果不是特别好，可以注意一下图1的嘴，颜色没有图2、3明显。拿自己的Object试试看，可能对比效果会好一点。<br><img src=\"https://img-blog.csdnimg.cn/20190727220505748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><h4 id=\"原代码\"><a href=\"#原代码\" class=\"headerlink\" title=\"原代码\"></a>原代码</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/local/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageDraw\n\nfont_posotion <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>\ncolor <span class=\"token operator\">=</span>  <span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span>\nfont <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial.ttf'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"unic\"</span><span class=\"token punctuation\">)</span>\nthumbnail_size <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span>\nrow_count <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_thumbnail</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> thumbnail_size\n    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    im<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> im\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_position</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    pic_width <span class=\"token operator\">=</span> width<span class=\"token operator\">*</span>row_count\n    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>pic_width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>pic_width<span class=\"token operator\">*</span>width\n    <span class=\"token keyword\">return</span> position\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pic_size</span><span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> pic_num<span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pic_width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> row_count\n    extra_row <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> pic_num <span class=\"token operator\">%</span> row_count <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    pic_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pic_num <span class=\"token operator\">/</span> row_count <span class=\"token operator\">+</span> extra_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> pic_width<span class=\"token punctuation\">,</span> pic_height\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTranspose</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    FLIP_LEFT_RIGHT <span class=\"token operator\">=</span> <span class=\"token string\">\"FLIP_LEFT_RIGHT\"</span>\n    FLIP_TOP_BOTTOM <span class=\"token operator\">=</span> <span class=\"token string\">\"FLIP_TOP_BOTTOM\"</span>\n    ROTATE_90 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_90\"</span>\n    ROTATE_180 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_180\"</span>\n    ROTATE_270 <span class=\"token operator\">=</span> <span class=\"token string\">\"ROTATE_270\"</span>\n    TRANSPOSE <span class=\"token operator\">=</span> <span class=\"token string\">\"TRANSPOSE\"</span>\n\n    TransposeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">,</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">,</span>ROTATE_90<span class=\"token punctuation\">,</span>ROTATE_180<span class=\"token punctuation\">,</span>ROTATE_270<span class=\"token punctuation\">,</span>TRANSPOSE<span class=\"token punctuation\">]</span>\n    ImageTransposeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>FLIP_TOP_BOTTOM<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>ROTATE_90<span class=\"token punctuation\">,</span>\n                          Image<span class=\"token punctuation\">.</span>ROTATE_180<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>ROTATE_270<span class=\"token punctuation\">,</span>Image<span class=\"token punctuation\">.</span>TRANSPOSE<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySplit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    R <span class=\"token operator\">=</span> <span class=\"token string\">\"R\"</span>\n    G <span class=\"token operator\">=</span> <span class=\"token string\">\"G\"</span>\n    B <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span>\n\n    SplitList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_transpose</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 方向变换</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>MyTranspose<span class=\"token punctuation\">.</span>ImageTransposeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyTranspose<span class=\"token punctuation\">.</span>TransposeList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n    CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n    CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ORIGINAL PIC\"</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n    image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># image.show()</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"transpose.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_blend</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 合并</span>\n    img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    copy_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\n    res_img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>blend<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> copy_img<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    res_img<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_composite</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 蒙版工具</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    mask_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> i\n        copy_img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span>FLIP_LEFT_RIGHT<span class=\"token punctuation\">)</span>\n        res_img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>blend<span class=\"token punctuation\">(</span>thumbnail_im<span class=\"token punctuation\">,</span> copy_img<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        my_split <span class=\"token operator\">=</span> res_img<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>composite<span class=\"token punctuation\">(</span>thumbnail_im<span class=\"token punctuation\">,</span> res_img<span class=\"token punctuation\">,</span> my_split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mask: %s\"</span> <span class=\"token operator\">%</span> mask_name<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"composite.jpg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># image.show()</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_split</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 图层</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MySplit<span class=\"token punctuation\">.</span>SplitList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOURimg<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.show()</span>\n    image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"split.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># create_transpose(\"res.jpg\")</span>\n    <span class=\"token comment\"># create_split(\"res.jpg\")</span>\n    <span class=\"token comment\"># create_blend(\"res.jpg\")</span>\n    create_composite<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"Python-PIL—Mode,ImageFilter对比实践","comments":1,"date":"2021-03-07T11:38:56.000Z","author":null,"_content":"\n#### 原图\n- 学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n#### 图像的mode\n- mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。\n\n| modes | 描述 |\n| --- | --- |\n| 1 | 1位像素，黑和白，存成8位的像素 |\n| L | 8位像素，黑白 |\n| P | 8位像素，使用调色板映射到任何其他模式 |\n| RGB | 3*8位像素，真彩 |\n| RGBA | 4*8位像素，真彩+透明通道 |\n| CMYK | 4*8位像素，颜色隔离 |\n| YCbCr | 3*8位像素，彩色视频格式 |\n| I | 32位整形像素 |\n| F | 32位浮点型像素 |\n| RGBX | 有padding的真彩色 |\n| HSV |  |\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 图像滤波器\n- 你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。\n\n| Filter | 描述 |\n|--|--|\n| BLUR | 模糊滤波 |\n| CONTOUR | 轮廓滤波 |\n| DETAIL | 细节增强滤波 |\n| EDGE_ENHANCE | 边缘增强滤波 |\n| EDGE_ENHANCE_MORE | 深度边缘增强滤波 |\n| EMBOSS | 浮雕滤波 |\n| FIND_EDGES | 寻找边缘信息的滤波 |\n| SMOOTH | 平滑滤波 |\n| SMOOTH_MORE | 深度平滑滤波 |\n| SHARPEN | 锐化滤波 |\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 原代码\n```python\n#!/usr/local/env python\n# -*- coding: utf-8 -*-\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\nfont_posotion = 20,20\ncolor =  255,0,0,255\nfont = ImageFont.truetype('Arial.ttf', size=25, encoding=\"unic\")\nthumbnail_size = 400,400\nrow_count = 4\n\n\ndef create_thumbnail(src_file):\n    size = thumbnail_size\n    im = Image.open(src_file)\n\n    im.thumbnail(size, Image.ANTIALIAS)\n    return im\n\n\nclass MyFilter(object):\n    BLUR = \"BLUR\"\n    CONTOUR = \"CONTOUR\"\n    DETAIL = \"DETAIL\"\n    EDGE_ENHANCE = \"EDGE_ENHANCE\"\n    EDGE_ENHANCE_MORE = \"EDGE_ENHANCE_MORE\"\n    EMBOSS = \"EMBOSS\"\n    FIND_EDGES = \"FIND_EDGES\"\n    SMOOTH = \"SMOOTH\"\n    SMOOTH_MORE = \"SMOOTH_MORE\"\n    SHARPEN = \"SHARPEN\"\n\n    FilterList = [BLUR, CONTOUR, DETAIL,\n                  EDGE_ENHANCE, EDGE_ENHANCE_MORE, EMBOSS,\n                  FIND_EDGES, SMOOTH, SMOOTH_MORE,\n                  SHARPEN]\n\n    ImageFilterList = [ImageFilter.BLUR, ImageFilter.CONTOUR, ImageFilter.DETAIL,\n                       ImageFilter.EDGE_ENHANCE, ImageFilter.EDGE_ENHANCE_MORE, ImageFilter.EMBOSS,\n                       ImageFilter.FIND_EDGES, ImageFilter.SMOOTH, ImageFilter.SMOOTH_MORE,\n                       ImageFilter.SHARPEN]\n\nclass MyMode(object):\n    MODE1 = \"1\"\n    L = \"L\"\n    I = \"I\"\n    F = \"F\"\n    P = \"P\"\n    RGB = \"RGB\"\n    RGBX = \"RGBX\"\n    RGBA = \"RGBA\"\n    CMYK = \"CMYK\"\n    YCbCr = \"YCbCr\"\n    # LAB = \"LAB\"\n    HSV = \"HSV\"\n\n    ModeList = [MODE1, L, I, F, P, RGB, RGBX, RGBA, CMYK, YCbCr, HSV]\n\ndef get_position(count):\n\n    width = thumbnail_size[0]\n    pic_width = width*row_count\n    position = (count * width)%pic_width, (count * width)/pic_width*width\n    return position\n\ndef get_pic_size(thumbnail_size, pic_num, row_count):\n    pic_width = thumbnail_size[0] * row_count\n    extra_row = 1 if pic_num % row_count else 0\n    pic_height = (pic_num / row_count + extra_row) * thumbnail_size[1]\n\n    return pic_width, pic_height\n\ndef create_filter(src_file):\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyFilter.FilterList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n\n    for i in range(0, len(MyFilter.FilterList)):\n        CONTOURimg = thumbnail_im.copy()\n        CONTOUR = CONTOURimg.filter(MyFilter.ImageFilterList[count])\n        CONTOURdraw = ImageDraw.Draw(CONTOUR)\n        CONTOURdraw.text(font_posotion, MyFilter.FilterList[count], font=font, fill=color)\n        image.paste(CONTOUR, get_position(count))\n        count += 1\n\n    # image.save(\"filter.jpg\")\n    image.show()\n\ndef create_mode(src_file):\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyMode.ModeList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n\n    for i in range(0, len(MyMode.ModeList)):\n        img = thumbnail_im.copy()\n        CONTOURdraw = ImageDraw.Draw(img)\n        CONTOURdraw.text(font_posotion, MyMode.ModeList[count], font=font, fill=color)\n\n        CONTOUR = img.convert(MyMode.ModeList[i])\n\n        image.paste(CONTOUR, get_position(count))\n        count += 1\n\n    # image.save(\"mode.jpg\")\n    image.show()\n\n\nif __name__ == '__main__':\n    create_mode(\"res.jpg\")\n    create_filter(\"res.jpg\")\n    \n\n```\n","source":"_posts/2021-03-07-Python-PIL—Mode-ImageFilter对比实践.md","raw":"---\ntitle: 'Python-PIL—Mode,ImageFilter对比实践'\ncomments: true\ndate: 2021-03-07 19:38:56\nauthor:\ntags:\n - Python\n - PIL\ncategories:\n - 后端开发\n---\n\n#### 原图\n- 学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n\n#### 图像的mode\n- mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。\n\n| modes | 描述 |\n| --- | --- |\n| 1 | 1位像素，黑和白，存成8位的像素 |\n| L | 8位像素，黑白 |\n| P | 8位像素，使用调色板映射到任何其他模式 |\n| RGB | 3*8位像素，真彩 |\n| RGBA | 4*8位像素，真彩+透明通道 |\n| CMYK | 4*8位像素，颜色隔离 |\n| YCbCr | 3*8位像素，彩色视频格式 |\n| I | 32位整形像素 |\n| F | 32位浮点型像素 |\n| RGBX | 有padding的真彩色 |\n| HSV |  |\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 图像滤波器\n- 你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。\n\n| Filter | 描述 |\n|--|--|\n| BLUR | 模糊滤波 |\n| CONTOUR | 轮廓滤波 |\n| DETAIL | 细节增强滤波 |\n| EDGE_ENHANCE | 边缘增强滤波 |\n| EDGE_ENHANCE_MORE | 深度边缘增强滤波 |\n| EMBOSS | 浮雕滤波 |\n| FIND_EDGES | 寻找边缘信息的滤波 |\n| SMOOTH | 平滑滤波 |\n| SMOOTH_MORE | 深度平滑滤波 |\n| SHARPEN | 锐化滤波 |\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n#### 原代码\n```python\n#!/usr/local/env python\n# -*- coding: utf-8 -*-\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\nfont_posotion = 20,20\ncolor =  255,0,0,255\nfont = ImageFont.truetype('Arial.ttf', size=25, encoding=\"unic\")\nthumbnail_size = 400,400\nrow_count = 4\n\n\ndef create_thumbnail(src_file):\n    size = thumbnail_size\n    im = Image.open(src_file)\n\n    im.thumbnail(size, Image.ANTIALIAS)\n    return im\n\n\nclass MyFilter(object):\n    BLUR = \"BLUR\"\n    CONTOUR = \"CONTOUR\"\n    DETAIL = \"DETAIL\"\n    EDGE_ENHANCE = \"EDGE_ENHANCE\"\n    EDGE_ENHANCE_MORE = \"EDGE_ENHANCE_MORE\"\n    EMBOSS = \"EMBOSS\"\n    FIND_EDGES = \"FIND_EDGES\"\n    SMOOTH = \"SMOOTH\"\n    SMOOTH_MORE = \"SMOOTH_MORE\"\n    SHARPEN = \"SHARPEN\"\n\n    FilterList = [BLUR, CONTOUR, DETAIL,\n                  EDGE_ENHANCE, EDGE_ENHANCE_MORE, EMBOSS,\n                  FIND_EDGES, SMOOTH, SMOOTH_MORE,\n                  SHARPEN]\n\n    ImageFilterList = [ImageFilter.BLUR, ImageFilter.CONTOUR, ImageFilter.DETAIL,\n                       ImageFilter.EDGE_ENHANCE, ImageFilter.EDGE_ENHANCE_MORE, ImageFilter.EMBOSS,\n                       ImageFilter.FIND_EDGES, ImageFilter.SMOOTH, ImageFilter.SMOOTH_MORE,\n                       ImageFilter.SHARPEN]\n\nclass MyMode(object):\n    MODE1 = \"1\"\n    L = \"L\"\n    I = \"I\"\n    F = \"F\"\n    P = \"P\"\n    RGB = \"RGB\"\n    RGBX = \"RGBX\"\n    RGBA = \"RGBA\"\n    CMYK = \"CMYK\"\n    YCbCr = \"YCbCr\"\n    # LAB = \"LAB\"\n    HSV = \"HSV\"\n\n    ModeList = [MODE1, L, I, F, P, RGB, RGBX, RGBA, CMYK, YCbCr, HSV]\n\ndef get_position(count):\n\n    width = thumbnail_size[0]\n    pic_width = width*row_count\n    position = (count * width)%pic_width, (count * width)/pic_width*width\n    return position\n\ndef get_pic_size(thumbnail_size, pic_num, row_count):\n    pic_width = thumbnail_size[0] * row_count\n    extra_row = 1 if pic_num % row_count else 0\n    pic_height = (pic_num / row_count + extra_row) * thumbnail_size[1]\n\n    return pic_width, pic_height\n\ndef create_filter(src_file):\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyFilter.FilterList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n\n    for i in range(0, len(MyFilter.FilterList)):\n        CONTOURimg = thumbnail_im.copy()\n        CONTOUR = CONTOURimg.filter(MyFilter.ImageFilterList[count])\n        CONTOURdraw = ImageDraw.Draw(CONTOUR)\n        CONTOURdraw.text(font_posotion, MyFilter.FilterList[count], font=font, fill=color)\n        image.paste(CONTOUR, get_position(count))\n        count += 1\n\n    # image.save(\"filter.jpg\")\n    image.show()\n\ndef create_mode(src_file):\n    count = 0\n    pic_size = get_pic_size(thumbnail_size, len(MyMode.ModeList), row_count)\n    image = Image.new(\"RGBA\", pic_size, \"white\")\n    thumbnail_im = create_thumbnail(src_file)\n\n    for i in range(0, len(MyMode.ModeList)):\n        img = thumbnail_im.copy()\n        CONTOURdraw = ImageDraw.Draw(img)\n        CONTOURdraw.text(font_posotion, MyMode.ModeList[count], font=font, fill=color)\n\n        CONTOUR = img.convert(MyMode.ModeList[i])\n\n        image.paste(CONTOUR, get_position(count))\n        count += 1\n\n    # image.save(\"mode.jpg\")\n    image.show()\n\n\nif __name__ == '__main__':\n    create_mode(\"res.jpg\")\n    create_filter(\"res.jpg\")\n    \n\n```\n","slug":"Python-PIL—Mode-ImageFilter对比实践","published":1,"updated":"2021-03-07T11:39:37.839Z","_id":"cklz31iqm0014jvs6c29jbj5i","layout":"post","photos":[],"link":"","content":"<h4 id=\"原图\"><a href=\"#原图\" class=\"headerlink\" title=\"原图\"></a>原图</h4><ul>\n<li>学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"图像的mode\"><a href=\"#图像的mode\" class=\"headerlink\" title=\"图像的mode\"></a>图像的mode</h4><ul>\n<li>mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>modes</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1位像素，黑和白，存成8位的像素</td>\n</tr>\n<tr>\n<td>L</td>\n<td>8位像素，黑白</td>\n</tr>\n<tr>\n<td>P</td>\n<td>8位像素，使用调色板映射到任何其他模式</td>\n</tr>\n<tr>\n<td>RGB</td>\n<td>3*8位像素，真彩</td>\n</tr>\n<tr>\n<td>RGBA</td>\n<td>4*8位像素，真彩+透明通道</td>\n</tr>\n<tr>\n<td>CMYK</td>\n<td>4*8位像素，颜色隔离</td>\n</tr>\n<tr>\n<td>YCbCr</td>\n<td>3*8位像素，彩色视频格式</td>\n</tr>\n<tr>\n<td>I</td>\n<td>32位整形像素</td>\n</tr>\n<tr>\n<td>F</td>\n<td>32位浮点型像素</td>\n</tr>\n<tr>\n<td>RGBX</td>\n<td>有padding的真彩色</td>\n</tr>\n<tr>\n<td>HSV</td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"图像滤波器\"><a href=\"#图像滤波器\" class=\"headerlink\" title=\"图像滤波器\"></a>图像滤波器</h4><ul>\n<li>你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Filter</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BLUR</td>\n<td>模糊滤波</td>\n</tr>\n<tr>\n<td>CONTOUR</td>\n<td>轮廓滤波</td>\n</tr>\n<tr>\n<td>DETAIL</td>\n<td>细节增强滤波</td>\n</tr>\n<tr>\n<td>EDGE_ENHANCE</td>\n<td>边缘增强滤波</td>\n</tr>\n<tr>\n<td>EDGE_ENHANCE_MORE</td>\n<td>深度边缘增强滤波</td>\n</tr>\n<tr>\n<td>EMBOSS</td>\n<td>浮雕滤波</td>\n</tr>\n<tr>\n<td>FIND_EDGES</td>\n<td>寻找边缘信息的滤波</td>\n</tr>\n<tr>\n<td>SMOOTH</td>\n<td>平滑滤波</td>\n</tr>\n<tr>\n<td>SMOOTH_MORE</td>\n<td>深度平滑滤波</td>\n</tr>\n<tr>\n<td>SHARPEN</td>\n<td>锐化滤波</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"原代码\"><a href=\"#原代码\" class=\"headerlink\" title=\"原代码\"></a>原代码</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/local/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageFilter\n\nfont_posotion <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>\ncolor <span class=\"token operator\">=</span>  <span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span>\nfont <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial.ttf'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"unic\"</span><span class=\"token punctuation\">)</span>\nthumbnail_size <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span>\nrow_count <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_thumbnail</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> thumbnail_size\n    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    im<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> im\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    BLUR <span class=\"token operator\">=</span> <span class=\"token string\">\"BLUR\"</span>\n    CONTOUR <span class=\"token operator\">=</span> <span class=\"token string\">\"CONTOUR\"</span>\n    DETAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"DETAIL\"</span>\n    EDGE_ENHANCE <span class=\"token operator\">=</span> <span class=\"token string\">\"EDGE_ENHANCE\"</span>\n    EDGE_ENHANCE_MORE <span class=\"token operator\">=</span> <span class=\"token string\">\"EDGE_ENHANCE_MORE\"</span>\n    EMBOSS <span class=\"token operator\">=</span> <span class=\"token string\">\"EMBOSS\"</span>\n    FIND_EDGES <span class=\"token operator\">=</span> <span class=\"token string\">\"FIND_EDGES\"</span>\n    SMOOTH <span class=\"token operator\">=</span> <span class=\"token string\">\"SMOOTH\"</span>\n    SMOOTH_MORE <span class=\"token operator\">=</span> <span class=\"token string\">\"SMOOTH_MORE\"</span>\n    SHARPEN <span class=\"token operator\">=</span> <span class=\"token string\">\"SHARPEN\"</span>\n\n    FilterList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BLUR<span class=\"token punctuation\">,</span> CONTOUR<span class=\"token punctuation\">,</span> DETAIL<span class=\"token punctuation\">,</span>\n                  EDGE_ENHANCE<span class=\"token punctuation\">,</span> EDGE_ENHANCE_MORE<span class=\"token punctuation\">,</span> EMBOSS<span class=\"token punctuation\">,</span>\n                  FIND_EDGES<span class=\"token punctuation\">,</span> SMOOTH<span class=\"token punctuation\">,</span> SMOOTH_MORE<span class=\"token punctuation\">,</span>\n                  SHARPEN<span class=\"token punctuation\">]</span>\n\n    ImageFilterList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ImageFilter<span class=\"token punctuation\">.</span>BLUR<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>CONTOUR<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>DETAIL<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>EDGE_ENHANCE<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>EDGE_ENHANCE_MORE<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>EMBOSS<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>FIND_EDGES<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>SMOOTH<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>SMOOTH_MORE<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>SHARPEN<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    MODE1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n    L <span class=\"token operator\">=</span> <span class=\"token string\">\"L\"</span>\n    I <span class=\"token operator\">=</span> <span class=\"token string\">\"I\"</span>\n    F <span class=\"token operator\">=</span> <span class=\"token string\">\"F\"</span>\n    P <span class=\"token operator\">=</span> <span class=\"token string\">\"P\"</span>\n    RGB <span class=\"token operator\">=</span> <span class=\"token string\">\"RGB\"</span>\n    RGBX <span class=\"token operator\">=</span> <span class=\"token string\">\"RGBX\"</span>\n    RGBA <span class=\"token operator\">=</span> <span class=\"token string\">\"RGBA\"</span>\n    CMYK <span class=\"token operator\">=</span> <span class=\"token string\">\"CMYK\"</span>\n    YCbCr <span class=\"token operator\">=</span> <span class=\"token string\">\"YCbCr\"</span>\n    <span class=\"token comment\"># LAB = \"LAB\"</span>\n    HSV <span class=\"token operator\">=</span> <span class=\"token string\">\"HSV\"</span>\n\n    ModeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MODE1<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> I<span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> RGB<span class=\"token punctuation\">,</span> RGBX<span class=\"token punctuation\">,</span> RGBA<span class=\"token punctuation\">,</span> CMYK<span class=\"token punctuation\">,</span> YCbCr<span class=\"token punctuation\">,</span> HSV<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_position</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    pic_width <span class=\"token operator\">=</span> width<span class=\"token operator\">*</span>row_count\n    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>pic_width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>pic_width<span class=\"token operator\">*</span>width\n    <span class=\"token keyword\">return</span> position\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pic_size</span><span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> pic_num<span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pic_width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> row_count\n    extra_row <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> pic_num <span class=\"token operator\">%</span> row_count <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    pic_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pic_num <span class=\"token operator\">/</span> row_count <span class=\"token operator\">+</span> extra_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> pic_width<span class=\"token punctuation\">,</span> pic_height\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_filter</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOUR <span class=\"token operator\">=</span> CONTOURimg<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>ImageFilterList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.save(\"filter.jpg\")</span>\n    image<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_mode</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n\n        CONTOUR <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.save(\"mode.jpg\")</span>\n    image<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    create_mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n    create_filter<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"原图\"><a href=\"#原图\" class=\"headerlink\" title=\"原图\"></a>原图</h4><ul>\n<li>学习 一定要找一个好的Object(???)，不然怎么学的下去嘛。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20190727193629193.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"图像的mode\"><a href=\"#图像的mode\" class=\"headerlink\" title=\"图像的mode\"></a>图像的mode</h4><ul>\n<li>mode属性是图像的色彩通道的数量和名字，同时也包括像素的类型和颜色深度信息。她们之间的区别可能要放大点才能看得清，比如说一万倍?。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>modes</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1位像素，黑和白，存成8位的像素</td>\n</tr>\n<tr>\n<td>L</td>\n<td>8位像素，黑白</td>\n</tr>\n<tr>\n<td>P</td>\n<td>8位像素，使用调色板映射到任何其他模式</td>\n</tr>\n<tr>\n<td>RGB</td>\n<td>3*8位像素，真彩</td>\n</tr>\n<tr>\n<td>RGBA</td>\n<td>4*8位像素，真彩+透明通道</td>\n</tr>\n<tr>\n<td>CMYK</td>\n<td>4*8位像素，颜色隔离</td>\n</tr>\n<tr>\n<td>YCbCr</td>\n<td>3*8位像素，彩色视频格式</td>\n</tr>\n<tr>\n<td>I</td>\n<td>32位整形像素</td>\n</tr>\n<tr>\n<td>F</td>\n<td>32位浮点型像素</td>\n</tr>\n<tr>\n<td>RGBX</td>\n<td>有padding的真彩色</td>\n</tr>\n<tr>\n<td>HSV</td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://img-blog.csdnimg.cn/20190727193538101.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"图像滤波器\"><a href=\"#图像滤波器\" class=\"headerlink\" title=\"图像滤波器\"></a>图像滤波器</h4><ul>\n<li>你更喜欢花非花，雾非雾的朦胧，还是线条清晰，棱角分明的透彻。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Filter</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BLUR</td>\n<td>模糊滤波</td>\n</tr>\n<tr>\n<td>CONTOUR</td>\n<td>轮廓滤波</td>\n</tr>\n<tr>\n<td>DETAIL</td>\n<td>细节增强滤波</td>\n</tr>\n<tr>\n<td>EDGE_ENHANCE</td>\n<td>边缘增强滤波</td>\n</tr>\n<tr>\n<td>EDGE_ENHANCE_MORE</td>\n<td>深度边缘增强滤波</td>\n</tr>\n<tr>\n<td>EMBOSS</td>\n<td>浮雕滤波</td>\n</tr>\n<tr>\n<td>FIND_EDGES</td>\n<td>寻找边缘信息的滤波</td>\n</tr>\n<tr>\n<td>SMOOTH</td>\n<td>平滑滤波</td>\n</tr>\n<tr>\n<td>SMOOTH_MORE</td>\n<td>深度平滑滤波</td>\n</tr>\n<tr>\n<td>SHARPEN</td>\n<td>锐化滤波</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://img-blog.csdnimg.cn/2019072719355829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"原代码\"><a href=\"#原代码\" class=\"headerlink\" title=\"原代码\"></a>原代码</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/local/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageFilter\n\nfont_posotion <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>\ncolor <span class=\"token operator\">=</span>  <span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span>\nfont <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'Arial.ttf'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"unic\"</span><span class=\"token punctuation\">)</span>\nthumbnail_size <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span>\nrow_count <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_thumbnail</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> thumbnail_size\n    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    im<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> im\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    BLUR <span class=\"token operator\">=</span> <span class=\"token string\">\"BLUR\"</span>\n    CONTOUR <span class=\"token operator\">=</span> <span class=\"token string\">\"CONTOUR\"</span>\n    DETAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"DETAIL\"</span>\n    EDGE_ENHANCE <span class=\"token operator\">=</span> <span class=\"token string\">\"EDGE_ENHANCE\"</span>\n    EDGE_ENHANCE_MORE <span class=\"token operator\">=</span> <span class=\"token string\">\"EDGE_ENHANCE_MORE\"</span>\n    EMBOSS <span class=\"token operator\">=</span> <span class=\"token string\">\"EMBOSS\"</span>\n    FIND_EDGES <span class=\"token operator\">=</span> <span class=\"token string\">\"FIND_EDGES\"</span>\n    SMOOTH <span class=\"token operator\">=</span> <span class=\"token string\">\"SMOOTH\"</span>\n    SMOOTH_MORE <span class=\"token operator\">=</span> <span class=\"token string\">\"SMOOTH_MORE\"</span>\n    SHARPEN <span class=\"token operator\">=</span> <span class=\"token string\">\"SHARPEN\"</span>\n\n    FilterList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BLUR<span class=\"token punctuation\">,</span> CONTOUR<span class=\"token punctuation\">,</span> DETAIL<span class=\"token punctuation\">,</span>\n                  EDGE_ENHANCE<span class=\"token punctuation\">,</span> EDGE_ENHANCE_MORE<span class=\"token punctuation\">,</span> EMBOSS<span class=\"token punctuation\">,</span>\n                  FIND_EDGES<span class=\"token punctuation\">,</span> SMOOTH<span class=\"token punctuation\">,</span> SMOOTH_MORE<span class=\"token punctuation\">,</span>\n                  SHARPEN<span class=\"token punctuation\">]</span>\n\n    ImageFilterList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ImageFilter<span class=\"token punctuation\">.</span>BLUR<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>CONTOUR<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>DETAIL<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>EDGE_ENHANCE<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>EDGE_ENHANCE_MORE<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>EMBOSS<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>FIND_EDGES<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>SMOOTH<span class=\"token punctuation\">,</span> ImageFilter<span class=\"token punctuation\">.</span>SMOOTH_MORE<span class=\"token punctuation\">,</span>\n                       ImageFilter<span class=\"token punctuation\">.</span>SHARPEN<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    MODE1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n    L <span class=\"token operator\">=</span> <span class=\"token string\">\"L\"</span>\n    I <span class=\"token operator\">=</span> <span class=\"token string\">\"I\"</span>\n    F <span class=\"token operator\">=</span> <span class=\"token string\">\"F\"</span>\n    P <span class=\"token operator\">=</span> <span class=\"token string\">\"P\"</span>\n    RGB <span class=\"token operator\">=</span> <span class=\"token string\">\"RGB\"</span>\n    RGBX <span class=\"token operator\">=</span> <span class=\"token string\">\"RGBX\"</span>\n    RGBA <span class=\"token operator\">=</span> <span class=\"token string\">\"RGBA\"</span>\n    CMYK <span class=\"token operator\">=</span> <span class=\"token string\">\"CMYK\"</span>\n    YCbCr <span class=\"token operator\">=</span> <span class=\"token string\">\"YCbCr\"</span>\n    <span class=\"token comment\"># LAB = \"LAB\"</span>\n    HSV <span class=\"token operator\">=</span> <span class=\"token string\">\"HSV\"</span>\n\n    ModeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MODE1<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> I<span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> RGB<span class=\"token punctuation\">,</span> RGBX<span class=\"token punctuation\">,</span> RGBA<span class=\"token punctuation\">,</span> CMYK<span class=\"token punctuation\">,</span> YCbCr<span class=\"token punctuation\">,</span> HSV<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_position</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    pic_width <span class=\"token operator\">=</span> width<span class=\"token operator\">*</span>row_count\n    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>pic_width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>pic_width<span class=\"token operator\">*</span>width\n    <span class=\"token keyword\">return</span> position\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pic_size</span><span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> pic_num<span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pic_width <span class=\"token operator\">=</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> row_count\n    extra_row <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> pic_num <span class=\"token operator\">%</span> row_count <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n    pic_height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pic_num <span class=\"token operator\">/</span> row_count <span class=\"token operator\">+</span> extra_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> thumbnail_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> pic_width<span class=\"token punctuation\">,</span> pic_height\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_filter</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        CONTOURimg <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOUR <span class=\"token operator\">=</span> CONTOURimg<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>MyFilter<span class=\"token punctuation\">.</span>ImageFilterList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyFilter<span class=\"token punctuation\">.</span>FilterList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.save(\"filter.jpg\")</span>\n    image<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_mode</span><span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    pic_size <span class=\"token operator\">=</span> get_pic_size<span class=\"token punctuation\">(</span>thumbnail_size<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> row_count<span class=\"token punctuation\">)</span>\n    image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">,</span> pic_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span>\n    thumbnail_im <span class=\"token operator\">=</span> create_thumbnail<span class=\"token punctuation\">(</span>src_file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img <span class=\"token operator\">=</span> thumbnail_im<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        CONTOURdraw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n        CONTOURdraw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>font_posotion<span class=\"token punctuation\">,</span> MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span>\n\n        CONTOUR <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span>MyMode<span class=\"token punctuation\">.</span>ModeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        image<span class=\"token punctuation\">.</span>paste<span class=\"token punctuation\">(</span>CONTOUR<span class=\"token punctuation\">,</span> get_position<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># image.save(\"mode.jpg\")</span>\n    image<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    create_mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n    create_filter<span class=\"token punctuation\">(</span><span class=\"token string\">\"res.jpg\"</span><span class=\"token punctuation\">)</span>\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Redis-exists有可能超出你的预期","comments":1,"date":"2021-03-07T11:40:58.000Z","author":null,"_content":"\n#### Redis的Exists有可能超出你的预期\n- 理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。\n\n#### Redis过期键删除策略\n- Redis key过期的方式有三种：\n1. 被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key\n> 对这个key执行exists不会触发惰性删除\n2. 主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key\n3. 当前已用内存超过maxmemory限定时，触发主动清理策略\n```py\n    def get_chatroom_user_tips(self, uid):\n        if not self.chatroom_redis.exists(\"flag_key\"):\n            value = self.redis.get(\"key\", 0 , 0)\n            # 间隔时间\n            _interval = 30\n            if group_ids:\n                self.redis.setex(\"flag_key\", value=1, time=_interval)\n                self.redis.delete(\"key\")\n            return group_ids\n```\n###### 上面代码存在的问题及应对方式\n问题\n- redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。\n- 但是如果执行ttl命令是发现返回值为0。\n\n\n解决\n\n- 用ttl代替exists\n\n```py\n    def get_chatroom_user_tips(self, uid):\n        if self.chatroom_redis.ttl(\"flag_key\") <= 0:\n            value = self.redis.get(\"key\", 0 , 0)\n            # 间隔时间\n            _interval = 30\n            if group_ids:\n                self.redis.setex(\"flag_key\", value=1, time=_interval)\n                self.redis.delete(\"key\")\n            return group_ids\n```","source":"_posts/2021-03-07-Redis-exists有可能超出你的预期.md","raw":"---\ntitle: Redis-exists有可能超出你的预期\ncomments: true\ndate: 2021-03-07 19:40:58\nauthor:\ntags:\n - Redis\ncategories:\n - 后端开发\n---\n\n#### Redis的Exists有可能超出你的预期\n- 理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。\n\n#### Redis过期键删除策略\n- Redis key过期的方式有三种：\n1. 被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key\n> 对这个key执行exists不会触发惰性删除\n2. 主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key\n3. 当前已用内存超过maxmemory限定时，触发主动清理策略\n```py\n    def get_chatroom_user_tips(self, uid):\n        if not self.chatroom_redis.exists(\"flag_key\"):\n            value = self.redis.get(\"key\", 0 , 0)\n            # 间隔时间\n            _interval = 30\n            if group_ids:\n                self.redis.setex(\"flag_key\", value=1, time=_interval)\n                self.redis.delete(\"key\")\n            return group_ids\n```\n###### 上面代码存在的问题及应对方式\n问题\n- redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。\n- 但是如果执行ttl命令是发现返回值为0。\n\n\n解决\n\n- 用ttl代替exists\n\n```py\n    def get_chatroom_user_tips(self, uid):\n        if self.chatroom_redis.ttl(\"flag_key\") <= 0:\n            value = self.redis.get(\"key\", 0 , 0)\n            # 间隔时间\n            _interval = 30\n            if group_ids:\n                self.redis.setex(\"flag_key\", value=1, time=_interval)\n                self.redis.delete(\"key\")\n            return group_ids\n```","slug":"Redis-exists有可能超出你的预期","published":1,"updated":"2021-03-07T11:41:24.046Z","_id":"cklz3456c0018jvs67aekekf1","layout":"post","photos":[],"link":"","content":"<h4 id=\"Redis的Exists有可能超出你的预期\"><a href=\"#Redis的Exists有可能超出你的预期\" class=\"headerlink\" title=\"Redis的Exists有可能超出你的预期\"></a>Redis的Exists有可能超出你的预期</h4><ul>\n<li>理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。</li>\n</ul>\n<h4 id=\"Redis过期键删除策略\"><a href=\"#Redis过期键删除策略\" class=\"headerlink\" title=\"Redis过期键删除策略\"></a>Redis过期键删除策略</h4><ul>\n<li>Redis key过期的方式有三种：</li>\n</ul>\n<ol>\n<li>被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key<blockquote>\n<p>对这个key执行exists不会触发惰性删除</p>\n</blockquote>\n</li>\n<li>主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key</li>\n<li>当前已用内存超过maxmemory限定时，触发主动清理策略<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_chatroom_user_tips</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>chatroom_redis<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 间隔时间</span>\n        _interval <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n        <span class=\"token keyword\">if</span> group_ids<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>setex<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>_interval<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> group_ids<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"上面代码存在的问题及应对方式\"><a href=\"#上面代码存在的问题及应对方式\" class=\"headerlink\" title=\"上面代码存在的问题及应对方式\"></a>上面代码存在的问题及应对方式</h6>问题</li>\n</ol>\n<ul>\n<li>redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。</li>\n<li>但是如果执行ttl命令是发现返回值为0。</li>\n</ul>\n<p>解决</p>\n<ul>\n<li>用ttl代替exists</li>\n</ul>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_chatroom_user_tips</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>chatroom_redis<span class=\"token punctuation\">.</span>ttl<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 间隔时间</span>\n        _interval <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n        <span class=\"token keyword\">if</span> group_ids<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>setex<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>_interval<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> group_ids<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"Redis的Exists有可能超出你的预期\"><a href=\"#Redis的Exists有可能超出你的预期\" class=\"headerlink\" title=\"Redis的Exists有可能超出你的预期\"></a>Redis的Exists有可能超出你的预期</h4><ul>\n<li>理论上每个key都应该有过期时间（当然也可以是一万年），通常情况下用exists来判断一个key是否存在都没什么问题（一般过期时间都比较长）。但如果过期时间需要精确到秒或十秒及，那么exists就会出乎你的意料。</li>\n</ul>\n<h4 id=\"Redis过期键删除策略\"><a href=\"#Redis过期键删除策略\" class=\"headerlink\" title=\"Redis过期键删除策略\"></a>Redis过期键删除策略</h4><ul>\n<li>Redis key过期的方式有三种：</li>\n</ul>\n<ol>\n<li>被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key<blockquote>\n<p>对这个key执行exists不会触发惰性删除</p>\n</blockquote>\n</li>\n<li>主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批已过期的key</li>\n<li>当前已用内存超过maxmemory限定时，触发主动清理策略<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_chatroom_user_tips</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>chatroom_redis<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 间隔时间</span>\n        _interval <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n        <span class=\"token keyword\">if</span> group_ids<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>setex<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>_interval<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> group_ids<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"上面代码存在的问题及应对方式\"><a href=\"#上面代码存在的问题及应对方式\" class=\"headerlink\" title=\"上面代码存在的问题及应对方式\"></a>上面代码存在的问题及应对方式</h6>问题</li>\n</ol>\n<ul>\n<li>redis Key在30s之后过期，但是执行exists命令的返回值可能还为True。</li>\n<li>但是如果执行ttl命令是发现返回值为0。</li>\n</ul>\n<p>解决</p>\n<ul>\n<li>用ttl代替exists</li>\n</ul>\n<pre class=\"line-numbers language-py\" data-language=\"py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_chatroom_user_tips</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>chatroom_redis<span class=\"token punctuation\">.</span>ttl<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 间隔时间</span>\n        _interval <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n        <span class=\"token keyword\">if</span> group_ids<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>setex<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag_key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>_interval<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> group_ids<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Golang-字符串高效拼接","comments":1,"date":"2021-03-07T11:42:18.000Z","author":null,"_content":"\n## [原文链接](https://zhuanlan.zhihu.com/p/48865454)\n\n在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。\n\n在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。\n\n一个例子\n对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：\n\n昵称:飞雪无情\n博客:http://www.flysnow.org/\n微信公众号:flysnow_org\n在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。\n\n+号拼接\n这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。\n\n```\nfunc StringPlus() string{\n    var s string\n    s+=\"昵称\"+\":\"+\"飞雪无情\"+\"\\n\"\n    s+=\"博客\"+\":\"+\"http://www.flysnow.org/\"+\"\\n\"\n    s+=\"微信公众号\"+\":\"+\"flysnow_org\"\n    return s\n}\n```\n\n我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：\n\n```\nfunc BenchmarkStringPlus(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringPlus()\n    }\n}\n```\n\n运行go test -bench=. -benchmem 查看性能输出如下：\n\nBenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op\n每次操作需要108ns,进行2次内存分配，分配114字节的内存。\n\nfmt 拼接\n这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。\n\n```\nfunc StringFmt() string{\n    return fmt.Sprint(\"昵称\",\":\",\"飞雪无情\",\"\\n\",\"博客\",\":\",\"http://www.flysnow.org/\",\"\\n\",\"微信公众号\",\":\",\"flysnow_org\")\n}\n```\n\n为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。\n\n```\nfunc BenchmarkStringFmt(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringFmt()\n    }\n}\n```\n\n运行查看测试结果：\n\nBenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op\n虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。\n\nJoin 拼接\n这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。\n\n\n```\nfunc StringJoin() string{\n    s:=[]string{\"昵称\",\":\",\"飞雪无情\",\"\\n\",\"博客\",\":\",\"http://www.flysnow.org/\",\"\\n\",\"微信公众号\",\":\",\"flysnow_org\"}\n    return strings.Join(s,\"\")\n}\n\nfunc BenchmarkStringJoin(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringJoin()\n    }\n}\n```\n\n为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。\n\nBenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op\n整体和+操作相差不了太多，大概低0.5倍的样子。\n\nhttp://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html\n\nGo语言字符串高效拼接（一） | 飞雪无情的博客\n\nbuffer 拼接\n这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。\n\n\n```\nfunc StringBuffer() string {\n    var b bytes.Buffer\n    b.WriteString(\"昵称\")\n    b.WriteString(\":\")\n    b.WriteString(\"飞雪无情\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"博客\")\n    b.WriteString(\":\")\n    b.WriteString(\"http://www.flysnow.org/\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"微信公众号\")\n    b.WriteString(\":\")\n    b.WriteString(\"flysnow_org\")\n    return b.String()\n}\n\nfunc BenchmarkStringBuffer(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringBuffer()\n    }\n}\n```\n\n看看他的性能，运行输出即可：\n\nBenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op\n好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。\n\nbuilder 拼接\n为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。\n\n\n```\nfunc StringBuilder() string {\n    var b strings.Builder\n    b.WriteString(\"昵称\")\n    b.WriteString(\":\")\n    b.WriteString(\"飞雪无情\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"博客\")\n    b.WriteString(\":\")\n    b.WriteString(\"http://www.flysnow.org/\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"微信公众号\")\n    b.WriteString(\":\")\n    b.WriteString(\"flysnow_org\")\n    return b.String()\n}\n\nfunc BenchmarkStringBuilder(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringBuilder()\n    }\n}\n```\n\n官方都说比buffer性能好了，我们看看性能测试的结果。\n\nBenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op\n的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。\n\n性能对比\n以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。\n\n运行go test -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out得到如下测试结果：\n\n```\nStringPlus-8    50000000    112 ns/op   144 B/op    2 allocs/op\nStringFmt-8     20000000    344 ns/op   80 B/op     1 allocs/op\nStringJoin-8    30000000    171 ns/op   160 B/op    2 allocs/op\nStringBuffer-8  20000000    302 ns/op   336 B/op    3 allocs/op\nStringBuilder-8 30000000    171 ns/op   232 B/op    4 allocs/op\n```\n\n我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。\n\n```\nShowing top 15 nodes out of 89\n      flat  flat%   sum%        cum   cum%\n    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent\n     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait\n     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal\n     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep\n     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np\n     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1\n     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove\n     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg\n     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint\n     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)\n     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc\n     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS\n     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate\n     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers\n     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString\n```\n\n前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。\n\n以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。\n\n总结\n从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:\n\n拼接的字符串大小\n拼接的字符串数量\n以上这两个很关键，可以看下我上面的例子是属于哪一种。\n\n好了，更深入具体的，请看下一篇字符串拼接分析。","source":"_posts/2021-03-07-Golang-字符串高效拼接.md","raw":"---\ntitle: Golang-字符串高效拼接\ncomments: true\ndate: 2021-03-07 19:42:18\nauthor:\ntags:\n - Golang\ncategories:\n - 后端开发\n---\n\n## [原文链接](https://zhuanlan.zhihu.com/p/48865454)\n\n在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。\n\n在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。\n\n一个例子\n对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：\n\n昵称:飞雪无情\n博客:http://www.flysnow.org/\n微信公众号:flysnow_org\n在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。\n\n+号拼接\n这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。\n\n```\nfunc StringPlus() string{\n    var s string\n    s+=\"昵称\"+\":\"+\"飞雪无情\"+\"\\n\"\n    s+=\"博客\"+\":\"+\"http://www.flysnow.org/\"+\"\\n\"\n    s+=\"微信公众号\"+\":\"+\"flysnow_org\"\n    return s\n}\n```\n\n我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：\n\n```\nfunc BenchmarkStringPlus(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringPlus()\n    }\n}\n```\n\n运行go test -bench=. -benchmem 查看性能输出如下：\n\nBenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op\n每次操作需要108ns,进行2次内存分配，分配114字节的内存。\n\nfmt 拼接\n这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。\n\n```\nfunc StringFmt() string{\n    return fmt.Sprint(\"昵称\",\":\",\"飞雪无情\",\"\\n\",\"博客\",\":\",\"http://www.flysnow.org/\",\"\\n\",\"微信公众号\",\":\",\"flysnow_org\")\n}\n```\n\n为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。\n\n```\nfunc BenchmarkStringFmt(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringFmt()\n    }\n}\n```\n\n运行查看测试结果：\n\nBenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op\n虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。\n\nJoin 拼接\n这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。\n\n\n```\nfunc StringJoin() string{\n    s:=[]string{\"昵称\",\":\",\"飞雪无情\",\"\\n\",\"博客\",\":\",\"http://www.flysnow.org/\",\"\\n\",\"微信公众号\",\":\",\"flysnow_org\"}\n    return strings.Join(s,\"\")\n}\n\nfunc BenchmarkStringJoin(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringJoin()\n    }\n}\n```\n\n为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。\n\nBenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op\n整体和+操作相差不了太多，大概低0.5倍的样子。\n\nhttp://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html\n\nGo语言字符串高效拼接（一） | 飞雪无情的博客\n\nbuffer 拼接\n这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。\n\n\n```\nfunc StringBuffer() string {\n    var b bytes.Buffer\n    b.WriteString(\"昵称\")\n    b.WriteString(\":\")\n    b.WriteString(\"飞雪无情\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"博客\")\n    b.WriteString(\":\")\n    b.WriteString(\"http://www.flysnow.org/\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"微信公众号\")\n    b.WriteString(\":\")\n    b.WriteString(\"flysnow_org\")\n    return b.String()\n}\n\nfunc BenchmarkStringBuffer(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringBuffer()\n    }\n}\n```\n\n看看他的性能，运行输出即可：\n\nBenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op\n好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。\n\nbuilder 拼接\n为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。\n\n\n```\nfunc StringBuilder() string {\n    var b strings.Builder\n    b.WriteString(\"昵称\")\n    b.WriteString(\":\")\n    b.WriteString(\"飞雪无情\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"博客\")\n    b.WriteString(\":\")\n    b.WriteString(\"http://www.flysnow.org/\")\n    b.WriteString(\"\\n\")\n    b.WriteString(\"微信公众号\")\n    b.WriteString(\":\")\n    b.WriteString(\"flysnow_org\")\n    return b.String()\n}\n\nfunc BenchmarkStringBuilder(b *testing.B) {\n    for i:=0;i<b.N;i++{\n        StringBuilder()\n    }\n}\n```\n\n官方都说比buffer性能好了，我们看看性能测试的结果。\n\nBenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op\n的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。\n\n性能对比\n以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。\n\n运行go test -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out得到如下测试结果：\n\n```\nStringPlus-8    50000000    112 ns/op   144 B/op    2 allocs/op\nStringFmt-8     20000000    344 ns/op   80 B/op     1 allocs/op\nStringJoin-8    30000000    171 ns/op   160 B/op    2 allocs/op\nStringBuffer-8  20000000    302 ns/op   336 B/op    3 allocs/op\nStringBuilder-8 30000000    171 ns/op   232 B/op    4 allocs/op\n```\n\n我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。\n\n```\nShowing top 15 nodes out of 89\n      flat  flat%   sum%        cum   cum%\n    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent\n     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait\n     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal\n     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep\n     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np\n     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1\n     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove\n     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg\n     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint\n     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)\n     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc\n     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS\n     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate\n     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers\n     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString\n```\n\n前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。\n\n以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。\n\n总结\n从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:\n\n拼接的字符串大小\n拼接的字符串数量\n以上这两个很关键，可以看下我上面的例子是属于哪一种。\n\n好了，更深入具体的，请看下一篇字符串拼接分析。","slug":"Golang-字符串高效拼接","published":1,"updated":"2021-03-07T11:42:50.827Z","_id":"cklz35umy001bjvs6g9ko1a3c","layout":"post","photos":[],"link":"","content":"<h2 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a><a href=\"https://zhuanlan.zhihu.com/p/48865454\">原文链接</a></h2><p>在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。</p>\n<p>在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。</p>\n<p>一个例子<br>对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：</p>\n<p>昵称:飞雪无情<br>博客:<a href=\"http://www.flysnow.org/\">http://www.flysnow.org/</a><br>微信公众号:flysnow_org<br>在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。</p>\n<p>+号拼接<br>这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringPlus() string&#123;\n    var s string\n    s+&#x3D;&quot;昵称&quot;+&quot;:&quot;+&quot;飞雪无情&quot;+&quot;\\n&quot;\n    s+&#x3D;&quot;博客&quot;+&quot;:&quot;+&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;+&quot;\\n&quot;\n    s+&#x3D;&quot;微信公众号&quot;+&quot;:&quot;+&quot;flysnow_org&quot;\n    return s\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func BenchmarkStringPlus(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringPlus()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行go test -bench=. -benchmem 查看性能输出如下：</p>\n<p>BenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op<br>每次操作需要108ns,进行2次内存分配，分配114字节的内存。</p>\n<p>fmt 拼接<br>这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringFmt() string&#123;\n    return fmt.Sprint(&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func BenchmarkStringFmt(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringFmt()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行查看测试结果：</p>\n<p>BenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op<br>虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。</p>\n<p>Join 拼接<br>这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringJoin() string&#123;\n    s:&#x3D;[]string&#123;&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;&#125;\n    return strings.Join(s,&quot;&quot;)\n&#125;\n\nfunc BenchmarkStringJoin(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringJoin()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。</p>\n<p>BenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op<br>整体和+操作相差不了太多，大概低0.5倍的样子。</p>\n<p><a href=\"http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html\">http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html</a></p>\n<p>Go语言字符串高效拼接（一） | 飞雪无情的博客</p>\n<p>buffer 拼接<br>这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringBuffer() string &#123;\n    var b bytes.Buffer\n    b.WriteString(&quot;昵称&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;飞雪无情&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;博客&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;微信公众号&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;flysnow_org&quot;)\n    return b.String()\n&#125;\n\nfunc BenchmarkStringBuffer(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringBuffer()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看看他的性能，运行输出即可：</p>\n<p>BenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op<br>好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。</p>\n<p>builder 拼接<br>为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringBuilder() string &#123;\n    var b strings.Builder\n    b.WriteString(&quot;昵称&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;飞雪无情&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;博客&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;微信公众号&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;flysnow_org&quot;)\n    return b.String()\n&#125;\n\nfunc BenchmarkStringBuilder(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringBuilder()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>官方都说比buffer性能好了，我们看看性能测试的结果。</p>\n<p>BenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op<br>的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。</p>\n<p>性能对比<br>以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。</p>\n<p>运行go test -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out得到如下测试结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">StringPlus-8    50000000    112 ns&#x2F;op   144 B&#x2F;op    2 allocs&#x2F;op\nStringFmt-8     20000000    344 ns&#x2F;op   80 B&#x2F;op     1 allocs&#x2F;op\nStringJoin-8    30000000    171 ns&#x2F;op   160 B&#x2F;op    2 allocs&#x2F;op\nStringBuffer-8  20000000    302 ns&#x2F;op   336 B&#x2F;op    3 allocs&#x2F;op\nStringBuilder-8 30000000    171 ns&#x2F;op   232 B&#x2F;op    4 allocs&#x2F;op<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Showing top 15 nodes out of 89\n      flat  flat%   sum%        cum   cum%\n    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent\n     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait\n     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal\n     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep\n     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np\n     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1\n     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove\n     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg\n     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint\n     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)\n     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc\n     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS\n     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate\n     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers\n     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。</p>\n<p>以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。</p>\n<p>总结<br>从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:</p>\n<p>拼接的字符串大小<br>拼接的字符串数量<br>以上这两个很关键，可以看下我上面的例子是属于哪一种。</p>\n<p>好了，更深入具体的，请看下一篇字符串拼接分析。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a><a href=\"https://zhuanlan.zhihu.com/p/48865454\">原文链接</a></h2><p>在我们编程的时候，和字符串打交道是必不可少的，我们对数据库里文本的处理，Web文本的显示，文本数据的存储等都需要和字符串打交道，那么对于字符串来说，查找、拼接这些都是常用的操作，尤其是以拼接使用的比较多，比如把一个人的姓名和年龄拼接在一起显示。</p>\n<p>在Go语言（golang）中，对于字符串的拼接处理有很多种方法，那么那种方法才是效率最高的呢？因为内存很贵、性能很重要，有时候不慎字符串的转换和拷贝，就可以把你的内存吃光，性能低下，不得不考虑。</p>\n<p>一个例子<br>对于任何功能、性能、方法的研究，没有比例子更有说服力的啦。在这里，我们使用一个例子，来演示不同字符串的拼接方式，以及对应的性能分析。这个例子如下：</p>\n<p>昵称:飞雪无情<br>博客:<a href=\"http://www.flysnow.org/\">http://www.flysnow.org/</a><br>微信公众号:flysnow_org<br>在这个例子中，通过字符串拼接的方式，拼接出如上的内容，这里特别强调，在这个例子中，换行也是字符串拼接的一部分，因为我们要严格拼接出如上的内容。</p>\n<p>+号拼接<br>这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringPlus() string&#123;\n    var s string\n    s+&#x3D;&quot;昵称&quot;+&quot;:&quot;+&quot;飞雪无情&quot;+&quot;\\n&quot;\n    s+&#x3D;&quot;博客&quot;+&quot;:&quot;+&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;+&quot;\\n&quot;\n    s+&#x3D;&quot;微信公众号&quot;+&quot;:&quot;+&quot;flysnow_org&quot;\n    return s\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func BenchmarkStringPlus(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringPlus()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行go test -bench=. -benchmem 查看性能输出如下：</p>\n<p>BenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op<br>每次操作需要108ns,进行2次内存分配，分配114字节的内存。</p>\n<p>fmt 拼接<br>这种拼接，借助于fmt.Sprint系列函数进行拼接，然后返回拼接的字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringFmt() string&#123;\n    return fmt.Sprint(&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>为了演示，代码没有换行，可能在手机上影响阅读体验，见谅。它的性能我们也测试一下看看效果。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func BenchmarkStringFmt(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringFmt()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行查看测试结果：</p>\n<p>BenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op<br>虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有+号操作快。</p>\n<p>Join 拼接<br>这个是利用strings.Join函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringJoin() string&#123;\n    s:&#x3D;[]string&#123;&quot;昵称&quot;,&quot;:&quot;,&quot;飞雪无情&quot;,&quot;\\n&quot;,&quot;博客&quot;,&quot;:&quot;,&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;,&quot;\\n&quot;,&quot;微信公众号&quot;,&quot;:&quot;,&quot;flysnow_org&quot;&#125;\n    return strings.Join(s,&quot;&quot;)\n&#125;\n\nfunc BenchmarkStringJoin(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringJoin()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。</p>\n<p>BenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op<br>整体和+操作相差不了太多，大概低0.5倍的样子。</p>\n<p><a href=\"http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html\">http://www.flysnow.org/2018/10/28/golang-concat-strings-performance-analysis.html</a></p>\n<p>Go语言字符串高效拼接（一） | 飞雪无情的博客</p>\n<p>buffer 拼接<br>这种被用的也很多，使用的是bytes.Buffer进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以byte,rune等，并且实现了io.Writer接口，写入也非常方便。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringBuffer() string &#123;\n    var b bytes.Buffer\n    b.WriteString(&quot;昵称&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;飞雪无情&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;博客&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;微信公众号&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;flysnow_org&quot;)\n    return b.String()\n&#125;\n\nfunc BenchmarkStringBuffer(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringBuffer()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看看他的性能，运行输出即可：</p>\n<p>BenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op<br>好像并不是太好,和最差的fmt拼接差不多，和+号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。</p>\n<p>builder 拼接<br>为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func StringBuilder() string &#123;\n    var b strings.Builder\n    b.WriteString(&quot;昵称&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;飞雪无情&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;博客&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;http:&#x2F;&#x2F;www.flysnow.org&#x2F;&quot;)\n    b.WriteString(&quot;\\n&quot;)\n    b.WriteString(&quot;微信公众号&quot;)\n    b.WriteString(&quot;:&quot;)\n    b.WriteString(&quot;flysnow_org&quot;)\n    return b.String()\n&#125;\n\nfunc BenchmarkStringBuilder(b *testing.B) &#123;\n    for i:&#x3D;0;i&lt;b.N;i++&#123;\n        StringBuilder()\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>官方都说比buffer性能好了，我们看看性能测试的结果。</p>\n<p>BenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op<br>的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。</p>\n<p>性能对比<br>以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。</p>\n<p>运行go test -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out得到如下测试结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">StringPlus-8    50000000    112 ns&#x2F;op   144 B&#x2F;op    2 allocs&#x2F;op\nStringFmt-8     20000000    344 ns&#x2F;op   80 B&#x2F;op     1 allocs&#x2F;op\nStringJoin-8    30000000    171 ns&#x2F;op   160 B&#x2F;op    2 allocs&#x2F;op\nStringBuffer-8  20000000    302 ns&#x2F;op   336 B&#x2F;op    3 allocs&#x2F;op\nStringBuilder-8 30000000    171 ns&#x2F;op   232 B&#x2F;op    4 allocs&#x2F;op<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们通过go tool pprof profile.out 看下我们输出的cpu profile信息。这里主要使用top命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Showing top 15 nodes out of 89\n      flat  flat%   sum%        cum   cum%\n    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent\n     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait\n     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal\n     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep\n     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np\n     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1\n     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove\n     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg\n     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint\n     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)\n     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc\n     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS\n     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate\n     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers\n     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。</p>\n<p>以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是+号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。</p>\n<p>总结<br>从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？我们下一篇继续接着分析，这里提前透漏一些：比如:</p>\n<p>拼接的字符串大小<br>拼接的字符串数量<br>以上这两个很关键，可以看下我上面的例子是属于哪一种。</p>\n<p>好了，更深入具体的，请看下一篇字符串拼接分析。</p>\n"},{"title":"Golang-三行代码发送钉钉机器人消息","comments":1,"date":"2021-03-07T09:44:57.000Z","author":null,"top":true,"_content":"\n# dingtalk\n钉钉机器人消息封装——Golang\n\n目前自定义机器人支持s\n- 文本（text）\n- 链接（link）\n- markdown\n- ActionCard\n    - 整体跳转\n    - 独立跳转\n- FeedCard\n\n[机器人官方文档](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq)\n\n- 添加钉钉群：**35451012**，执行dingtalk_test.go测试方法可直接查看以下消息内容。\n\n## 使用\n### 创建钉钉群机器人\n1. 选择添加`自定义`机器人。\n2. 安全设置\n    共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。\n    [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Cd03uXui-1609383182732)(https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]\n3. 选择`自定义关键词`，这里设置的关键词在初始化机器人的时候会用到。\n### 获取\n    ```go\n    go get github.com/blinkbean/dingtalk\n    ```\n### 初始化\n    ```go\n    // key 创建钉钉机器人需要设置的关键词，默认为`.`\n    func InitDingTalk(tokens []string, key string) *dingTalk\n    \n    // 加签方式创建钉钉机器人\n    // 加签机器人 access_token和secret一一对应，在创建机器人是获取\n    func InitDingTalkWithSecret(tokens string, secret string) *DingTalk\n    ```\n    ```go\n    import \"github.com/blinkbean/dingtalk\"\n    \n    func main() {\n        // 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。\n        var dingToken = []string{\"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415\"}\n        cli := dingtalk.InitDingTalk(dingToken, \".\")\n        cli.SendTextMessage(\"content\")\n    }\n    ```\n### text类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendTextMessage(content string, opt ...atOption) error\n\n    // 可选参数\n    // @所有人\n    WithAtAll()\n    \n    // @指定群成员\n    WithAtMobiles(mobiles []string)\n    ```\n- 使用\n    ```go\n    // at所有人\n    cli.SendTextMessage(\"content\", WithAtAll())\n\n    // at指定群成员\n    mobiles := []string{\"131********\"}\n    cli.SendTextMessage(\"content\", WithAtMobiles(mobiles))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BCu3HFo8-1609383182748)(https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]\n\n### link类型\n- 方法\n    ```go\n    // 方法定义\n    SendLinkMessage(title, text, picUrl, msgUrl string) error\n    ```\n- 使用\n    ```go\n    cli.SendLinkMessage(title, text, picUrl, msgUrl)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A6jXhdAE-1609383182751)(https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]\n\n### markdown类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    // text：markdown格式字符串\n    SendMarkDownMessage(title, text string, opts ...atOption) error\n    \n    // 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。\n    // @所有人\n    WithAtAll()\n    \n    // @指定群成员\n    WithAtMobiles(mobiles []string)\n    ```\n- 使用\n    ```go\n    cli.SendMarkDownMessage(title, text)\n    ```\n- Markdown进阶\n    ```go\n    // 按行写入数组，增强markdown的可读性\n    msg := []string{\n        \"### Link test\",\n        \"---\",\n        \"- <font color=#00ff00 size=6>红色文字</font>\",\n        \"- content2\",\n    }\n    cli.SendMarkDownMessageBySlice(\"Markdown title\", msg, WithAtAll())\n  \n    // 字体及颜色\n    dm := DingMap()\n    dm.Set(\"颜色测试\", H2)\n    dm.Set(\"失败：$$ 同行不同色 $$\", RED)  // 双$分隔\n    dm.Set(\"---\", N)\n    dm.Set(\"金色\", GOLD)\n    dm.Set(\"成功\", GREEN)\n    dm.Set(\"警告\", BLUE)\n    dm.Set(\"普通文字\", N)\n    cli.SendMarkDownMessageBySlice(\"color test\", dm.Slice())\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2y4k2M37-1609383182754)(https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-B5PYTjIm-1609383182757)(https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]\n\n- 点击链接发送消息\n\n    点击'dtmdLink1'，自动发送'dtmdValue1'并@机器人，简化输入\n    ```go\n    // 创建有序map\n    dtmdOrderMap := DingMap().\n        Set(\"dtmdOrderMap1\", \"dtmdValue1\").\n        Set(\"dtmdOrderMap2\", \"dtmdValue2\").\n        Set(\"dtmdOrderMap3\", \"dtmdValue3\")\n    err := dingTalkCli.SendDTMDMessage(\"DTMD title\", dtmdOrderMap)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h15FF5fw-1609383182760)(https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]\n\n### 整体跳转ActionCard类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendActionCardMessage(title, text string, opts ...actionCardOption) error\n    \n    // 可选参数\n    // 标题\n    WithCardSingleTitle(title string)\n    \n    // 跳转地址\n    WithCardSingleURL(url string)\n    ```\n- 使用\n    ```go\n    cli.SendActionSingleMessage(title, text, WithCardSingleTitle(sTitle), WithCardSingleURL(url))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HVGqLNFi-1609383182762)(https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]\n\n### 独立跳转ActionCard类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendActionCardMessage(title, text string, opts ...actionCardOption) error\n    \n    // 可选参数\n    // 按钮排列方向，默认水平\n    WithCardBtnVertical()\n  \n    // 跳转按钮\n    WithCardBtns(btns []ActionCardMultiBtnModel)\n\n    // ActionCardMultiBtnModel\n    type ActionCardMultiBtnModel struct {\n    \tTitle     string `json:\"title,omitempty\"`\n    \tActionURL string `json:\"actionURL,omitempty\"`\n    }\n    ```\n- 使用\n    ```go\n    btns := []ActionCardMultiBtnModel{{\n        Title:     \"test1\",\n        ActionURL: testUrl,\n        },{\n        Title:     \"test2\",\n        ActionURL: testUrl,\n        },\n    }\n    cli.SendActionSingleMessage(title, text, WithCardBtns(btns))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1uALzgDH-1609383182763)(https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OH6OzXyF-1609383182764)(https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]\n\n### FeedCard类型\n- 方法\n    ```go\n    // 方法定义\n    SendFeedCardMessage(feedCard []FeedCardLinkModel) error\n    \n    // FeedCardLinkModel\n    type FeedCardLinkModel struct {\n    \tTitle      string `json:\"title,omitempty\"`\n    \tMessageURL string `json:\"messageURL,omitempty\"`\n    \tPicURL     string `json:\"picURL,omitempty\"`\n    }\n    ```\n- 使用\n    ```go\n    links := []FeedCardLinkModel{\n        {\n            Title:      \"FeedCard1.\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n        {\n            Title:      \"FeedCard2\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n        {\n            Title:      \"FeedCard3\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n    }\n    cli.SendFeedCardMessage(links)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yPI4l7Bp-1609383182765)(https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]\n\n### OutGoing\n- 消息格式\n    ```json\n    {\n        \"atUsers\":[\n            {\n                \"dingtalkId\":\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*\"\n            }],\n        \"chatbotUserId\":\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*\",\n        \"conversationId\":\"cidkkCwvtlh1L0RmFuhmashi*==\",\n        \"conversationTitle\":\"项目群\",\n        \"conversationType\":\"2\",\n        \"createAt\":1595232438950,\n        \"isAdmin\":false,\n        \"isInAtList\":true,\n        \"msgId\":\"msgm/bJkKjTupFM7ZoRF/eKR*==\",\n        \"msgtype\":\"text\",\n        \"sceneGroupCode\":\"project\",\n        \"senderId\":\"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*==\",\n        \"senderNick\":\"blinkbean\",\n        \"sessionWebhook\":\"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*\",\n        \"sessionWebhookExpiredTime\":1595237839030,\n        \"text\":{\n            \"content\":\" outgoing\"\n        }\n    }\n    ```\n  \n- Usage\n    ```go\n    func OutGoing(ctx *gin.Context){\n        cli := dingtalk.InitDingTalk([]string{\"***\"}, \".\")\n        msg, _ := cli.OutGoing(ctx.Request.Body)\n        // 处理content\n        res := doSomeThing(msg.Text.Content)\n  \n        textMsg := dingtalk.NewTextMsg(res)\n        ctx.Set(\"respData\", textMsg)\n        ctx.JSON(ctx.Writer.Status(), data)\n        return \n    }\n    ```","source":"_posts/2021-03-07-Golang-三行代码发送钉钉机器人消息.md","raw":"---\ntitle: Golang-三行代码发送钉钉机器人消息\ncomments: true\ndate: 2021-03-07 17:44:57\nauthor:\ntop: true\ntags:\n - Golang\n - 工具\ncategories:\n - 效率工具\n---\n\n# dingtalk\n钉钉机器人消息封装——Golang\n\n目前自定义机器人支持s\n- 文本（text）\n- 链接（link）\n- markdown\n- ActionCard\n    - 整体跳转\n    - 独立跳转\n- FeedCard\n\n[机器人官方文档](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq)\n\n- 添加钉钉群：**35451012**，执行dingtalk_test.go测试方法可直接查看以下消息内容。\n\n## 使用\n### 创建钉钉群机器人\n1. 选择添加`自定义`机器人。\n2. 安全设置\n    共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。\n    [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Cd03uXui-1609383182732)(https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]\n3. 选择`自定义关键词`，这里设置的关键词在初始化机器人的时候会用到。\n### 获取\n    ```go\n    go get github.com/blinkbean/dingtalk\n    ```\n### 初始化\n    ```go\n    // key 创建钉钉机器人需要设置的关键词，默认为`.`\n    func InitDingTalk(tokens []string, key string) *dingTalk\n    \n    // 加签方式创建钉钉机器人\n    // 加签机器人 access_token和secret一一对应，在创建机器人是获取\n    func InitDingTalkWithSecret(tokens string, secret string) *DingTalk\n    ```\n    ```go\n    import \"github.com/blinkbean/dingtalk\"\n    \n    func main() {\n        // 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。\n        var dingToken = []string{\"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415\"}\n        cli := dingtalk.InitDingTalk(dingToken, \".\")\n        cli.SendTextMessage(\"content\")\n    }\n    ```\n### text类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendTextMessage(content string, opt ...atOption) error\n\n    // 可选参数\n    // @所有人\n    WithAtAll()\n    \n    // @指定群成员\n    WithAtMobiles(mobiles []string)\n    ```\n- 使用\n    ```go\n    // at所有人\n    cli.SendTextMessage(\"content\", WithAtAll())\n\n    // at指定群成员\n    mobiles := []string{\"131********\"}\n    cli.SendTextMessage(\"content\", WithAtMobiles(mobiles))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BCu3HFo8-1609383182748)(https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]\n\n### link类型\n- 方法\n    ```go\n    // 方法定义\n    SendLinkMessage(title, text, picUrl, msgUrl string) error\n    ```\n- 使用\n    ```go\n    cli.SendLinkMessage(title, text, picUrl, msgUrl)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A6jXhdAE-1609383182751)(https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]\n\n### markdown类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    // text：markdown格式字符串\n    SendMarkDownMessage(title, text string, opts ...atOption) error\n    \n    // 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。\n    // @所有人\n    WithAtAll()\n    \n    // @指定群成员\n    WithAtMobiles(mobiles []string)\n    ```\n- 使用\n    ```go\n    cli.SendMarkDownMessage(title, text)\n    ```\n- Markdown进阶\n    ```go\n    // 按行写入数组，增强markdown的可读性\n    msg := []string{\n        \"### Link test\",\n        \"---\",\n        \"- <font color=#00ff00 size=6>红色文字</font>\",\n        \"- content2\",\n    }\n    cli.SendMarkDownMessageBySlice(\"Markdown title\", msg, WithAtAll())\n  \n    // 字体及颜色\n    dm := DingMap()\n    dm.Set(\"颜色测试\", H2)\n    dm.Set(\"失败：$$ 同行不同色 $$\", RED)  // 双$分隔\n    dm.Set(\"---\", N)\n    dm.Set(\"金色\", GOLD)\n    dm.Set(\"成功\", GREEN)\n    dm.Set(\"警告\", BLUE)\n    dm.Set(\"普通文字\", N)\n    cli.SendMarkDownMessageBySlice(\"color test\", dm.Slice())\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2y4k2M37-1609383182754)(https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-B5PYTjIm-1609383182757)(https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]\n\n- 点击链接发送消息\n\n    点击'dtmdLink1'，自动发送'dtmdValue1'并@机器人，简化输入\n    ```go\n    // 创建有序map\n    dtmdOrderMap := DingMap().\n        Set(\"dtmdOrderMap1\", \"dtmdValue1\").\n        Set(\"dtmdOrderMap2\", \"dtmdValue2\").\n        Set(\"dtmdOrderMap3\", \"dtmdValue3\")\n    err := dingTalkCli.SendDTMDMessage(\"DTMD title\", dtmdOrderMap)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h15FF5fw-1609383182760)(https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]\n\n### 整体跳转ActionCard类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendActionCardMessage(title, text string, opts ...actionCardOption) error\n    \n    // 可选参数\n    // 标题\n    WithCardSingleTitle(title string)\n    \n    // 跳转地址\n    WithCardSingleURL(url string)\n    ```\n- 使用\n    ```go\n    cli.SendActionSingleMessage(title, text, WithCardSingleTitle(sTitle), WithCardSingleURL(url))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HVGqLNFi-1609383182762)(https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]\n\n### 独立跳转ActionCard类型\n- 方法及可选参数\n    ```go\n    // 方法定义\n    SendActionCardMessage(title, text string, opts ...actionCardOption) error\n    \n    // 可选参数\n    // 按钮排列方向，默认水平\n    WithCardBtnVertical()\n  \n    // 跳转按钮\n    WithCardBtns(btns []ActionCardMultiBtnModel)\n\n    // ActionCardMultiBtnModel\n    type ActionCardMultiBtnModel struct {\n    \tTitle     string `json:\"title,omitempty\"`\n    \tActionURL string `json:\"actionURL,omitempty\"`\n    }\n    ```\n- 使用\n    ```go\n    btns := []ActionCardMultiBtnModel{{\n        Title:     \"test1\",\n        ActionURL: testUrl,\n        },{\n        Title:     \"test2\",\n        ActionURL: testUrl,\n        },\n    }\n    cli.SendActionSingleMessage(title, text, WithCardBtns(btns))\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1uALzgDH-1609383182763)(https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OH6OzXyF-1609383182764)(https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]\n\n### FeedCard类型\n- 方法\n    ```go\n    // 方法定义\n    SendFeedCardMessage(feedCard []FeedCardLinkModel) error\n    \n    // FeedCardLinkModel\n    type FeedCardLinkModel struct {\n    \tTitle      string `json:\"title,omitempty\"`\n    \tMessageURL string `json:\"messageURL,omitempty\"`\n    \tPicURL     string `json:\"picURL,omitempty\"`\n    }\n    ```\n- 使用\n    ```go\n    links := []FeedCardLinkModel{\n        {\n            Title:      \"FeedCard1.\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n        {\n            Title:      \"FeedCard2\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n        {\n            Title:      \"FeedCard3\",\n            MessageURL: testUrl,\n            PicURL:     testImg,\n        },\n    }\n    cli.SendFeedCardMessage(links)\n    ```\n- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yPI4l7Bp-1609383182765)(https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]\n\n### OutGoing\n- 消息格式\n    ```json\n    {\n        \"atUsers\":[\n            {\n                \"dingtalkId\":\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*\"\n            }],\n        \"chatbotUserId\":\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*\",\n        \"conversationId\":\"cidkkCwvtlh1L0RmFuhmashi*==\",\n        \"conversationTitle\":\"项目群\",\n        \"conversationType\":\"2\",\n        \"createAt\":1595232438950,\n        \"isAdmin\":false,\n        \"isInAtList\":true,\n        \"msgId\":\"msgm/bJkKjTupFM7ZoRF/eKR*==\",\n        \"msgtype\":\"text\",\n        \"sceneGroupCode\":\"project\",\n        \"senderId\":\"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*==\",\n        \"senderNick\":\"blinkbean\",\n        \"sessionWebhook\":\"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*\",\n        \"sessionWebhookExpiredTime\":1595237839030,\n        \"text\":{\n            \"content\":\" outgoing\"\n        }\n    }\n    ```\n  \n- Usage\n    ```go\n    func OutGoing(ctx *gin.Context){\n        cli := dingtalk.InitDingTalk([]string{\"***\"}, \".\")\n        msg, _ := cli.OutGoing(ctx.Request.Body)\n        // 处理content\n        res := doSomeThing(msg.Text.Content)\n  \n        textMsg := dingtalk.NewTextMsg(res)\n        ctx.Set(\"respData\", textMsg)\n        ctx.JSON(ctx.Writer.Status(), data)\n        return \n    }\n    ```","slug":"Golang-三行代码发送钉钉机器人消息","published":1,"updated":"2021-03-07T11:46:59.743Z","_id":"cklz3bwp8001kjvs60yza820o","layout":"post","photos":[],"link":"","content":"<h1 id=\"dingtalk\"><a href=\"#dingtalk\" class=\"headerlink\" title=\"dingtalk\"></a>dingtalk</h1><p>钉钉机器人消息封装——Golang</p>\n<p>目前自定义机器人支持s</p>\n<ul>\n<li>文本（text）</li>\n<li>链接（link）</li>\n<li>markdown</li>\n<li>ActionCard<ul>\n<li>整体跳转</li>\n<li>独立跳转</li>\n</ul>\n</li>\n<li>FeedCard</li>\n</ul>\n<p><a href=\"https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq\">机器人官方文档</a></p>\n<ul>\n<li>添加钉钉群：<strong>35451012</strong>，执行dingtalk_test.go测试方法可直接查看以下消息内容。</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"创建钉钉群机器人\"><a href=\"#创建钉钉群机器人\" class=\"headerlink\" title=\"创建钉钉群机器人\"></a>创建钉钉群机器人</h3><ol>\n<li>选择添加<code>自定义</code>机器人。</li>\n<li>安全设置<br> 共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。<br> [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Cd03uXui-1609383182732)(<a href=\"https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]\">https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]</a></li>\n<li>选择<code>自定义关键词</code>，这里设置的关键词在初始化机器人的时候会用到。<h3 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h3> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>blinkbean<span class=\"token operator\">/</span>dingtalk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// key 创建钉钉机器人需要设置的关键词，默认为`.`</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span>tokens <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>dingTalk\n\n<span class=\"token comment\">// 加签方式创建钉钉机器人</span>\n<span class=\"token comment\">// 加签机器人 access_token和secret一一对应，在创建机器人是获取</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">InitDingTalkWithSecret</span><span class=\"token punctuation\">(</span>tokens <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> secret <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>DingTalk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/blinkbean/dingtalk\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。</span>\n    <span class=\"token keyword\">var</span> dingToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415\"</span><span class=\"token punctuation\">&#125;</span>\n    cli <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span>dingToken<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"text类型\"><a href=\"#text类型\" class=\"headerlink\" title=\"text类型\"></a>text类型</h3></li>\n</ol>\n<ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span>content <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">...</span>atOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// @所有人</span>\n<span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// @指定群成员</span>\n<span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// at所有人</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// at指定群成员</span>\nmobiles <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"131********\"</span><span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BCu3HFo8-1609383182748)(<a href=\"https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]\">https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]</a></li>\n</ul>\n<h3 id=\"link类型\"><a href=\"#link类型\" class=\"headerlink\" title=\"link类型\"></a>link类型</h3><ul>\n<li>方法  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendLinkMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> picUrl<span class=\"token punctuation\">,</span> msgUrl <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendLinkMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> picUrl<span class=\"token punctuation\">,</span> msgUrl<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A6jXhdAE-1609383182751)(<a href=\"https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]\">https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]</a></li>\n</ul>\n<h3 id=\"markdown类型\"><a href=\"#markdown类型\" class=\"headerlink\" title=\"markdown类型\"></a>markdown类型</h3><ul>\n<li><p>方法及可选参数</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token comment\">// text：markdown格式字符串</span>\n<span class=\"token function\">SendMarkDownMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>atOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。</span>\n<span class=\"token comment\">// @所有人</span>\n<span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// @指定群成员</span>\n<span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Markdown进阶</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 按行写入数组，增强markdown的可读性</span>\nmsg <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"### Link test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"- &lt;font color=#00ff00 size=6>红色文字&lt;/font>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"- content2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessageBySlice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Markdown title\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\">// 字体及颜色</span>\ndm <span class=\"token operator\">:=</span> <span class=\"token function\">DingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"颜色测试\"</span><span class=\"token punctuation\">,</span> H2<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败：$$ 同行不同色 $$\"</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 双$分隔</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"金色\"</span><span class=\"token punctuation\">,</span> GOLD<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功\"</span><span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"警告\"</span><span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通文字\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessageBySlice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color test\"</span><span class=\"token punctuation\">,</span> dm<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2y4k2M37-1609383182754)(<a href=\"https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]\">https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]</a></p>\n</li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-B5PYTjIm-1609383182757)(<a href=\"https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]\">https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]</a></p>\n</li>\n<li><p>点击链接发送消息</p>\n<p>  点击’dtmdLink1’，自动发送’dtmdValue1’并@机器人，简化输入</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 创建有序map</span>\ndtmdOrderMap <span class=\"token operator\">:=</span> <span class=\"token function\">DingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue3\"</span><span class=\"token punctuation\">)</span>\nerr <span class=\"token operator\">:=</span> dingTalkCli<span class=\"token punctuation\">.</span><span class=\"token function\">SendDTMDMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DTMD title\"</span><span class=\"token punctuation\">,</span> dtmdOrderMap<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h15FF5fw-1609383182760)(<a href=\"https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]\">https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]</a></p>\n</li>\n</ul>\n<h3 id=\"整体跳转ActionCard类型\"><a href=\"#整体跳转ActionCard类型\" class=\"headerlink\" title=\"整体跳转ActionCard类型\"></a>整体跳转ActionCard类型</h3><ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendActionCardMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>actionCardOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// 标题</span>\n<span class=\"token function\">WithCardSingleTitle</span><span class=\"token punctuation\">(</span>title <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 跳转地址</span>\n<span class=\"token function\">WithCardSingleURL</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendActionSingleMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardSingleTitle</span><span class=\"token punctuation\">(</span>sTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardSingleURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HVGqLNFi-1609383182762)(<a href=\"https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]\">https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]</a></li>\n</ul>\n<h3 id=\"独立跳转ActionCard类型\"><a href=\"#独立跳转ActionCard类型\" class=\"headerlink\" title=\"独立跳转ActionCard类型\"></a>独立跳转ActionCard类型</h3><ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendActionCardMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>actionCardOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// 按钮排列方向，默认水平</span>\n<span class=\"token function\">WithCardBtnVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\">// 跳转按钮</span>\n<span class=\"token function\">WithCardBtns</span><span class=\"token punctuation\">(</span>btns <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ActionCardMultiBtnModel<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ActionCardMultiBtnModel</span>\n<span class=\"token keyword\">type</span> ActionCardMultiBtnModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tTitle     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title,omitempty\"`</span>\n\tActionURL <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"actionURL,omitempty\"`</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">btns <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ActionCardMultiBtnModel<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n    Title<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span>\n    ActionURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    Title<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">,</span>\n    ActionURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendActionSingleMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardBtns</span><span class=\"token punctuation\">(</span>btns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1uALzgDH-1609383182763)(<a href=\"https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]\">https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]</a></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OH6OzXyF-1609383182764)(<a href=\"https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]\">https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]</a></li>\n</ul>\n<h3 id=\"FeedCard类型\"><a href=\"#FeedCard类型\" class=\"headerlink\" title=\"FeedCard类型\"></a>FeedCard类型</h3><ul>\n<li>方法  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendFeedCardMessage</span><span class=\"token punctuation\">(</span>feedCard <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>FeedCardLinkModel<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// FeedCardLinkModel</span>\n<span class=\"token keyword\">type</span> FeedCardLinkModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tTitle      <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title,omitempty\"`</span>\n\tMessageURL <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"messageURL,omitempty\"`</span>\n\tPicURL     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"picURL,omitempty\"`</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">links <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>FeedCardLinkModel<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard1.\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard2\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard3\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendFeedCardMessage</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yPI4l7Bp-1609383182765)(<a href=\"https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]\">https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]</a></li>\n</ul>\n<h3 id=\"OutGoing\"><a href=\"#OutGoing\" class=\"headerlink\" title=\"OutGoing\"></a>OutGoing</h3><ul>\n<li>消息格式  <pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"atUsers\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"dingtalkId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"chatbotUserId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"cidkkCwvtlh1L0RmFuhmashi*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationTitle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"项目群\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationType\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"createAt\"</span><span class=\"token operator\">:</span><span class=\"token number\">1595232438950</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isAdmin\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isInAtList\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"msgId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"msgm/bJkKjTupFM7ZoRF/eKR*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"msgtype\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sceneGroupCode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"senderId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"senderNick\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"blinkbean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sessionWebhook\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sessionWebhookExpiredTime\"</span><span class=\"token operator\">:</span><span class=\"token number\">1595237839030</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\" outgoing\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Usage  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">OutGoing</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cli <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    msg<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">OutGoing</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 处理content</span>\n    res <span class=\"token operator\">:=</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n  \n    textMsg <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">NewTextMsg</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"respData\"</span><span class=\"token punctuation\">,</span> textMsg<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"dingtalk\"><a href=\"#dingtalk\" class=\"headerlink\" title=\"dingtalk\"></a>dingtalk</h1><p>钉钉机器人消息封装——Golang</p>\n<p>目前自定义机器人支持s</p>\n<ul>\n<li>文本（text）</li>\n<li>链接（link）</li>\n<li>markdown</li>\n<li>ActionCard<ul>\n<li>整体跳转</li>\n<li>独立跳转</li>\n</ul>\n</li>\n<li>FeedCard</li>\n</ul>\n<p><a href=\"https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq\">机器人官方文档</a></p>\n<ul>\n<li>添加钉钉群：<strong>35451012</strong>，执行dingtalk_test.go测试方法可直接查看以下消息内容。</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"创建钉钉群机器人\"><a href=\"#创建钉钉群机器人\" class=\"headerlink\" title=\"创建钉钉群机器人\"></a>创建钉钉群机器人</h3><ol>\n<li>选择添加<code>自定义</code>机器人。</li>\n<li>安全设置<br> 共有关键词、加签、IP白名单三种设置，需要根据情况进行选择。<br> [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Cd03uXui-1609383182732)(<a href=\"https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]\">https://i.loli.net/2020/07/05/4XqHG2dOwo8StEu.jpg)]</a></li>\n<li>选择<code>自定义关键词</code>，这里设置的关键词在初始化机器人的时候会用到。<h3 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h3> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>blinkbean<span class=\"token operator\">/</span>dingtalk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// key 创建钉钉机器人需要设置的关键词，默认为`.`</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span>tokens <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>dingTalk\n\n<span class=\"token comment\">// 加签方式创建钉钉机器人</span>\n<span class=\"token comment\">// 加签机器人 access_token和secret一一对应，在创建机器人是获取</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">InitDingTalkWithSecret</span><span class=\"token punctuation\">(</span>tokens <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> secret <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>DingTalk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/blinkbean/dingtalk\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 单个机器人有单位时间内消息条数的限制，如果有需要可以初始化多个token，发消息时随机发给其中一个机器人。</span>\n    <span class=\"token keyword\">var</span> dingToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"7bd675b66646ba890046c2198257576470099e1bda0770bad7dd6684fb1e0415\"</span><span class=\"token punctuation\">&#125;</span>\n    cli <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span>dingToken<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"text类型\"><a href=\"#text类型\" class=\"headerlink\" title=\"text类型\"></a>text类型</h3></li>\n</ol>\n<ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span>content <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">...</span>atOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// @所有人</span>\n<span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// @指定群成员</span>\n<span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// at所有人</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// at指定群成员</span>\nmobiles <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"131********\"</span><span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BCu3HFo8-1609383182748)(<a href=\"https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]\">https://i.loli.net/2020/07/05/LXErbH1KiRGstQ7.jpg)]</a></li>\n</ul>\n<h3 id=\"link类型\"><a href=\"#link类型\" class=\"headerlink\" title=\"link类型\"></a>link类型</h3><ul>\n<li>方法  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendLinkMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> picUrl<span class=\"token punctuation\">,</span> msgUrl <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendLinkMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> picUrl<span class=\"token punctuation\">,</span> msgUrl<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A6jXhdAE-1609383182751)(<a href=\"https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]\">https://i.loli.net/2020/07/05/wDG1sMPlU7XZQfr.jpg)]</a></li>\n</ul>\n<h3 id=\"markdown类型\"><a href=\"#markdown类型\" class=\"headerlink\" title=\"markdown类型\"></a>markdown类型</h3><ul>\n<li><p>方法及可选参数</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token comment\">// text：markdown格式字符串</span>\n<span class=\"token function\">SendMarkDownMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>atOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数 目前钉钉markdown格式消息不支持@（可能是钉钉的bug），所以以下可选参数暂时不生效。</span>\n<span class=\"token comment\">// @所有人</span>\n<span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// @指定群成员</span>\n<span class=\"token function\">WithAtMobiles</span><span class=\"token punctuation\">(</span>mobiles <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Markdown进阶</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 按行写入数组，增强markdown的可读性</span>\nmsg <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"### Link test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"- &lt;font color=#00ff00 size=6>红色文字&lt;/font>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"- content2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessageBySlice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Markdown title\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">WithAtAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\">// 字体及颜色</span>\ndm <span class=\"token operator\">:=</span> <span class=\"token function\">DingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"颜色测试\"</span><span class=\"token punctuation\">,</span> H2<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败：$$ 同行不同色 $$\"</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 双$分隔</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"金色\"</span><span class=\"token punctuation\">,</span> GOLD<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功\"</span><span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"警告\"</span><span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">)</span>\ndm<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通文字\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendMarkDownMessageBySlice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color test\"</span><span class=\"token punctuation\">,</span> dm<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2y4k2M37-1609383182754)(<a href=\"https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]\">https://i.loli.net/2020/07/05/7LScefCZIGnDjBV.jpg)]</a></p>\n</li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-B5PYTjIm-1609383182757)(<a href=\"https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]\">https://i.loli.net/2020/07/26/PADJ5uqmfQht2cr.jpg)]</a></p>\n</li>\n<li><p>点击链接发送消息</p>\n<p>  点击’dtmdLink1’，自动发送’dtmdValue1’并@机器人，简化输入</p>\n  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 创建有序map</span>\ndtmdOrderMap <span class=\"token operator\">:=</span> <span class=\"token function\">DingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dtmdOrderMap3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtmdValue3\"</span><span class=\"token punctuation\">)</span>\nerr <span class=\"token operator\">:=</span> dingTalkCli<span class=\"token punctuation\">.</span><span class=\"token function\">SendDTMDMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DTMD title\"</span><span class=\"token punctuation\">,</span> dtmdOrderMap<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h15FF5fw-1609383182760)(<a href=\"https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]\">https://i.loli.net/2020/11/02/1OqEr4HKZWapRgd.jpg)]</a></p>\n</li>\n</ul>\n<h3 id=\"整体跳转ActionCard类型\"><a href=\"#整体跳转ActionCard类型\" class=\"headerlink\" title=\"整体跳转ActionCard类型\"></a>整体跳转ActionCard类型</h3><ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendActionCardMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>actionCardOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// 标题</span>\n<span class=\"token function\">WithCardSingleTitle</span><span class=\"token punctuation\">(</span>title <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 跳转地址</span>\n<span class=\"token function\">WithCardSingleURL</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">cli<span class=\"token punctuation\">.</span><span class=\"token function\">SendActionSingleMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardSingleTitle</span><span class=\"token punctuation\">(</span>sTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardSingleURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HVGqLNFi-1609383182762)(<a href=\"https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]\">https://i.loli.net/2020/07/05/kKELHAlomndiO9I.jpg)]</a></li>\n</ul>\n<h3 id=\"独立跳转ActionCard类型\"><a href=\"#独立跳转ActionCard类型\" class=\"headerlink\" title=\"独立跳转ActionCard类型\"></a>独立跳转ActionCard类型</h3><ul>\n<li>方法及可选参数  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendActionCardMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>actionCardOption<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// 可选参数</span>\n<span class=\"token comment\">// 按钮排列方向，默认水平</span>\n<span class=\"token function\">WithCardBtnVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\">// 跳转按钮</span>\n<span class=\"token function\">WithCardBtns</span><span class=\"token punctuation\">(</span>btns <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ActionCardMultiBtnModel<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ActionCardMultiBtnModel</span>\n<span class=\"token keyword\">type</span> ActionCardMultiBtnModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tTitle     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title,omitempty\"`</span>\n\tActionURL <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"actionURL,omitempty\"`</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">btns <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ActionCardMultiBtnModel<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n    Title<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span>\n    ActionURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    Title<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">,</span>\n    ActionURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendActionSingleMessage</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> <span class=\"token function\">WithCardBtns</span><span class=\"token punctuation\">(</span>btns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1uALzgDH-1609383182763)(<a href=\"https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]\">https://i.loli.net/2020/07/05/t9GywHFSQUWCVDT.jpg)]</a></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OH6OzXyF-1609383182764)(<a href=\"https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]\">https://i.loli.net/2020/07/26/pEg7hotXZnsaJPV.jpg)]</a></li>\n</ul>\n<h3 id=\"FeedCard类型\"><a href=\"#FeedCard类型\" class=\"headerlink\" title=\"FeedCard类型\"></a>FeedCard类型</h3><ul>\n<li>方法  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 方法定义</span>\n<span class=\"token function\">SendFeedCardMessage</span><span class=\"token punctuation\">(</span>feedCard <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>FeedCardLinkModel<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n<span class=\"token comment\">// FeedCardLinkModel</span>\n<span class=\"token keyword\">type</span> FeedCardLinkModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tTitle      <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title,omitempty\"`</span>\n\tMessageURL <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"messageURL,omitempty\"`</span>\n\tPicURL     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"picURL,omitempty\"`</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">links <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>FeedCardLinkModel<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard1.\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard2\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Title<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"FeedCard3\"</span><span class=\"token punctuation\">,</span>\n        MessageURL<span class=\"token punctuation\">:</span> testUrl<span class=\"token punctuation\">,</span>\n        PicURL<span class=\"token punctuation\">:</span>     testImg<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">SendFeedCardMessage</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yPI4l7Bp-1609383182765)(<a href=\"https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]\">https://i.loli.net/2020/07/05/F5WDLqyJ4Yzfj6A.jpg)]</a></li>\n</ul>\n<h3 id=\"OutGoing\"><a href=\"#OutGoing\" class=\"headerlink\" title=\"OutGoing\"></a>OutGoing</h3><ul>\n<li>消息格式  <pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"atUsers\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"dingtalkId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7xv/8vh*\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"chatbotUserId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$1h0bmSzcLCHncx0lCt3Bb/UVz7x/8vh*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"cidkkCwvtlh1L0RmFuhmashi*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationTitle\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"项目群\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"conversationType\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"createAt\"</span><span class=\"token operator\">:</span><span class=\"token number\">1595232438950</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isAdmin\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isInAtList\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"msgId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"msgm/bJkKjTupFM7ZoRF/eKR*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"msgtype\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sceneGroupCode\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"senderId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$:LWCP_v1:$x4wFOct/DGctv96o4IxxB*==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"senderNick\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"blinkbean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sessionWebhook\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://oapi.dingtalk.com/robot/sendBySession?session=6d69b333f243db32d42c11sda9de620*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sessionWebhookExpiredTime\"</span><span class=\"token operator\">:</span><span class=\"token number\">1595237839030</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\" outgoing\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Usage  <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">OutGoing</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cli <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">InitDingTalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    msg<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">OutGoing</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 处理content</span>\n    res <span class=\"token operator\">:=</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n  \n    textMsg <span class=\"token operator\">:=</span> dingtalk<span class=\"token punctuation\">.</span><span class=\"token function\">NewTextMsg</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"respData\"</span><span class=\"token punctuation\">,</span> textMsg<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"杂-ip转int，int转ip","comments":1,"date":"2021-03-07T10:24:37.000Z","author":null,"_content":"\n#### IP和int之间相互转换\n\n```go\nfunc toInt(ip string) int64 {\n\ti := 3\n\tsum := int64(0)\n\tfor j, v := range strings.Split(ip, \".\") {\n\t\tintV, _ := strconv.ParseInt(v, 10, 64)\n\t\tsum = sum + intV*int64(math.Pow(float64(256), float64(i-j)))\n\t}\n\tfmt.Println(sum)\n\treturn sum\n}\n\nfunc toIp(num int64) string {\n\ts := make([]string, 4)\n\ti := 3\n\tfor i >= 0 {\n\t\ts[i] = strconv.FormatInt(num % 256,10)\n\t\tnum /= 256\n\t\ti--\n\t}\n\treturn strings.Join(s, \".\")\n}\n```\n","source":"_posts/2021-03-07-杂-ip转int，int转ip.md","raw":"---\ntitle: 杂-ip转int，int转ip\ncomments: true\ndate: 2021-03-07 18:24:37\nauthor:\ntags:\n - Golang\n - IP\n - Utils\ncategories:\n - 后端开发\n---\n\n#### IP和int之间相互转换\n\n```go\nfunc toInt(ip string) int64 {\n\ti := 3\n\tsum := int64(0)\n\tfor j, v := range strings.Split(ip, \".\") {\n\t\tintV, _ := strconv.ParseInt(v, 10, 64)\n\t\tsum = sum + intV*int64(math.Pow(float64(256), float64(i-j)))\n\t}\n\tfmt.Println(sum)\n\treturn sum\n}\n\nfunc toIp(num int64) string {\n\ts := make([]string, 4)\n\ti := 3\n\tfor i >= 0 {\n\t\ts[i] = strconv.FormatInt(num % 256,10)\n\t\tnum /= 256\n\t\ti--\n\t}\n\treturn strings.Join(s, \".\")\n}\n```\n","slug":"杂-ip转int，int转ip","published":1,"updated":"2021-03-07T11:47:39.834Z","_id":"cklz3crf7001ojvs6bybhfymh","layout":"post","photos":[],"link":"","content":"<h4 id=\"IP和int之间相互转换\"><a href=\"#IP和int之间相互转换\" class=\"headerlink\" title=\"IP和int之间相互转换\"></a>IP和int之间相互转换</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span>ip <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">&#123;</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tintV<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t\tsum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> intV<span class=\"token operator\">*</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">toIp</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\tnum <span class=\"token operator\">/=</span> <span class=\"token number\">256</span>\n\t\ti<span class=\"token operator\">--</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"IP和int之间相互转换\"><a href=\"#IP和int之间相互转换\" class=\"headerlink\" title=\"IP和int之间相互转换\"></a>IP和int之间相互转换</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span>ip <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span> <span class=\"token punctuation\">&#123;</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tintV<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t\tsum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> intV<span class=\"token operator\">*</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">toIp</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\tnum <span class=\"token operator\">/=</span> <span class=\"token number\">256</span>\n\t\ti<span class=\"token operator\">--</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Linux-vim基本操作命令","comments":1,"date":"2021-03-07T11:49:22.000Z","author":null,"_content":"\n#### 插入模式\n- `i`\n> insert 进入编辑模式\n- `I`\n> insert before line 在行首开始插入\n- `a`\n> append 和 ==i== 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）\n- `A`\n> append after line 在行尾开始插入\n- `o`\n> open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）\n- `O`\n> append a line above 在当前行上一行开始插入\n\n- `Ctrl + h`\n> 删除上一个字符\n- `Ctrl + w`\n> 删除上一个单词\n- `Ctrl + u`\n> 删除当前行\n\n#### Normal模式\n\n- `:set nu`\n > 设置行号\n- `:set hls`\n > 设置搜索结果高亮\n- `:set incsearch`\n > 增量搜索结果高亮\n- `:vs`\n > 垂直分屏\n - `:sp`\n > 水平分屏\n- `:q`\n> 退出当前分屏 \n- `:% s/hello/world/g`\n> 将当前文件中的hello替换为world\n- `:% s/\\<xxx\\>/yyy/g`\n> 正则匹配xxx\n\n###### 替换标志位\n- `g` global 全局范围内执行\n- `c` confirm 表示确认，可以确认或拒绝修改\n- `n` number 报告匹配到的次数而不替换，可以用来查询匹配次数\n\n###### 反人类的上下左右\nhjkl\n- `h` 左移(四个键的最左边)\n- `l` 右移(四个键的最右边)\n- `j` 下移\n- `k` 上移\n\n###### 单词间移动\nword：以非空白符分割的单词(真单词)\nWORD：以空白符分割的单词(不一定是单词)\n- `w/W` 移动到下一个单词word/WORD的开头\n- `e/E` 移动到下一个单词word/WORD的结尾\n- `b/B` 移动带上一个单词word/WORD的开头\n\n###### 行间搜索移动\n- `f{char}`  同一行搜索并移动到该字符\n- `t{char}`  同行搜索并移动到该字符的前一个字符\n- `; `分号下一个\n- `, `逗号上一个\n- `F{char}` 反过来搜索前面的字符\n- `0` 移动到行首第一个字符\n- `^` 移动到第一个非空字符\n- `$` 移动到行尾\n- `g_` 移动到行尾非空白字符\n- `zz` 把当前行置为屏幕中间\n\n###### 文件开头、结尾\n- `gg` 快速移动到文件开头\n- `G` 快速移动到文件结尾\n\n###### 屏幕开头、中间、结尾\n- `H` Head  跳转到屏幕开头\n- `M` Middle 跳转到屏幕中间\n- `L` Lower 跳转到屏幕结尾\n\n###### 翻页\n- `Ctrl + u` upword 向上翻页\n- `Ctrl + f` forward 向下翻页\n\n#### Visual可视模式\n- `v`\n> VISUAL 进入可视模式，此时按上下左右可选中状态\n- `V`\n> VISUAL LINE 选中整行\n- `Ctrl v`\n> VISUAL BLOCK 方块选中\n\n##### 选中之后干什么\n- `d`\n> delete 删除选中内容\n- `y`\n> yanke 复制选中内容\n- `p`\n> paste 粘贴内容（在当前光标位置后或下以行粘贴内容）\n\n#### 命令模式\n\n#### 快捷键\n- `Ctrl + [`\n> 快速切换Insert模式到Normal模式\n- `gi`\n> 快速回到最后一次编辑的位置\n\n#### Vim增删改查\n###### 增加字符\n- `a/i/o`\n###### 快速删除\n- `x` 快速删除一个字符\n- `d` 配合文本对象快速删除一个单词\n- `d`和`x`都可以搭配数字来执行多次\n- `dw`==`daw` 删除单词个空格\n- `diw` 删除单词，不删空格\n- `dt{char}` 删除光标到目标字符之间的所有字符\n- `d0` 删除到行首之间的字符\n- `d$` 删除到行尾之间的字符\n- `4x` 删除4个字符\n- `2dd` 删除两行\n\n###### 快速修改\n- `r` replace r{char} 替换光标所在字符\n- `R` 以替换的形式输入\n- `c` change\n- `s` substitute 删除光标所在字符，并进入插入模式\n- `2s` 删除两个字符并进入插入模式\n\n###### 查询\n- `/` 正向查询\n- `?` 反向查询\n- `n` 跳转到下一个匹配\n- `N` 跳转到上一个匹配\n- `*` 进行当前单词的前向匹配\n- `#` 进行当前单词的后向匹配\n\n\n\n","source":"_posts/2021-03-07-Linux-vim基本操作命令.md","raw":"---\ntitle: Linux-vim基本操作命令\ncomments: true\ndate: 2021-03-07 19:49:22\nauthor:\ntags:\n - Linux\n - Vim\ncategories:\n---\n\n#### 插入模式\n- `i`\n> insert 进入编辑模式\n- `I`\n> insert before line 在行首开始插入\n- `a`\n> append 和 ==i== 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）\n- `A`\n> append after line 在行尾开始插入\n- `o`\n> open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）\n- `O`\n> append a line above 在当前行上一行开始插入\n\n- `Ctrl + h`\n> 删除上一个字符\n- `Ctrl + w`\n> 删除上一个单词\n- `Ctrl + u`\n> 删除当前行\n\n#### Normal模式\n\n- `:set nu`\n > 设置行号\n- `:set hls`\n > 设置搜索结果高亮\n- `:set incsearch`\n > 增量搜索结果高亮\n- `:vs`\n > 垂直分屏\n - `:sp`\n > 水平分屏\n- `:q`\n> 退出当前分屏 \n- `:% s/hello/world/g`\n> 将当前文件中的hello替换为world\n- `:% s/\\<xxx\\>/yyy/g`\n> 正则匹配xxx\n\n###### 替换标志位\n- `g` global 全局范围内执行\n- `c` confirm 表示确认，可以确认或拒绝修改\n- `n` number 报告匹配到的次数而不替换，可以用来查询匹配次数\n\n###### 反人类的上下左右\nhjkl\n- `h` 左移(四个键的最左边)\n- `l` 右移(四个键的最右边)\n- `j` 下移\n- `k` 上移\n\n###### 单词间移动\nword：以非空白符分割的单词(真单词)\nWORD：以空白符分割的单词(不一定是单词)\n- `w/W` 移动到下一个单词word/WORD的开头\n- `e/E` 移动到下一个单词word/WORD的结尾\n- `b/B` 移动带上一个单词word/WORD的开头\n\n###### 行间搜索移动\n- `f{char}`  同一行搜索并移动到该字符\n- `t{char}`  同行搜索并移动到该字符的前一个字符\n- `; `分号下一个\n- `, `逗号上一个\n- `F{char}` 反过来搜索前面的字符\n- `0` 移动到行首第一个字符\n- `^` 移动到第一个非空字符\n- `$` 移动到行尾\n- `g_` 移动到行尾非空白字符\n- `zz` 把当前行置为屏幕中间\n\n###### 文件开头、结尾\n- `gg` 快速移动到文件开头\n- `G` 快速移动到文件结尾\n\n###### 屏幕开头、中间、结尾\n- `H` Head  跳转到屏幕开头\n- `M` Middle 跳转到屏幕中间\n- `L` Lower 跳转到屏幕结尾\n\n###### 翻页\n- `Ctrl + u` upword 向上翻页\n- `Ctrl + f` forward 向下翻页\n\n#### Visual可视模式\n- `v`\n> VISUAL 进入可视模式，此时按上下左右可选中状态\n- `V`\n> VISUAL LINE 选中整行\n- `Ctrl v`\n> VISUAL BLOCK 方块选中\n\n##### 选中之后干什么\n- `d`\n> delete 删除选中内容\n- `y`\n> yanke 复制选中内容\n- `p`\n> paste 粘贴内容（在当前光标位置后或下以行粘贴内容）\n\n#### 命令模式\n\n#### 快捷键\n- `Ctrl + [`\n> 快速切换Insert模式到Normal模式\n- `gi`\n> 快速回到最后一次编辑的位置\n\n#### Vim增删改查\n###### 增加字符\n- `a/i/o`\n###### 快速删除\n- `x` 快速删除一个字符\n- `d` 配合文本对象快速删除一个单词\n- `d`和`x`都可以搭配数字来执行多次\n- `dw`==`daw` 删除单词个空格\n- `diw` 删除单词，不删空格\n- `dt{char}` 删除光标到目标字符之间的所有字符\n- `d0` 删除到行首之间的字符\n- `d$` 删除到行尾之间的字符\n- `4x` 删除4个字符\n- `2dd` 删除两行\n\n###### 快速修改\n- `r` replace r{char} 替换光标所在字符\n- `R` 以替换的形式输入\n- `c` change\n- `s` substitute 删除光标所在字符，并进入插入模式\n- `2s` 删除两个字符并进入插入模式\n\n###### 查询\n- `/` 正向查询\n- `?` 反向查询\n- `n` 跳转到下一个匹配\n- `N` 跳转到上一个匹配\n- `*` 进行当前单词的前向匹配\n- `#` 进行当前单词的后向匹配\n\n\n\n","slug":"Linux-vim基本操作命令","published":1,"updated":"2021-03-07T11:50:05.975Z","_id":"cklz3exu6001tjvs68tov2oxa","layout":"post","photos":[],"link":"","content":"<h4 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h4><ul>\n<li><p><code>i</code></p>\n<blockquote>\n<p>insert 进入编辑模式</p>\n</blockquote>\n</li>\n<li><p><code>I</code></p>\n<blockquote>\n<p>insert before line 在行首开始插入</p>\n</blockquote>\n</li>\n<li><p><code>a</code></p>\n<blockquote>\n<p>append 和 ==i== 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）</p>\n</blockquote>\n</li>\n<li><p><code>A</code></p>\n<blockquote>\n<p>append after line 在行尾开始插入</p>\n</blockquote>\n</li>\n<li><p><code>o</code></p>\n<blockquote>\n<p>open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）</p>\n</blockquote>\n</li>\n<li><p><code>O</code></p>\n<blockquote>\n<p>append a line above 在当前行上一行开始插入</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + h</code></p>\n<blockquote>\n<p>删除上一个字符</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + w</code></p>\n<blockquote>\n<p>删除上一个单词</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + u</code></p>\n<blockquote>\n<p>删除当前行</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Normal模式\"><a href=\"#Normal模式\" class=\"headerlink\" title=\"Normal模式\"></a>Normal模式</h4><ul>\n<li><code>:set nu</code><blockquote>\n<p>设置行号</p>\n</blockquote>\n</li>\n<li><code>:set hls</code><blockquote>\n<p>设置搜索结果高亮</p>\n</blockquote>\n</li>\n<li><code>:set incsearch</code><blockquote>\n<p>增量搜索结果高亮</p>\n</blockquote>\n</li>\n<li><code>:vs</code><blockquote>\n<p>垂直分屏</p>\n</blockquote>\n</li>\n<li><code>:sp</code><blockquote>\n<p>水平分屏</p>\n</blockquote>\n</li>\n<li><code>:q</code><blockquote>\n<p>退出当前分屏 </p>\n</blockquote>\n</li>\n<li><code>:% s/hello/world/g</code><blockquote>\n<p>将当前文件中的hello替换为world</p>\n</blockquote>\n</li>\n<li><code>:% s/\\&lt;xxx\\&gt;/yyy/g</code><blockquote>\n<p>正则匹配xxx</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"替换标志位\"><a href=\"#替换标志位\" class=\"headerlink\" title=\"替换标志位\"></a>替换标志位</h6><ul>\n<li><code>g</code> global 全局范围内执行</li>\n<li><code>c</code> confirm 表示确认，可以确认或拒绝修改</li>\n<li><code>n</code> number 报告匹配到的次数而不替换，可以用来查询匹配次数</li>\n</ul>\n<h6 id=\"反人类的上下左右\"><a href=\"#反人类的上下左右\" class=\"headerlink\" title=\"反人类的上下左右\"></a>反人类的上下左右</h6><p>hjkl</p>\n<ul>\n<li><code>h</code> 左移(四个键的最左边)</li>\n<li><code>l</code> 右移(四个键的最右边)</li>\n<li><code>j</code> 下移</li>\n<li><code>k</code> 上移</li>\n</ul>\n<h6 id=\"单词间移动\"><a href=\"#单词间移动\" class=\"headerlink\" title=\"单词间移动\"></a>单词间移动</h6><p>word：以非空白符分割的单词(真单词)<br>WORD：以空白符分割的单词(不一定是单词)</p>\n<ul>\n<li><code>w/W</code> 移动到下一个单词word/WORD的开头</li>\n<li><code>e/E</code> 移动到下一个单词word/WORD的结尾</li>\n<li><code>b/B</code> 移动带上一个单词word/WORD的开头</li>\n</ul>\n<h6 id=\"行间搜索移动\"><a href=\"#行间搜索移动\" class=\"headerlink\" title=\"行间搜索移动\"></a>行间搜索移动</h6><ul>\n<li><code>f&#123;char&#125;</code>  同一行搜索并移动到该字符</li>\n<li><code>t&#123;char&#125;</code>  同行搜索并移动到该字符的前一个字符</li>\n<li><code>; </code>分号下一个</li>\n<li><code>, </code>逗号上一个</li>\n<li><code>F&#123;char&#125;</code> 反过来搜索前面的字符</li>\n<li><code>0</code> 移动到行首第一个字符</li>\n<li><code>^</code> 移动到第一个非空字符</li>\n<li><code>$</code> 移动到行尾</li>\n<li><code>g_</code> 移动到行尾非空白字符</li>\n<li><code>zz</code> 把当前行置为屏幕中间</li>\n</ul>\n<h6 id=\"文件开头、结尾\"><a href=\"#文件开头、结尾\" class=\"headerlink\" title=\"文件开头、结尾\"></a>文件开头、结尾</h6><ul>\n<li><code>gg</code> 快速移动到文件开头</li>\n<li><code>G</code> 快速移动到文件结尾</li>\n</ul>\n<h6 id=\"屏幕开头、中间、结尾\"><a href=\"#屏幕开头、中间、结尾\" class=\"headerlink\" title=\"屏幕开头、中间、结尾\"></a>屏幕开头、中间、结尾</h6><ul>\n<li><code>H</code> Head  跳转到屏幕开头</li>\n<li><code>M</code> Middle 跳转到屏幕中间</li>\n<li><code>L</code> Lower 跳转到屏幕结尾</li>\n</ul>\n<h6 id=\"翻页\"><a href=\"#翻页\" class=\"headerlink\" title=\"翻页\"></a>翻页</h6><ul>\n<li><code>Ctrl + u</code> upword 向上翻页</li>\n<li><code>Ctrl + f</code> forward 向下翻页</li>\n</ul>\n<h4 id=\"Visual可视模式\"><a href=\"#Visual可视模式\" class=\"headerlink\" title=\"Visual可视模式\"></a>Visual可视模式</h4><ul>\n<li><code>v</code><blockquote>\n<p>VISUAL 进入可视模式，此时按上下左右可选中状态</p>\n</blockquote>\n</li>\n<li><code>V</code><blockquote>\n<p>VISUAL LINE 选中整行</p>\n</blockquote>\n</li>\n<li><code>Ctrl v</code><blockquote>\n<p>VISUAL BLOCK 方块选中</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"选中之后干什么\"><a href=\"#选中之后干什么\" class=\"headerlink\" title=\"选中之后干什么\"></a>选中之后干什么</h5><ul>\n<li><code>d</code><blockquote>\n<p>delete 删除选中内容</p>\n</blockquote>\n</li>\n<li><code>y</code><blockquote>\n<p>yanke 复制选中内容</p>\n</blockquote>\n</li>\n<li><code>p</code><blockquote>\n<p>paste 粘贴内容（在当前光标位置后或下以行粘贴内容）</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li><code>Ctrl + [</code><blockquote>\n<p>快速切换Insert模式到Normal模式</p>\n</blockquote>\n</li>\n<li><code>gi</code><blockquote>\n<p>快速回到最后一次编辑的位置</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Vim增删改查\"><a href=\"#Vim增删改查\" class=\"headerlink\" title=\"Vim增删改查\"></a>Vim增删改查</h4><h6 id=\"增加字符\"><a href=\"#增加字符\" class=\"headerlink\" title=\"增加字符\"></a>增加字符</h6><ul>\n<li><code>a/i/o</code><h6 id=\"快速删除\"><a href=\"#快速删除\" class=\"headerlink\" title=\"快速删除\"></a>快速删除</h6></li>\n<li><code>x</code> 快速删除一个字符</li>\n<li><code>d</code> 配合文本对象快速删除一个单词</li>\n<li><code>d</code>和<code>x</code>都可以搭配数字来执行多次</li>\n<li><code>dw</code>==<code>daw</code> 删除单词个空格</li>\n<li><code>diw</code> 删除单词，不删空格</li>\n<li><code>dt&#123;char&#125;</code> 删除光标到目标字符之间的所有字符</li>\n<li><code>d0</code> 删除到行首之间的字符</li>\n<li><code>d$</code> 删除到行尾之间的字符</li>\n<li><code>4x</code> 删除4个字符</li>\n<li><code>2dd</code> 删除两行</li>\n</ul>\n<h6 id=\"快速修改\"><a href=\"#快速修改\" class=\"headerlink\" title=\"快速修改\"></a>快速修改</h6><ul>\n<li><code>r</code> replace r{char} 替换光标所在字符</li>\n<li><code>R</code> 以替换的形式输入</li>\n<li><code>c</code> change</li>\n<li><code>s</code> substitute 删除光标所在字符，并进入插入模式</li>\n<li><code>2s</code> 删除两个字符并进入插入模式</li>\n</ul>\n<h6 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h6><ul>\n<li><code>/</code> 正向查询</li>\n<li><code>?</code> 反向查询</li>\n<li><code>n</code> 跳转到下一个匹配</li>\n<li><code>N</code> 跳转到上一个匹配</li>\n<li><code>*</code> 进行当前单词的前向匹配</li>\n<li><code>#</code> 进行当前单词的后向匹配</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h4><ul>\n<li><p><code>i</code></p>\n<blockquote>\n<p>insert 进入编辑模式</p>\n</blockquote>\n</li>\n<li><p><code>I</code></p>\n<blockquote>\n<p>insert before line 在行首开始插入</p>\n</blockquote>\n</li>\n<li><p><code>a</code></p>\n<blockquote>\n<p>append 和 ==i== 相似，不同在于在当前光标所在字母前，还是后插入（一试便知）</p>\n</blockquote>\n</li>\n<li><p><code>A</code></p>\n<blockquote>\n<p>append after line 在行尾开始插入</p>\n</blockquote>\n</li>\n<li><p><code>o</code></p>\n<blockquote>\n<p>open a line below 在当前行下面新生成一行并进入编辑模式（你是不是还在的敲回车呢！）</p>\n</blockquote>\n</li>\n<li><p><code>O</code></p>\n<blockquote>\n<p>append a line above 在当前行上一行开始插入</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + h</code></p>\n<blockquote>\n<p>删除上一个字符</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + w</code></p>\n<blockquote>\n<p>删除上一个单词</p>\n</blockquote>\n</li>\n<li><p><code>Ctrl + u</code></p>\n<blockquote>\n<p>删除当前行</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Normal模式\"><a href=\"#Normal模式\" class=\"headerlink\" title=\"Normal模式\"></a>Normal模式</h4><ul>\n<li><code>:set nu</code><blockquote>\n<p>设置行号</p>\n</blockquote>\n</li>\n<li><code>:set hls</code><blockquote>\n<p>设置搜索结果高亮</p>\n</blockquote>\n</li>\n<li><code>:set incsearch</code><blockquote>\n<p>增量搜索结果高亮</p>\n</blockquote>\n</li>\n<li><code>:vs</code><blockquote>\n<p>垂直分屏</p>\n</blockquote>\n</li>\n<li><code>:sp</code><blockquote>\n<p>水平分屏</p>\n</blockquote>\n</li>\n<li><code>:q</code><blockquote>\n<p>退出当前分屏 </p>\n</blockquote>\n</li>\n<li><code>:% s/hello/world/g</code><blockquote>\n<p>将当前文件中的hello替换为world</p>\n</blockquote>\n</li>\n<li><code>:% s/\\&lt;xxx\\&gt;/yyy/g</code><blockquote>\n<p>正则匹配xxx</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"替换标志位\"><a href=\"#替换标志位\" class=\"headerlink\" title=\"替换标志位\"></a>替换标志位</h6><ul>\n<li><code>g</code> global 全局范围内执行</li>\n<li><code>c</code> confirm 表示确认，可以确认或拒绝修改</li>\n<li><code>n</code> number 报告匹配到的次数而不替换，可以用来查询匹配次数</li>\n</ul>\n<h6 id=\"反人类的上下左右\"><a href=\"#反人类的上下左右\" class=\"headerlink\" title=\"反人类的上下左右\"></a>反人类的上下左右</h6><p>hjkl</p>\n<ul>\n<li><code>h</code> 左移(四个键的最左边)</li>\n<li><code>l</code> 右移(四个键的最右边)</li>\n<li><code>j</code> 下移</li>\n<li><code>k</code> 上移</li>\n</ul>\n<h6 id=\"单词间移动\"><a href=\"#单词间移动\" class=\"headerlink\" title=\"单词间移动\"></a>单词间移动</h6><p>word：以非空白符分割的单词(真单词)<br>WORD：以空白符分割的单词(不一定是单词)</p>\n<ul>\n<li><code>w/W</code> 移动到下一个单词word/WORD的开头</li>\n<li><code>e/E</code> 移动到下一个单词word/WORD的结尾</li>\n<li><code>b/B</code> 移动带上一个单词word/WORD的开头</li>\n</ul>\n<h6 id=\"行间搜索移动\"><a href=\"#行间搜索移动\" class=\"headerlink\" title=\"行间搜索移动\"></a>行间搜索移动</h6><ul>\n<li><code>f&#123;char&#125;</code>  同一行搜索并移动到该字符</li>\n<li><code>t&#123;char&#125;</code>  同行搜索并移动到该字符的前一个字符</li>\n<li><code>; </code>分号下一个</li>\n<li><code>, </code>逗号上一个</li>\n<li><code>F&#123;char&#125;</code> 反过来搜索前面的字符</li>\n<li><code>0</code> 移动到行首第一个字符</li>\n<li><code>^</code> 移动到第一个非空字符</li>\n<li><code>$</code> 移动到行尾</li>\n<li><code>g_</code> 移动到行尾非空白字符</li>\n<li><code>zz</code> 把当前行置为屏幕中间</li>\n</ul>\n<h6 id=\"文件开头、结尾\"><a href=\"#文件开头、结尾\" class=\"headerlink\" title=\"文件开头、结尾\"></a>文件开头、结尾</h6><ul>\n<li><code>gg</code> 快速移动到文件开头</li>\n<li><code>G</code> 快速移动到文件结尾</li>\n</ul>\n<h6 id=\"屏幕开头、中间、结尾\"><a href=\"#屏幕开头、中间、结尾\" class=\"headerlink\" title=\"屏幕开头、中间、结尾\"></a>屏幕开头、中间、结尾</h6><ul>\n<li><code>H</code> Head  跳转到屏幕开头</li>\n<li><code>M</code> Middle 跳转到屏幕中间</li>\n<li><code>L</code> Lower 跳转到屏幕结尾</li>\n</ul>\n<h6 id=\"翻页\"><a href=\"#翻页\" class=\"headerlink\" title=\"翻页\"></a>翻页</h6><ul>\n<li><code>Ctrl + u</code> upword 向上翻页</li>\n<li><code>Ctrl + f</code> forward 向下翻页</li>\n</ul>\n<h4 id=\"Visual可视模式\"><a href=\"#Visual可视模式\" class=\"headerlink\" title=\"Visual可视模式\"></a>Visual可视模式</h4><ul>\n<li><code>v</code><blockquote>\n<p>VISUAL 进入可视模式，此时按上下左右可选中状态</p>\n</blockquote>\n</li>\n<li><code>V</code><blockquote>\n<p>VISUAL LINE 选中整行</p>\n</blockquote>\n</li>\n<li><code>Ctrl v</code><blockquote>\n<p>VISUAL BLOCK 方块选中</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"选中之后干什么\"><a href=\"#选中之后干什么\" class=\"headerlink\" title=\"选中之后干什么\"></a>选中之后干什么</h5><ul>\n<li><code>d</code><blockquote>\n<p>delete 删除选中内容</p>\n</blockquote>\n</li>\n<li><code>y</code><blockquote>\n<p>yanke 复制选中内容</p>\n</blockquote>\n</li>\n<li><code>p</code><blockquote>\n<p>paste 粘贴内容（在当前光标位置后或下以行粘贴内容）</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li><code>Ctrl + [</code><blockquote>\n<p>快速切换Insert模式到Normal模式</p>\n</blockquote>\n</li>\n<li><code>gi</code><blockquote>\n<p>快速回到最后一次编辑的位置</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Vim增删改查\"><a href=\"#Vim增删改查\" class=\"headerlink\" title=\"Vim增删改查\"></a>Vim增删改查</h4><h6 id=\"增加字符\"><a href=\"#增加字符\" class=\"headerlink\" title=\"增加字符\"></a>增加字符</h6><ul>\n<li><code>a/i/o</code><h6 id=\"快速删除\"><a href=\"#快速删除\" class=\"headerlink\" title=\"快速删除\"></a>快速删除</h6></li>\n<li><code>x</code> 快速删除一个字符</li>\n<li><code>d</code> 配合文本对象快速删除一个单词</li>\n<li><code>d</code>和<code>x</code>都可以搭配数字来执行多次</li>\n<li><code>dw</code>==<code>daw</code> 删除单词个空格</li>\n<li><code>diw</code> 删除单词，不删空格</li>\n<li><code>dt&#123;char&#125;</code> 删除光标到目标字符之间的所有字符</li>\n<li><code>d0</code> 删除到行首之间的字符</li>\n<li><code>d$</code> 删除到行尾之间的字符</li>\n<li><code>4x</code> 删除4个字符</li>\n<li><code>2dd</code> 删除两行</li>\n</ul>\n<h6 id=\"快速修改\"><a href=\"#快速修改\" class=\"headerlink\" title=\"快速修改\"></a>快速修改</h6><ul>\n<li><code>r</code> replace r{char} 替换光标所在字符</li>\n<li><code>R</code> 以替换的形式输入</li>\n<li><code>c</code> change</li>\n<li><code>s</code> substitute 删除光标所在字符，并进入插入模式</li>\n<li><code>2s</code> 删除两个字符并进入插入模式</li>\n</ul>\n<h6 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h6><ul>\n<li><code>/</code> 正向查询</li>\n<li><code>?</code> 反向查询</li>\n<li><code>n</code> 跳转到下一个匹配</li>\n<li><code>N</code> 跳转到上一个匹配</li>\n<li><code>*</code> 进行当前单词的前向匹配</li>\n<li><code>#</code> 进行当前单词的后向匹配</li>\n</ul>\n"},{"title":"Mysql-主从同步原理","comments":1,"date":"2021-03-07T11:50:34.000Z","author":null,"_content":"\n* #### Replication 线程\n1. master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。\n2. 要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。\n3. 整个复制过程实际上就是slave从master端获取日志然后在自己身上**顺序执行**日志中记录的各种操作。\n\n* #### 复制基本过程（异步的）\n1. slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 \n2. master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）\n3. slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。\n4. slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。\n\n* #### MySQL半同步模式\n1. 在这种模式下：master会等到binlog**成功传送并写入至少一个slave的relay log之后才会提交**，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，**直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式**。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。\n","source":"_posts/2021-03-07-Mysql-主从同步原理.md","raw":"---\ntitle: Mysql-主从同步原理\ncomments: true\ndate: 2021-03-07 19:50:34\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n* #### Replication 线程\n1. master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。\n2. 要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。\n3. 整个复制过程实际上就是slave从master端获取日志然后在自己身上**顺序执行**日志中记录的各种操作。\n\n* #### 复制基本过程（异步的）\n1. slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 \n2. master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）\n3. slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。\n4. slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。\n\n* #### MySQL半同步模式\n1. 在这种模式下：master会等到binlog**成功传送并写入至少一个slave的relay log之后才会提交**，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，**直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式**。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。\n","slug":"Mysql-主从同步原理","published":1,"updated":"2021-03-07T11:50:55.031Z","_id":"cklz3gh1c001yjvs64ogzacz1","layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"Replication-线程\"><a href=\"#Replication-线程\" class=\"headerlink\" title=\"Replication 线程\"></a>Replication 线程</h4></li>\n</ul>\n<ol>\n<li>master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。</li>\n<li>要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。</li>\n<li>整个复制过程实际上就是slave从master端获取日志然后在自己身上<strong>顺序执行</strong>日志中记录的各种操作。</li>\n</ol>\n<ul>\n<li><h4 id=\"复制基本过程（异步的）\"><a href=\"#复制基本过程（异步的）\" class=\"headerlink\" title=\"复制基本过程（异步的）\"></a>复制基本过程（异步的）</h4></li>\n</ul>\n<ol>\n<li>slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 </li>\n<li>master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）</li>\n<li>slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。</li>\n<li>slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。</li>\n</ol>\n<ul>\n<li><h4 id=\"MySQL半同步模式\"><a href=\"#MySQL半同步模式\" class=\"headerlink\" title=\"MySQL半同步模式\"></a>MySQL半同步模式</h4></li>\n</ul>\n<ol>\n<li>在这种模式下：master会等到binlog<strong>成功传送并写入至少一个slave的relay log之后才会提交</strong>，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，<strong>直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式</strong>。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<ul>\n<li><h4 id=\"Replication-线程\"><a href=\"#Replication-线程\" class=\"headerlink\" title=\"Replication 线程\"></a>Replication 线程</h4></li>\n</ul>\n<ol>\n<li>master与slave之间实现整个复制过程主要由三个线程完成：两个（SQL线程和IO线程）在slave端，一个（IO线程）在master端。</li>\n<li>要实现MySQL的replication，必须打开master端的Binary Log(mysql-bin.xxx)功能。</li>\n<li>整个复制过程实际上就是slave从master端获取日志然后在自己身上<strong>顺序执行</strong>日志中记录的各种操作。</li>\n</ol>\n<ul>\n<li><h4 id=\"复制基本过程（异步的）\"><a href=\"#复制基本过程（异步的）\" class=\"headerlink\" title=\"复制基本过程（异步的）\"></a>复制基本过程（异步的）</h4></li>\n</ul>\n<ol>\n<li>slave上的IO线程连接master，请求从指定日志文件的指定位置（或者从最开始）之后的日志内容。 </li>\n<li>master收到请求，负责复制的IO根据请求信息读取指定的日志，并返回（日志文件的地址也返回，方便下次直接根据地址请求）</li>\n<li>slave的IO收到信息后，将日志内容依次写入到slave端的relay log文件的最末端，存master日志文件的地址。</li>\n<li>slave的SQL线程检测到Relay Log中新加内容后，马上解析该Log文件的内容（Query语句），从而能保证两端的数据是一样的。</li>\n</ol>\n<ul>\n<li><h4 id=\"MySQL半同步模式\"><a href=\"#MySQL半同步模式\" class=\"headerlink\" title=\"MySQL半同步模式\"></a>MySQL半同步模式</h4></li>\n</ul>\n<ol>\n<li>在这种模式下：master会等到binlog<strong>成功传送并写入至少一个slave的relay log之后才会提交</strong>，否则一直等待，直到timeout（默认10s）。当出现timeout的时候，master会自动切换半同步为异步，<strong>直到至少有一个slave成功收到并发送Acknowledge，master会再切换回半同步模式</strong>。结合这个新功能，我们可以做到，在允许损失一定的事务吞吐量的前提下来保证同步数据的绝对安全，因为当你设置timeout为一个足够大的值的情况下，任何提交的数据都会安全抵达slave。</li>\n</ol>\n"},{"title":"Linux-常用命令整理","comments":1,"date":"2021-03-07T11:51:24.000Z","author":null,"_content":"\n#### 开进程并发下载\n```\nfor ((s=1987;s<2019;s=s+1))\ndo\nfor ((m=1;m<13;m=m+1))\ndo\naa=($s'_'$m)\necho $aa\nwget https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &\ndone\ndone\n```\n\n#### 远程复制\n```\n从前面的文件夹复制到后面的文件夹\nscp -r remote_username@remote_ip:remote_folder local_folder\n```\n#### 查看外网ip\n```\ncurl -L tool.lu/ip\n```\n#### 查看文件大小\n \n```\ndu -h --max-depth=0 ./2017_credits.txt\n\n由小到大\ndu -sh * | sort -n\n由大到小\ndu -sh * | sort -nr\n```\n\n#### 查看ip\n\n```\nip addr show\n```\n#### 看日志\n\n```\n看线上日志要用less/more，千万别用vi，vi会一次把文件全读入，内存耗光\n```\n\n#### 远程文件弄到本地文件夹\n```\nshutil.copy(remote_file, local_file_dir)\n```\n\n#### echo导出select数据\n\n```\necho \"select * from miveshow_money.user_credits_history limit 1\" | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow > o\n```\n\n#### 统计文件和文件夹的总量\n\n```\nls | wc -l\n```\n#### 统计文件个数\n\n```\nls -l |grep \"^-\"|wc -l\n```\n\n#### 统计当前目录下的所有目录\n```\n文件以-开头\n目录以d开头\n\n1、ls -l | grep \"^d\"\n\n目录以/结尾\n\n2、ls -F | grep \"/$\"\n\n配合查看文件数量的命令查看目录数量\n\nls -l | grep \"^d\" | wc -l\n```\n\n#### 排序、去重\n```\nsort -n test.txt | uniq\n```\n\n#### grep多个关键字(or)\n\n```\ngrep file.txt -E \"aaa|bbb|ccc\"\n```\n\n#### 删除多行\n删除多行，闭区间[1,999]\n```\nvi file.txt\n:1,999d\n```\n\n#### 覆盖方式生成文件\n```\ncat file.log | grep test > result.txt\n```\n#### 生成或追加到文件\n```\ncat file.log | grep test >> result.txt\n```\n","source":"_posts/2021-03-07-Linux-常用命令整理.md","raw":"---\ntitle: Linux-常用命令整理\ncomments: true\ndate: 2021-03-07 19:51:24\nauthor:\ntags:\n - Linux\ncategories:\n---\n\n#### 开进程并发下载\n```\nfor ((s=1987;s<2019;s=s+1))\ndo\nfor ((m=1;m<13;m=m+1))\ndo\naa=($s'_'$m)\necho $aa\nwget https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &\ndone\ndone\n```\n\n#### 远程复制\n```\n从前面的文件夹复制到后面的文件夹\nscp -r remote_username@remote_ip:remote_folder local_folder\n```\n#### 查看外网ip\n```\ncurl -L tool.lu/ip\n```\n#### 查看文件大小\n \n```\ndu -h --max-depth=0 ./2017_credits.txt\n\n由小到大\ndu -sh * | sort -n\n由大到小\ndu -sh * | sort -nr\n```\n\n#### 查看ip\n\n```\nip addr show\n```\n#### 看日志\n\n```\n看线上日志要用less/more，千万别用vi，vi会一次把文件全读入，内存耗光\n```\n\n#### 远程文件弄到本地文件夹\n```\nshutil.copy(remote_file, local_file_dir)\n```\n\n#### echo导出select数据\n\n```\necho \"select * from miveshow_money.user_credits_history limit 1\" | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow > o\n```\n\n#### 统计文件和文件夹的总量\n\n```\nls | wc -l\n```\n#### 统计文件个数\n\n```\nls -l |grep \"^-\"|wc -l\n```\n\n#### 统计当前目录下的所有目录\n```\n文件以-开头\n目录以d开头\n\n1、ls -l | grep \"^d\"\n\n目录以/结尾\n\n2、ls -F | grep \"/$\"\n\n配合查看文件数量的命令查看目录数量\n\nls -l | grep \"^d\" | wc -l\n```\n\n#### 排序、去重\n```\nsort -n test.txt | uniq\n```\n\n#### grep多个关键字(or)\n\n```\ngrep file.txt -E \"aaa|bbb|ccc\"\n```\n\n#### 删除多行\n删除多行，闭区间[1,999]\n```\nvi file.txt\n:1,999d\n```\n\n#### 覆盖方式生成文件\n```\ncat file.log | grep test > result.txt\n```\n#### 生成或追加到文件\n```\ncat file.log | grep test >> result.txt\n```\n","slug":"Linux-常用命令整理","published":1,"updated":"2021-03-07T12:01:57.821Z","_id":"cklz3hk3l0021jvs61nuw24vc","layout":"post","photos":[],"link":"","content":"<h4 id=\"开进程并发下载\"><a href=\"#开进程并发下载\" class=\"headerlink\" title=\"开进程并发下载\"></a>开进程并发下载</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">for ((s&#x3D;1987;s&lt;2019;s&#x3D;s+1))\ndo\nfor ((m&#x3D;1;m&lt;13;m&#x3D;m+1))\ndo\naa&#x3D;($s&#39;_&#39;$m)\necho $aa\nwget https:&#x2F;&#x2F;transtats.bts.gov&#x2F;PREZIP&#x2F;On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &amp;\ndone\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"远程复制\"><a href=\"#远程复制\" class=\"headerlink\" title=\"远程复制\"></a>远程复制</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">从前面的文件夹复制到后面的文件夹\nscp -r remote_username@remote_ip:remote_folder local_folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"查看外网ip\"><a href=\"#查看外网ip\" class=\"headerlink\" title=\"查看外网ip\"></a>查看外网ip</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -L tool.lu&#x2F;ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看文件大小\"><a href=\"#查看文件大小\" class=\"headerlink\" title=\"查看文件大小\"></a>查看文件大小</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -h --max-depth&#x3D;0 .&#x2F;2017_credits.txt\n\n由小到大\ndu -sh * | sort -n\n由大到小\ndu -sh * | sort -nr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看ip\"><a href=\"#查看ip\" class=\"headerlink\" title=\"查看ip\"></a>查看ip</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ip addr show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"看日志\"><a href=\"#看日志\" class=\"headerlink\" title=\"看日志\"></a>看日志</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">看线上日志要用less&#x2F;more，千万别用vi，vi会一次把文件全读入，内存耗光<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"远程文件弄到本地文件夹\"><a href=\"#远程文件弄到本地文件夹\" class=\"headerlink\" title=\"远程文件弄到本地文件夹\"></a>远程文件弄到本地文件夹</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">shutil.copy(remote_file, local_file_dir)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"echo导出select数据\"><a href=\"#echo导出select数据\" class=\"headerlink\" title=\"echo导出select数据\"></a>echo导出select数据</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">echo &quot;select * from miveshow_money.user_credits_history limit 1&quot; | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow &gt; o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"统计文件和文件夹的总量\"><a href=\"#统计文件和文件夹的总量\" class=\"headerlink\" title=\"统计文件和文件夹的总量\"></a>统计文件和文件夹的总量</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ls | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"统计文件个数\"><a href=\"#统计文件个数\" class=\"headerlink\" title=\"统计文件个数\"></a>统计文件个数</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ls -l |grep &quot;^-&quot;|wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"统计当前目录下的所有目录\"><a href=\"#统计当前目录下的所有目录\" class=\"headerlink\" title=\"统计当前目录下的所有目录\"></a>统计当前目录下的所有目录</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">文件以-开头\n目录以d开头\n\n1、ls -l | grep &quot;^d&quot;\n\n目录以&#x2F;结尾\n\n2、ls -F | grep &quot;&#x2F;$&quot;\n\n配合查看文件数量的命令查看目录数量\n\nls -l | grep &quot;^d&quot; | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"排序、去重\"><a href=\"#排序、去重\" class=\"headerlink\" title=\"排序、去重\"></a>排序、去重</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">sort -n test.txt | uniq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"grep多个关键字-or\"><a href=\"#grep多个关键字-or\" class=\"headerlink\" title=\"grep多个关键字(or)\"></a>grep多个关键字(or)</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep file.txt -E &quot;aaa|bbb|ccc&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"删除多行\"><a href=\"#删除多行\" class=\"headerlink\" title=\"删除多行\"></a>删除多行</h4><p>删除多行，闭区间[1,999]</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vi file.txt\n:1,999d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"覆盖方式生成文件\"><a href=\"#覆盖方式生成文件\" class=\"headerlink\" title=\"覆盖方式生成文件\"></a>覆盖方式生成文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat file.log | grep test &gt; result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"生成或追加到文件\"><a href=\"#生成或追加到文件\" class=\"headerlink\" title=\"生成或追加到文件\"></a>生成或追加到文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat file.log | grep test &gt;&gt; result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"开进程并发下载\"><a href=\"#开进程并发下载\" class=\"headerlink\" title=\"开进程并发下载\"></a>开进程并发下载</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">for ((s&#x3D;1987;s&lt;2019;s&#x3D;s+1))\ndo\nfor ((m&#x3D;1;m&lt;13;m&#x3D;m+1))\ndo\naa&#x3D;($s&#39;_&#39;$m)\necho $aa\nwget https:&#x2F;&#x2F;transtats.bts.gov&#x2F;PREZIP&#x2F;On_Time_Reporting_Carrier_On_Time_Performance_1987_present_$aa.zip &amp;\ndone\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"远程复制\"><a href=\"#远程复制\" class=\"headerlink\" title=\"远程复制\"></a>远程复制</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">从前面的文件夹复制到后面的文件夹\nscp -r remote_username@remote_ip:remote_folder local_folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"查看外网ip\"><a href=\"#查看外网ip\" class=\"headerlink\" title=\"查看外网ip\"></a>查看外网ip</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -L tool.lu&#x2F;ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看文件大小\"><a href=\"#查看文件大小\" class=\"headerlink\" title=\"查看文件大小\"></a>查看文件大小</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -h --max-depth&#x3D;0 .&#x2F;2017_credits.txt\n\n由小到大\ndu -sh * | sort -n\n由大到小\ndu -sh * | sort -nr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看ip\"><a href=\"#查看ip\" class=\"headerlink\" title=\"查看ip\"></a>查看ip</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ip addr show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"看日志\"><a href=\"#看日志\" class=\"headerlink\" title=\"看日志\"></a>看日志</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">看线上日志要用less&#x2F;more，千万别用vi，vi会一次把文件全读入，内存耗光<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"远程文件弄到本地文件夹\"><a href=\"#远程文件弄到本地文件夹\" class=\"headerlink\" title=\"远程文件弄到本地文件夹\"></a>远程文件弄到本地文件夹</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">shutil.copy(remote_file, local_file_dir)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"echo导出select数据\"><a href=\"#echo导出select数据\" class=\"headerlink\" title=\"echo导出select数据\"></a>echo导出select数据</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">echo &quot;select * from miveshow_money.user_credits_history limit 1&quot; | mysql -umiveshow -h10.0.110.115 -pmiveshow123 -Dmiveshow &gt; o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"统计文件和文件夹的总量\"><a href=\"#统计文件和文件夹的总量\" class=\"headerlink\" title=\"统计文件和文件夹的总量\"></a>统计文件和文件夹的总量</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ls | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"统计文件个数\"><a href=\"#统计文件个数\" class=\"headerlink\" title=\"统计文件个数\"></a>统计文件个数</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ls -l |grep &quot;^-&quot;|wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"统计当前目录下的所有目录\"><a href=\"#统计当前目录下的所有目录\" class=\"headerlink\" title=\"统计当前目录下的所有目录\"></a>统计当前目录下的所有目录</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">文件以-开头\n目录以d开头\n\n1、ls -l | grep &quot;^d&quot;\n\n目录以&#x2F;结尾\n\n2、ls -F | grep &quot;&#x2F;$&quot;\n\n配合查看文件数量的命令查看目录数量\n\nls -l | grep &quot;^d&quot; | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"排序、去重\"><a href=\"#排序、去重\" class=\"headerlink\" title=\"排序、去重\"></a>排序、去重</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">sort -n test.txt | uniq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"grep多个关键字-or\"><a href=\"#grep多个关键字-or\" class=\"headerlink\" title=\"grep多个关键字(or)\"></a>grep多个关键字(or)</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep file.txt -E &quot;aaa|bbb|ccc&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"删除多行\"><a href=\"#删除多行\" class=\"headerlink\" title=\"删除多行\"></a>删除多行</h4><p>删除多行，闭区间[1,999]</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vi file.txt\n:1,999d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"覆盖方式生成文件\"><a href=\"#覆盖方式生成文件\" class=\"headerlink\" title=\"覆盖方式生成文件\"></a>覆盖方式生成文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat file.log | grep test &gt; result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"生成或追加到文件\"><a href=\"#生成或追加到文件\" class=\"headerlink\" title=\"生成或追加到文件\"></a>生成或追加到文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat file.log | grep test &gt;&gt; result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"Git-常用命令整理","comments":1,"date":"2021-03-07T11:52:19.000Z","author":null,"_content":"\n#### 远程分支强制覆盖本地分支(超级常用)\n置顶是因为我自己用了无数遍呀！！\n```\ngit fetch --all\ngit reset --hard origin/your branch name\ngit pull\n```\n#### 快捷提交\n```\ngit commit -a -m 'this is my commit'\n```\n等价于\n```\ngit add .\ngit commit -m 'your commit'\n```\n#### 命令简写(mac环境，windows没试)\n命令行输入：\n```\nalias\n```\n会列出所有git相关的缩写，当然也可以自己配。\n![alias](https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n常用的也就几个：\n```\n切换指定分支：\ngco branch_name\n切换到master分支：\ngcm\n查看分支：\ngb\n查看修改：\ngd\n拉代码：\ngl\n```\n#### 新建没有parent的新分支\n```\ngit checkout --orphan branch-name\n```\n#### Git 代码量\n```\ngit log --format='%aN' | sort -u | while read name; do echo -en \"$name\\t\"; git log --author=\"$name\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' -; done\n```\n#### Git 命令提示：perl: warning: Setting locale failed.\n```\nvim  ~/.zshrc\n\n# Setting for the new UTF-8 terminal support in Lion\nLC_CTYPE=en_US.UTF-8\nLC_ALL=en_US.UTF-8\n\nsource ~/.zshrc\n\n重启iTerm\n```\n#### merge某个或几个commit\n有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。\n* 查找要merge的commitId\n```\ngco old_branch\ngit log\n```\n> commit 1534c530522982a6ff050ac420b300ae4364474e\nAuthor: lidoudou \\<lidoudou@csdn.com>\nDate:   Sat Apr 27 17:15:14 2019 +0800\n>  update kafka setting\n* 切换到目标分支，pick目标commit\n```\ngco new_branch\ngit cherr-pick 1534c530522  // commitId\n```\n* 正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。\n* 当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。","source":"_posts/2021-03-07-Git-常用命令整理.md","raw":"---\ntitle: Git-常用命令整理\ncomments: true\ndate: 2021-03-07 19:52:19\nauthor:\ntags:\n - Git\ncategories:\n---\n\n#### 远程分支强制覆盖本地分支(超级常用)\n置顶是因为我自己用了无数遍呀！！\n```\ngit fetch --all\ngit reset --hard origin/your branch name\ngit pull\n```\n#### 快捷提交\n```\ngit commit -a -m 'this is my commit'\n```\n等价于\n```\ngit add .\ngit commit -m 'your commit'\n```\n#### 命令简写(mac环境，windows没试)\n命令行输入：\n```\nalias\n```\n会列出所有git相关的缩写，当然也可以自己配。\n![alias](https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70)\n常用的也就几个：\n```\n切换指定分支：\ngco branch_name\n切换到master分支：\ngcm\n查看分支：\ngb\n查看修改：\ngd\n拉代码：\ngl\n```\n#### 新建没有parent的新分支\n```\ngit checkout --orphan branch-name\n```\n#### Git 代码量\n```\ngit log --format='%aN' | sort -u | while read name; do echo -en \"$name\\t\"; git log --author=\"$name\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' -; done\n```\n#### Git 命令提示：perl: warning: Setting locale failed.\n```\nvim  ~/.zshrc\n\n# Setting for the new UTF-8 terminal support in Lion\nLC_CTYPE=en_US.UTF-8\nLC_ALL=en_US.UTF-8\n\nsource ~/.zshrc\n\n重启iTerm\n```\n#### merge某个或几个commit\n有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。\n* 查找要merge的commitId\n```\ngco old_branch\ngit log\n```\n> commit 1534c530522982a6ff050ac420b300ae4364474e\nAuthor: lidoudou \\<lidoudou@csdn.com>\nDate:   Sat Apr 27 17:15:14 2019 +0800\n>  update kafka setting\n* 切换到目标分支，pick目标commit\n```\ngco new_branch\ngit cherr-pick 1534c530522  // commitId\n```\n* 正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。\n* 当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。","slug":"Git-常用命令整理","published":1,"updated":"2021-03-07T11:52:40.710Z","_id":"cklz3iq8m0023jvs67t6gcn5o","layout":"post","photos":[],"link":"","content":"<h4 id=\"远程分支强制覆盖本地分支-超级常用\"><a href=\"#远程分支强制覆盖本地分支-超级常用\" class=\"headerlink\" title=\"远程分支强制覆盖本地分支(超级常用)\"></a>远程分支强制覆盖本地分支(超级常用)</h4><p>置顶是因为我自己用了无数遍呀！！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git fetch --all\ngit reset --hard origin&#x2F;your branch name\ngit pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"快捷提交\"><a href=\"#快捷提交\" class=\"headerlink\" title=\"快捷提交\"></a>快捷提交</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git commit -a -m &#39;this is my commit&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>等价于</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git add .\ngit commit -m &#39;your commit&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"命令简写-mac环境，windows没试\"><a href=\"#命令简写-mac环境，windows没试\" class=\"headerlink\" title=\"命令简写(mac环境，windows没试)\"></a>命令简写(mac环境，windows没试)</h4><p>命令行输入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">alias<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会列出所有git相关的缩写，当然也可以自己配。<br><img src=\"https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"alias\"><br>常用的也就几个：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">切换指定分支：\ngco branch_name\n切换到master分支：\ngcm\n查看分支：\ngb\n查看修改：\ngd\n拉代码：\ngl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"新建没有parent的新分支\"><a href=\"#新建没有parent的新分支\" class=\"headerlink\" title=\"新建没有parent的新分支\"></a>新建没有parent的新分支</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout --orphan branch-name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Git-代码量\"><a href=\"#Git-代码量\" class=\"headerlink\" title=\"Git 代码量\"></a>Git 代码量</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git log --format&#x3D;&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author&#x3D;&quot;$name&quot; --pretty&#x3D;tformat: --numstat | awk &#39;&#123; add +&#x3D; $1; subs +&#x3D; $2; loc +&#x3D; $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc &#125;&#39; -; done<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Git-命令提示：perl-warning-Setting-locale-failed\"><a href=\"#Git-命令提示：perl-warning-Setting-locale-failed\" class=\"headerlink\" title=\"Git 命令提示：perl: warning: Setting locale failed.\"></a>Git 命令提示：perl: warning: Setting locale failed.</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">vim  ~&#x2F;.zshrc\n\n# Setting for the new UTF-8 terminal support in Lion\nLC_CTYPE&#x3D;en_US.UTF-8\nLC_ALL&#x3D;en_US.UTF-8\n\nsource ~&#x2F;.zshrc\n\n重启iTerm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"merge某个或几个commit\"><a href=\"#merge某个或几个commit\" class=\"headerlink\" title=\"merge某个或几个commit\"></a>merge某个或几个commit</h4><p>有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。</p>\n<ul>\n<li>查找要merge的commitId<pre class=\"line-numbers language-none\"><code class=\"language-none\">gco old_branch\ngit log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>commit 1534c530522982a6ff050ac420b300ae4364474e<br>Author: lidoudou &lt;<a href=\"mailto:&#108;&#105;&#x64;&#111;&#117;&#100;&#x6f;&#117;&#64;&#x63;&#115;&#100;&#110;&#46;&#x63;&#111;&#109;\">&#108;&#105;&#x64;&#111;&#117;&#100;&#x6f;&#117;&#64;&#x63;&#115;&#100;&#110;&#46;&#x63;&#111;&#109;</a>&gt;<br>Date:   Sat Apr 27 17:15:14 2019 +0800<br> update kafka setting</p>\n</blockquote>\n</li>\n<li>切换到目标分支，pick目标commit<pre class=\"line-numbers language-none\"><code class=\"language-none\">gco new_branch\ngit cherr-pick 1534c530522  &#x2F;&#x2F; commitId<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。</li>\n<li>当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"远程分支强制覆盖本地分支-超级常用\"><a href=\"#远程分支强制覆盖本地分支-超级常用\" class=\"headerlink\" title=\"远程分支强制覆盖本地分支(超级常用)\"></a>远程分支强制覆盖本地分支(超级常用)</h4><p>置顶是因为我自己用了无数遍呀！！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git fetch --all\ngit reset --hard origin&#x2F;your branch name\ngit pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"快捷提交\"><a href=\"#快捷提交\" class=\"headerlink\" title=\"快捷提交\"></a>快捷提交</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git commit -a -m &#39;this is my commit&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>等价于</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git add .\ngit commit -m &#39;your commit&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"命令简写-mac环境，windows没试\"><a href=\"#命令简写-mac环境，windows没试\" class=\"headerlink\" title=\"命令简写(mac环境，windows没试)\"></a>命令简写(mac环境，windows没试)</h4><p>命令行输入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">alias<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会列出所有git相关的缩写，当然也可以自己配。<br><img src=\"https://img-blog.csdnimg.cn/20190526223820765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==,size_16,color_FFFFFF,t_70\" alt=\"alias\"><br>常用的也就几个：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">切换指定分支：\ngco branch_name\n切换到master分支：\ngcm\n查看分支：\ngb\n查看修改：\ngd\n拉代码：\ngl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"新建没有parent的新分支\"><a href=\"#新建没有parent的新分支\" class=\"headerlink\" title=\"新建没有parent的新分支\"></a>新建没有parent的新分支</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout --orphan branch-name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Git-代码量\"><a href=\"#Git-代码量\" class=\"headerlink\" title=\"Git 代码量\"></a>Git 代码量</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git log --format&#x3D;&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author&#x3D;&quot;$name&quot; --pretty&#x3D;tformat: --numstat | awk &#39;&#123; add +&#x3D; $1; subs +&#x3D; $2; loc +&#x3D; $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc &#125;&#39; -; done<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Git-命令提示：perl-warning-Setting-locale-failed\"><a href=\"#Git-命令提示：perl-warning-Setting-locale-failed\" class=\"headerlink\" title=\"Git 命令提示：perl: warning: Setting locale failed.\"></a>Git 命令提示：perl: warning: Setting locale failed.</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">vim  ~&#x2F;.zshrc\n\n# Setting for the new UTF-8 terminal support in Lion\nLC_CTYPE&#x3D;en_US.UTF-8\nLC_ALL&#x3D;en_US.UTF-8\n\nsource ~&#x2F;.zshrc\n\n重启iTerm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"merge某个或几个commit\"><a href=\"#merge某个或几个commit\" class=\"headerlink\" title=\"merge某个或几个commit\"></a>merge某个或几个commit</h4><p>有些特殊情况不能直接merge(一个分支上同时有你和别人的commit)，但是你的commit需要上线了。</p>\n<ul>\n<li>查找要merge的commitId<pre class=\"line-numbers language-none\"><code class=\"language-none\">gco old_branch\ngit log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>commit 1534c530522982a6ff050ac420b300ae4364474e<br>Author: lidoudou &lt;<a href=\"mailto:&#108;&#105;&#x64;&#111;&#117;&#100;&#x6f;&#117;&#64;&#x63;&#115;&#100;&#110;&#46;&#x63;&#111;&#109;\">&#108;&#105;&#x64;&#111;&#117;&#100;&#x6f;&#117;&#64;&#x63;&#115;&#100;&#110;&#46;&#x63;&#111;&#109;</a>&gt;<br>Date:   Sat Apr 27 17:15:14 2019 +0800<br> update kafka setting</p>\n</blockquote>\n</li>\n<li>切换到目标分支，pick目标commit<pre class=\"line-numbers language-none\"><code class=\"language-none\">gco new_branch\ngit cherr-pick 1534c530522  &#x2F;&#x2F; commitId<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>正常的话现在可以看到new_branch上有了commitId不同，但是标识名相同的记录。</li>\n<li>当然也会出现意外——代码冲突了，按一般的冲突一样fix就OK了。</li>\n</ul>\n"},{"title":"杂-整数的二进制中有几个1","comments":1,"date":"2021-03-07T11:53:37.000Z","author":null,"_content":"\n###  x & (x - 1) 消除x最后一位的1\n```\nx = 15\n\t15 = 0b1111\n\t14 = 0b1110\ny = x & (x-1)\ny = 0b1110  # 消去了x最后一位的1\n\ny = 14\n\t14 = 0b1110\n\t13 = 0b1101\nz = y & (y-1)\nz = 0b1100  # 消去了y最后一位的1\n……\n```\n* O(1) 时间检测X是否是2的n次方\n> 一个数如果是2的n次方，则这个数的二进制中只有一个1\n> 如果消去最后一位的1，则这个数为0\n\n```\nx = 16\n\t16 = 0b10000\n\t15 = 0b01111\nx & (x - 1) = 0\n```\n* 一个整数的二进制中有多少个1\n> x & (x - 1) 可以消除最后一位的1\n> while循环消除最后一位的1，直到结果为0\n\n```\na = 15\nb = 0\nwhile a > 0:\n\ta = a & (a - 1)\n\tb += 1\nprint b # 1的个数\n```\n","source":"_posts/2021-03-07-杂-整数的二进制中有几个1.md","raw":"---\ntitle: 杂-整数的二进制中有几个1\ncomments: true\ndate: 2021-03-07 19:53:37\nauthor:\ntags:\n - 算法\ncategories:\n---\n\n###  x & (x - 1) 消除x最后一位的1\n```\nx = 15\n\t15 = 0b1111\n\t14 = 0b1110\ny = x & (x-1)\ny = 0b1110  # 消去了x最后一位的1\n\ny = 14\n\t14 = 0b1110\n\t13 = 0b1101\nz = y & (y-1)\nz = 0b1100  # 消去了y最后一位的1\n……\n```\n* O(1) 时间检测X是否是2的n次方\n> 一个数如果是2的n次方，则这个数的二进制中只有一个1\n> 如果消去最后一位的1，则这个数为0\n\n```\nx = 16\n\t16 = 0b10000\n\t15 = 0b01111\nx & (x - 1) = 0\n```\n* 一个整数的二进制中有多少个1\n> x & (x - 1) 可以消除最后一位的1\n> while循环消除最后一位的1，直到结果为0\n\n```\na = 15\nb = 0\nwhile a > 0:\n\ta = a & (a - 1)\n\tb += 1\nprint b # 1的个数\n```\n","slug":"杂-整数的二进制中有几个1","published":1,"updated":"2021-03-07T11:54:13.728Z","_id":"cklz3kekj0026jvs61i1v0zo1","layout":"post","photos":[],"link":"","content":"<h3 id=\"x-amp-x-1-消除x最后一位的1\"><a href=\"#x-amp-x-1-消除x最后一位的1\" class=\"headerlink\" title=\"x &amp; (x - 1) 消除x最后一位的1\"></a>x &amp; (x - 1) 消除x最后一位的1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">x &#x3D; 15\n\t15 &#x3D; 0b1111\n\t14 &#x3D; 0b1110\ny &#x3D; x &amp; (x-1)\ny &#x3D; 0b1110  # 消去了x最后一位的1\n\ny &#x3D; 14\n\t14 &#x3D; 0b1110\n\t13 &#x3D; 0b1101\nz &#x3D; y &amp; (y-1)\nz &#x3D; 0b1100  # 消去了y最后一位的1\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>O(1) 时间检测X是否是2的n次方<blockquote>\n<p>一个数如果是2的n次方，则这个数的二进制中只有一个1<br>如果消去最后一位的1，则这个数为0</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">x &#x3D; 16\n\t16 &#x3D; 0b10000\n\t15 &#x3D; 0b01111\nx &amp; (x - 1) &#x3D; 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>一个整数的二进制中有多少个1<blockquote>\n<p>x &amp; (x - 1) 可以消除最后一位的1<br>while循环消除最后一位的1，直到结果为0</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a &#x3D; 15\nb &#x3D; 0\nwhile a &gt; 0:\n\ta &#x3D; a &amp; (a - 1)\n\tb +&#x3D; 1\nprint b # 1的个数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"x-amp-x-1-消除x最后一位的1\"><a href=\"#x-amp-x-1-消除x最后一位的1\" class=\"headerlink\" title=\"x &amp; (x - 1) 消除x最后一位的1\"></a>x &amp; (x - 1) 消除x最后一位的1</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">x &#x3D; 15\n\t15 &#x3D; 0b1111\n\t14 &#x3D; 0b1110\ny &#x3D; x &amp; (x-1)\ny &#x3D; 0b1110  # 消去了x最后一位的1\n\ny &#x3D; 14\n\t14 &#x3D; 0b1110\n\t13 &#x3D; 0b1101\nz &#x3D; y &amp; (y-1)\nz &#x3D; 0b1100  # 消去了y最后一位的1\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>O(1) 时间检测X是否是2的n次方<blockquote>\n<p>一个数如果是2的n次方，则这个数的二进制中只有一个1<br>如果消去最后一位的1，则这个数为0</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">x &#x3D; 16\n\t16 &#x3D; 0b10000\n\t15 &#x3D; 0b01111\nx &amp; (x - 1) &#x3D; 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>一个整数的二进制中有多少个1<blockquote>\n<p>x &amp; (x - 1) 可以消除最后一位的1<br>while循环消除最后一位的1，直到结果为0</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a &#x3D; 15\nb &#x3D; 0\nwhile a &gt; 0:\n\ta &#x3D; a &amp; (a - 1)\n\tb +&#x3D; 1\nprint b # 1的个数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Python-官网例子读懂MRO继承","comments":1,"date":"2021-03-07T11:55:21.000Z","author":null,"_content":"\n[知乎详解（官网翻译）](https://zhuanlan.zhihu.com/p/25321349)\n\n[MRO历史](http://python.jobbole.com/85685/)\n\n#### C3方法解析顺序(The C3 Method Resolution Order)\n- 像深度又像广度排序\n##### 例1\n```\n>>> O = object\n>>> class F(O): pass\n>>> class E(O): pass\n>>> class D(O): pass\n>>> class C(D,F): pass\n>>> class B(D,E): pass\n>>> class A(B,C): pass\n```\n\n\n```\n                          6\n                         ---\nLevel 3                 | O |                  (more general)\n                      /  ---  \\\n                     /    |    \\                      |\n                    /     |     \\                     |\n                   /      |      \\                    |\n                  ---    ---    ---                   |\nLevel 2        3 | D | 4| E |  | F | 5                |\n                  ---    ---    ---                   |\n                   \\  \\ _ /       |                   |\n                    \\    / \\ _    |                   |\n                     \\  /      \\  |                   |\n                      ---      ---                    |\nLevel 1            1 | B |    | C | 2                 |\n                      ---      ---                    |\n                        \\      /                      |\n                         \\    /                      \\ /\n                           ---\nLevel 0                 0 | A |              \n```\n\n\n```\nL[A] = A + merge(BDEO,CDFO,BC)\n     = A + B + merge(DEO,CDFO,C)\n     = A + B + C + merge(DEO,DFO)\n     = A + B + C + D + merge(EO,FO)\n     = A + B + C + D + E + merge(O,FO)\n     = A + B + C + D + E + F + merge(O,O)\n     = A B C D E F O\n```\n\n##### 例2\n```\n>>> O = object\n>>> class F(O): pass\n>>> class E(O): pass\n>>> class D(O): pass\n>>> class C(D,F): pass\n>>> class B(E,D): pass\n>>> class A(B,C): pass\n```\n\n\n```\n                           6\n                          ---\nLevel 3                  | O |\n                       /  ---  \\\n                      /    |    \\\n                     /     |     \\\n                    /      |      \\\n                  ---     ---    ---\nLevel 2        2 | E | 4 | D |  | F | 5\n                  ---     ---    ---\n                   \\      / \\     /\n                    \\    /   \\   /\n                     \\  /     \\ /\n                      ---     ---\nLevel 1            1 | B |   | C | 3\n                      ---     ---\n                       \\       /\n                        \\     /\n                          ---\nLevel 0                0 | A |\n                          ---\n```\n\n\n```\n>>> A.mro()\n(<class '__main__.A'>, <class '__main__.B'>, <class '__main__.E'>,\n<class '__main__.C'>, <class '__main__.D'>, <class '__main__.F'>,\n<type 'object'>)\n```\n\n#### 什么时候对MRO来说是非法的？\n##### 例3\n```\n>>> O = object\n>>> class X(O): pass\n>>> class Y(O): pass\n>>> class A(X,Y): pass\n>>> class B(Y,X): pass\n```\n```\n -----------\n|           |\n|    O      |\n|  /   \\    |\n - X    Y  /\n   |  / | /\n   | /  |/\n   A    B\n   \\   /\n     ?\n```\n```\nL[O] = 0\nL[X] = X O\nL[Y] = Y O\nL[A] = A X Y O\nL[B] = B Y X O\n```\n\n```\nL[C] = C + merge(AXYO, BYXO, AB)\n     = C + A + merge(XYO, BYXO, B)\n     = C + A + B + merge(XYO, YXO)\n```\n- 这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).","source":"_posts/2021-03-07-Python-官网例子读懂MRO继承.md","raw":"---\ntitle: Python-官网例子读懂MRO继承\ncomments: true\ndate: 2021-03-07 19:55:21\nauthor:\ntags:\n - Python\ncategories:\n - 后端开发\n---\n\n[知乎详解（官网翻译）](https://zhuanlan.zhihu.com/p/25321349)\n\n[MRO历史](http://python.jobbole.com/85685/)\n\n#### C3方法解析顺序(The C3 Method Resolution Order)\n- 像深度又像广度排序\n##### 例1\n```\n>>> O = object\n>>> class F(O): pass\n>>> class E(O): pass\n>>> class D(O): pass\n>>> class C(D,F): pass\n>>> class B(D,E): pass\n>>> class A(B,C): pass\n```\n\n\n```\n                          6\n                         ---\nLevel 3                 | O |                  (more general)\n                      /  ---  \\\n                     /    |    \\                      |\n                    /     |     \\                     |\n                   /      |      \\                    |\n                  ---    ---    ---                   |\nLevel 2        3 | D | 4| E |  | F | 5                |\n                  ---    ---    ---                   |\n                   \\  \\ _ /       |                   |\n                    \\    / \\ _    |                   |\n                     \\  /      \\  |                   |\n                      ---      ---                    |\nLevel 1            1 | B |    | C | 2                 |\n                      ---      ---                    |\n                        \\      /                      |\n                         \\    /                      \\ /\n                           ---\nLevel 0                 0 | A |              \n```\n\n\n```\nL[A] = A + merge(BDEO,CDFO,BC)\n     = A + B + merge(DEO,CDFO,C)\n     = A + B + C + merge(DEO,DFO)\n     = A + B + C + D + merge(EO,FO)\n     = A + B + C + D + E + merge(O,FO)\n     = A + B + C + D + E + F + merge(O,O)\n     = A B C D E F O\n```\n\n##### 例2\n```\n>>> O = object\n>>> class F(O): pass\n>>> class E(O): pass\n>>> class D(O): pass\n>>> class C(D,F): pass\n>>> class B(E,D): pass\n>>> class A(B,C): pass\n```\n\n\n```\n                           6\n                          ---\nLevel 3                  | O |\n                       /  ---  \\\n                      /    |    \\\n                     /     |     \\\n                    /      |      \\\n                  ---     ---    ---\nLevel 2        2 | E | 4 | D |  | F | 5\n                  ---     ---    ---\n                   \\      / \\     /\n                    \\    /   \\   /\n                     \\  /     \\ /\n                      ---     ---\nLevel 1            1 | B |   | C | 3\n                      ---     ---\n                       \\       /\n                        \\     /\n                          ---\nLevel 0                0 | A |\n                          ---\n```\n\n\n```\n>>> A.mro()\n(<class '__main__.A'>, <class '__main__.B'>, <class '__main__.E'>,\n<class '__main__.C'>, <class '__main__.D'>, <class '__main__.F'>,\n<type 'object'>)\n```\n\n#### 什么时候对MRO来说是非法的？\n##### 例3\n```\n>>> O = object\n>>> class X(O): pass\n>>> class Y(O): pass\n>>> class A(X,Y): pass\n>>> class B(Y,X): pass\n```\n```\n -----------\n|           |\n|    O      |\n|  /   \\    |\n - X    Y  /\n   |  / | /\n   | /  |/\n   A    B\n   \\   /\n     ?\n```\n```\nL[O] = 0\nL[X] = X O\nL[Y] = Y O\nL[A] = A X Y O\nL[B] = B Y X O\n```\n\n```\nL[C] = C + merge(AXYO, BYXO, AB)\n     = C + A + merge(XYO, BYXO, B)\n     = C + A + B + merge(XYO, YXO)\n```\n- 这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).","slug":"Python-官网例子读懂MRO继承","published":1,"updated":"2021-03-07T11:55:49.684Z","_id":"cklz3mmuc0029jvs6cj6o8eut","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://zhuanlan.zhihu.com/p/25321349\">知乎详解（官网翻译）</a></p>\n<p><a href=\"http://python.jobbole.com/85685/\">MRO历史</a></p>\n<h4 id=\"C3方法解析顺序-The-C3-Method-Resolution-Order\"><a href=\"#C3方法解析顺序-The-C3-Method-Resolution-Order\" class=\"headerlink\" title=\"C3方法解析顺序(The C3 Method Resolution Order)\"></a>C3方法解析顺序(The C3 Method Resolution Order)</h4><ul>\n<li>像深度又像广度排序<h5 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class F(O): pass\n&gt;&gt;&gt; class E(O): pass\n&gt;&gt;&gt; class D(O): pass\n&gt;&gt;&gt; class C(D,F): pass\n&gt;&gt;&gt; class B(D,E): pass\n&gt;&gt;&gt; class A(B,C): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">                          6\n                         ---\nLevel 3                 | O |                  (more general)\n                      &#x2F;  ---  \\\n                     &#x2F;    |    \\                      |\n                    &#x2F;     |     \\                     |\n                   &#x2F;      |      \\                    |\n                  ---    ---    ---                   |\nLevel 2        3 | D | 4| E |  | F | 5                |\n                  ---    ---    ---                   |\n                   \\  \\ _ &#x2F;       |                   |\n                    \\    &#x2F; \\ _    |                   |\n                     \\  &#x2F;      \\  |                   |\n                      ---      ---                    |\nLevel 1            1 | B |    | C | 2                 |\n                      ---      ---                    |\n                        \\      &#x2F;                      |\n                         \\    &#x2F;                      \\ &#x2F;\n                           ---\nLevel 0                 0 | A |              <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[A] &#x3D; A + merge(BDEO,CDFO,BC)\n     &#x3D; A + B + merge(DEO,CDFO,C)\n     &#x3D; A + B + C + merge(DEO,DFO)\n     &#x3D; A + B + C + D + merge(EO,FO)\n     &#x3D; A + B + C + D + E + merge(O,FO)\n     &#x3D; A + B + C + D + E + F + merge(O,O)\n     &#x3D; A B C D E F O<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class F(O): pass\n&gt;&gt;&gt; class E(O): pass\n&gt;&gt;&gt; class D(O): pass\n&gt;&gt;&gt; class C(D,F): pass\n&gt;&gt;&gt; class B(E,D): pass\n&gt;&gt;&gt; class A(B,C): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">                           6\n                          ---\nLevel 3                  | O |\n                       &#x2F;  ---  \\\n                      &#x2F;    |    \\\n                     &#x2F;     |     \\\n                    &#x2F;      |      \\\n                  ---     ---    ---\nLevel 2        2 | E | 4 | D |  | F | 5\n                  ---     ---    ---\n                   \\      &#x2F; \\     &#x2F;\n                    \\    &#x2F;   \\   &#x2F;\n                     \\  &#x2F;     \\ &#x2F;\n                      ---     ---\nLevel 1            1 | B |   | C | 3\n                      ---     ---\n                       \\       &#x2F;\n                        \\     &#x2F;\n                          ---\nLevel 0                0 | A |\n                          ---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; A.mro()\n(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;,\n&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;,\n&lt;type &#39;object&#39;&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"什么时候对MRO来说是非法的？\"><a href=\"#什么时候对MRO来说是非法的？\" class=\"headerlink\" title=\"什么时候对MRO来说是非法的？\"></a>什么时候对MRO来说是非法的？</h4><h5 id=\"例3\"><a href=\"#例3\" class=\"headerlink\" title=\"例3\"></a>例3</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class X(O): pass\n&gt;&gt;&gt; class Y(O): pass\n&gt;&gt;&gt; class A(X,Y): pass\n&gt;&gt;&gt; class B(Y,X): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> -----------\n|           |\n|    O      |\n|  &#x2F;   \\    |\n - X    Y  &#x2F;\n   |  &#x2F; | &#x2F;\n   | &#x2F;  |&#x2F;\n   A    B\n   \\   &#x2F;\n     ?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[O] &#x3D; 0\nL[X] &#x3D; X O\nL[Y] &#x3D; Y O\nL[A] &#x3D; A X Y O\nL[B] &#x3D; B Y X O<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[C] &#x3D; C + merge(AXYO, BYXO, AB)\n     &#x3D; C + A + merge(XYO, BYXO, B)\n     &#x3D; C + A + B + merge(XYO, YXO)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"https://zhuanlan.zhihu.com/p/25321349\">知乎详解（官网翻译）</a></p>\n<p><a href=\"http://python.jobbole.com/85685/\">MRO历史</a></p>\n<h4 id=\"C3方法解析顺序-The-C3-Method-Resolution-Order\"><a href=\"#C3方法解析顺序-The-C3-Method-Resolution-Order\" class=\"headerlink\" title=\"C3方法解析顺序(The C3 Method Resolution Order)\"></a>C3方法解析顺序(The C3 Method Resolution Order)</h4><ul>\n<li>像深度又像广度排序<h5 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class F(O): pass\n&gt;&gt;&gt; class E(O): pass\n&gt;&gt;&gt; class D(O): pass\n&gt;&gt;&gt; class C(D,F): pass\n&gt;&gt;&gt; class B(D,E): pass\n&gt;&gt;&gt; class A(B,C): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">                          6\n                         ---\nLevel 3                 | O |                  (more general)\n                      &#x2F;  ---  \\\n                     &#x2F;    |    \\                      |\n                    &#x2F;     |     \\                     |\n                   &#x2F;      |      \\                    |\n                  ---    ---    ---                   |\nLevel 2        3 | D | 4| E |  | F | 5                |\n                  ---    ---    ---                   |\n                   \\  \\ _ &#x2F;       |                   |\n                    \\    &#x2F; \\ _    |                   |\n                     \\  &#x2F;      \\  |                   |\n                      ---      ---                    |\nLevel 1            1 | B |    | C | 2                 |\n                      ---      ---                    |\n                        \\      &#x2F;                      |\n                         \\    &#x2F;                      \\ &#x2F;\n                           ---\nLevel 0                 0 | A |              <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[A] &#x3D; A + merge(BDEO,CDFO,BC)\n     &#x3D; A + B + merge(DEO,CDFO,C)\n     &#x3D; A + B + C + merge(DEO,DFO)\n     &#x3D; A + B + C + D + merge(EO,FO)\n     &#x3D; A + B + C + D + E + merge(O,FO)\n     &#x3D; A + B + C + D + E + F + merge(O,O)\n     &#x3D; A B C D E F O<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class F(O): pass\n&gt;&gt;&gt; class E(O): pass\n&gt;&gt;&gt; class D(O): pass\n&gt;&gt;&gt; class C(D,F): pass\n&gt;&gt;&gt; class B(E,D): pass\n&gt;&gt;&gt; class A(B,C): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">                           6\n                          ---\nLevel 3                  | O |\n                       &#x2F;  ---  \\\n                      &#x2F;    |    \\\n                     &#x2F;     |     \\\n                    &#x2F;      |      \\\n                  ---     ---    ---\nLevel 2        2 | E | 4 | D |  | F | 5\n                  ---     ---    ---\n                   \\      &#x2F; \\     &#x2F;\n                    \\    &#x2F;   \\   &#x2F;\n                     \\  &#x2F;     \\ &#x2F;\n                      ---     ---\nLevel 1            1 | B |   | C | 3\n                      ---     ---\n                       \\       &#x2F;\n                        \\     &#x2F;\n                          ---\nLevel 0                0 | A |\n                          ---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; A.mro()\n(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;,\n&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;,\n&lt;type &#39;object&#39;&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"什么时候对MRO来说是非法的？\"><a href=\"#什么时候对MRO来说是非法的？\" class=\"headerlink\" title=\"什么时候对MRO来说是非法的？\"></a>什么时候对MRO来说是非法的？</h4><h5 id=\"例3\"><a href=\"#例3\" class=\"headerlink\" title=\"例3\"></a>例3</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;&gt;&gt; O &#x3D; object\n&gt;&gt;&gt; class X(O): pass\n&gt;&gt;&gt; class Y(O): pass\n&gt;&gt;&gt; class A(X,Y): pass\n&gt;&gt;&gt; class B(Y,X): pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> -----------\n|           |\n|    O      |\n|  &#x2F;   \\    |\n - X    Y  &#x2F;\n   |  &#x2F; | &#x2F;\n   | &#x2F;  |&#x2F;\n   A    B\n   \\   &#x2F;\n     ?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[O] &#x3D; 0\nL[X] &#x3D; X O\nL[Y] &#x3D; Y O\nL[A] &#x3D; A X Y O\nL[B] &#x3D; B Y X O<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">L[C] &#x3D; C + merge(AXYO, BYXO, AB)\n     &#x3D; C + A + merge(XYO, BYXO, B)\n     &#x3D; C + A + B + merge(XYO, YXO)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>这时，我们不能合并列表XYO和列表YXO，：因此，没有了符合规则的head，C3算法停止。在这种情形下，Python 2.3会抛出一个异常(TypeError: MRO conflict among bases Y, X)，因为X在YXO的tail中,而Y在XYO的tail中,阻止创建模棱两可的继承层次。Python 2.2不会抛出异常，而是选择了一种特定的方法解析顺序(CABXYO).</li>\n</ul>\n"},{"title":"Mysql-锁","comments":1,"date":"2021-03-07T11:56:20.000Z","author":null,"_content":"\n### MySQL 锁\n- #### thanks :\n1. [zhiboer](https://blog.csdn.net/claram/article/details/54023216)\n2. [静下心来静下心来](https://blog.csdn.net/puhaiyang/article/details/72284702)\n\n- #### 前提\n\n > - 没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。\n > - for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效\n > - MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。\n > - 排他锁包含行锁、表锁。\n\n- #### 数据一致性\n\n- 悲观锁\n> - 共享锁\n>> 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。\n>> 关键字：==lock in share mode==\n>> ```\n>> begin;\n>>  SELECT * from city where id = \"1\"  lock in share mode;\n>> \n>> ```\n> - 排他锁\n>> 多个不同的事务，对同一个资源只能有一把锁。\n>> 关键字：==for update==\n>> - 每次获取商品时，对该商品加排他锁。\n>> - 期间其他用户阻塞等待访问该记录。\n>> - 悲观锁适合写入频繁的场景。\n```\nbegin;\n    select * from goods where id = 1 for update;\n    update goods set stock = stock - 1 where id = 1;\ncommit;\n```\n- 乐观锁\n>> - 每次获取商品时，不对该商品加锁。\n>> - 在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。\n>> - 乐观锁适合读取频繁的场景。\n\n```\n#不加锁获取 id=1 的商品对象\nselect * from goods where id = 1\n\nbegin;\n    #更新 stock 值，这里需要注意 where 条件 “stock = cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新\n    update goods set stock = stock - 1 where id = 1 and stock = cur_stock;\ncommit;\n```\n- #### 行锁和表锁\n> 1. 只根据主键进行查询，并且查询到数据，主键字段产生行锁。\n> 2. 除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。\n> 3. 根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。\n> ```\n> begin;\n> select * from goods where id = 1 and name='prod11' for update;\n> commit;\n> ```\n> 4. 根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。\n> 5. 根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。\n> 6. 根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。\n> 7. 只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。\n> 8. 只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。\n\n- #### 总结\n> 1. InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。==行锁一定有索引==\n> 2. 当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 \n> 3. 如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。\n> 4. 检索值的==数据类型==与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。","source":"_posts/2021-03-07-Mysql-锁.md","raw":"---\ntitle: Mysql-锁\ncomments: true\ndate: 2021-03-07 19:56:20\nauthor:\ntags:\n - Mysql\ncategories:\n - 数据库\n---\n\n### MySQL 锁\n- #### thanks :\n1. [zhiboer](https://blog.csdn.net/claram/article/details/54023216)\n2. [静下心来静下心来](https://blog.csdn.net/puhaiyang/article/details/72284702)\n\n- #### 前提\n\n > - 没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。\n > - for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效\n > - MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。\n > - 排他锁包含行锁、表锁。\n\n- #### 数据一致性\n\n- 悲观锁\n> - 共享锁\n>> 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。\n>> 关键字：==lock in share mode==\n>> ```\n>> begin;\n>>  SELECT * from city where id = \"1\"  lock in share mode;\n>> \n>> ```\n> - 排他锁\n>> 多个不同的事务，对同一个资源只能有一把锁。\n>> 关键字：==for update==\n>> - 每次获取商品时，对该商品加排他锁。\n>> - 期间其他用户阻塞等待访问该记录。\n>> - 悲观锁适合写入频繁的场景。\n```\nbegin;\n    select * from goods where id = 1 for update;\n    update goods set stock = stock - 1 where id = 1;\ncommit;\n```\n- 乐观锁\n>> - 每次获取商品时，不对该商品加锁。\n>> - 在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。\n>> - 乐观锁适合读取频繁的场景。\n\n```\n#不加锁获取 id=1 的商品对象\nselect * from goods where id = 1\n\nbegin;\n    #更新 stock 值，这里需要注意 where 条件 “stock = cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新\n    update goods set stock = stock - 1 where id = 1 and stock = cur_stock;\ncommit;\n```\n- #### 行锁和表锁\n> 1. 只根据主键进行查询，并且查询到数据，主键字段产生行锁。\n> 2. 除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。\n> 3. 根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。\n> ```\n> begin;\n> select * from goods where id = 1 and name='prod11' for update;\n> commit;\n> ```\n> 4. 根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。\n> 5. 根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。\n> 6. 根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。\n> 7. 只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。\n> 8. 只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。\n\n- #### 总结\n> 1. InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。==行锁一定有索引==\n> 2. 当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 \n> 3. 如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。\n> 4. 检索值的==数据类型==与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。","slug":"Mysql-锁","published":1,"updated":"2021-03-07T11:56:37.675Z","_id":"cklz3nwjw002cjvs63w9qc213","layout":"post","photos":[],"link":"","content":"<h3 id=\"MySQL-锁\"><a href=\"#MySQL-锁\" class=\"headerlink\" title=\"MySQL 锁\"></a>MySQL 锁</h3><ul>\n<li><h4 id=\"thanks\"><a href=\"#thanks\" class=\"headerlink\" title=\"thanks :\"></a>thanks :</h4></li>\n</ul>\n<ol>\n<li><a href=\"https://blog.csdn.net/claram/article/details/54023216\">zhiboer</a></li>\n<li><a href=\"https://blog.csdn.net/puhaiyang/article/details/72284702\">静下心来静下心来</a></li>\n</ol>\n<ul>\n<li><h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4></li>\n</ul>\n<blockquote>\n<ul>\n<li>没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。</li>\n<li>for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效</li>\n<li>MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。</li>\n<li>排他锁包含行锁、表锁。</li>\n</ul>\n</blockquote>\n<ul>\n<li><h4 id=\"数据一致性\"><a href=\"#数据一致性\" class=\"headerlink\" title=\"数据一致性\"></a>数据一致性</h4></li>\n<li><p>悲观锁</p>\n<blockquote>\n<ul>\n<li>共享锁<blockquote>\n<p>共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。<br>关键字：==lock in share mode==</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\n SELECT * from city where id &#x3D; &quot;1&quot;  lock in share mode;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></blockquote>\n</li>\n<li>排他锁<blockquote>\n<p>多个不同的事务，对同一个资源只能有一把锁。<br>关键字：==for update==</p>\n<ul>\n<li>每次获取商品时，对该商品加排他锁。</li>\n<li>期间其他用户阻塞等待访问该记录。</li>\n<li>悲观锁适合写入频繁的场景。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\n    select * from goods where id &#x3D; 1 for update;\n    update goods set stock &#x3D; stock - 1 where id &#x3D; 1;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>乐观锁</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>每次获取商品时，不对该商品加锁。</li>\n<li>在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。</li>\n<li>乐观锁适合读取频繁的场景。</li>\n</ul>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#不加锁获取 id&#x3D;1 的商品对象\nselect * from goods where id &#x3D; 1\n\nbegin;\n    #更新 stock 值，这里需要注意 where 条件 “stock &#x3D; cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新\n    update goods set stock &#x3D; stock - 1 where id &#x3D; 1 and stock &#x3D; cur_stock;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><h4 id=\"行锁和表锁\"><a href=\"#行锁和表锁\" class=\"headerlink\" title=\"行锁和表锁\"></a>行锁和表锁</h4><blockquote>\n<ol>\n<li>只根据主键进行查询，并且查询到数据，主键字段产生行锁。</li>\n<li>除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。</li>\n<li>根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\nselect * from goods where id &#x3D; 1 and name&#x3D;&#39;prod11&#39; for update;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。</li>\n<li>根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。</li>\n<li>根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。</li>\n<li>只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。</li>\n<li>只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<ol>\n<li>InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。==行锁一定有索引==</li>\n<li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 </li>\n<li>如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</li>\n<li>检索值的==数据类型==与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"MySQL-锁\"><a href=\"#MySQL-锁\" class=\"headerlink\" title=\"MySQL 锁\"></a>MySQL 锁</h3><ul>\n<li><h4 id=\"thanks\"><a href=\"#thanks\" class=\"headerlink\" title=\"thanks :\"></a>thanks :</h4></li>\n</ul>\n<ol>\n<li><a href=\"https://blog.csdn.net/claram/article/details/54023216\">zhiboer</a></li>\n<li><a href=\"https://blog.csdn.net/puhaiyang/article/details/72284702\">静下心来静下心来</a></li>\n</ol>\n<ul>\n<li><h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4></li>\n</ul>\n<blockquote>\n<ul>\n<li>没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。</li>\n<li>for update仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效</li>\n<li>MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。</li>\n<li>排他锁包含行锁、表锁。</li>\n</ul>\n</blockquote>\n<ul>\n<li><h4 id=\"数据一致性\"><a href=\"#数据一致性\" class=\"headerlink\" title=\"数据一致性\"></a>数据一致性</h4></li>\n<li><p>悲观锁</p>\n<blockquote>\n<ul>\n<li>共享锁<blockquote>\n<p>共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。<br>关键字：==lock in share mode==</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\n SELECT * from city where id &#x3D; &quot;1&quot;  lock in share mode;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></blockquote>\n</li>\n<li>排他锁<blockquote>\n<p>多个不同的事务，对同一个资源只能有一把锁。<br>关键字：==for update==</p>\n<ul>\n<li>每次获取商品时，对该商品加排他锁。</li>\n<li>期间其他用户阻塞等待访问该记录。</li>\n<li>悲观锁适合写入频繁的场景。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\n    select * from goods where id &#x3D; 1 for update;\n    update goods set stock &#x3D; stock - 1 where id &#x3D; 1;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>乐观锁</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>每次获取商品时，不对该商品加锁。</li>\n<li>在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。</li>\n<li>乐观锁适合读取频繁的场景。</li>\n</ul>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#不加锁获取 id&#x3D;1 的商品对象\nselect * from goods where id &#x3D; 1\n\nbegin;\n    #更新 stock 值，这里需要注意 where 条件 “stock &#x3D; cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新\n    update goods set stock &#x3D; stock - 1 where id &#x3D; 1 and stock &#x3D; cur_stock;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><h4 id=\"行锁和表锁\"><a href=\"#行锁和表锁\" class=\"headerlink\" title=\"行锁和表锁\"></a>行锁和表锁</h4><blockquote>\n<ol>\n<li>只根据主键进行查询，并且查询到数据，主键字段产生行锁。</li>\n<li>除了使用非主键不含索引字段查询，其余所有的查询，没有查询到数据，就不产生锁。</li>\n<li>根据主键、非主键含索引（name）进行查询，并且查询到数据，主键字段产生行锁，name字段产生行锁。<pre class=\"line-numbers language-none\"><code class=\"language-none\">begin;\nselect * from goods where id &#x3D; 1 and name&#x3D;&#39;prod11&#39; for update;\ncommit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>根据主键、非主键不含索引（name）进行查询，并且查询到数据，如果其他线程按主键字段进行再次查询，则主键字段产生行锁，如果其他线程按非主键不含索引字段进行查询，则非主键不含索引字段产生表锁，如果其他线程按非主键含索引字段进行查询，则非主键含索引字段产生行锁，如果索引值是枚举类型，mysql也会进行表锁。</li>\n<li>根据非主键含索引（name）进行查询，并且查询到数据，name字段产生行锁。</li>\n<li>根据非主键不含索引（name）进行查询，查到或查不到数据，name字段产生表锁。</li>\n<li>只根据主键进行查询，查询条件为不等于，查到或查不到数据，主键字段产生都表锁。</li>\n<li>只根据主键进行查询，查询条件为 like，查到或查不到数据，主键字段产生表锁。</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<ol>\n<li>InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。==行锁一定有索引==</li>\n<li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。 </li>\n<li>如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</li>\n<li>检索值的==数据类型==与索引字段不同，虽然MySQL能够进行数据类型转换，但却不会使用索引，从而导致InnoDB使用表锁。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Python-Windows多版本安装","comments":1,"date":"2021-03-07T11:57:23.000Z","author":null,"_content":"\n#### 可能的解决方案\n* 安装多个python版本，使用不同的命令进s行版本的区分\n```\n    C:\\Users\\hero\\python2\n    Python 2.7.X\n    >>>\n    \n    C:\\Users\\hero\\python3\n    Python 3.X.X\n    >>>\n    \n    两个python版本都装了pip以后怎么办?\n    python安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。\n```\n* virtualenv\n* anaconda(推荐)\n* ...(如果有更好的方案再补充)\n#### anaconda是什么？\n* Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换\n#### 为什么用anaconda？\n* 希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。\n* Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]\n* Win8.1安装Python==3.5==以上提示缺失==api-ms-win-crt-runtime-l1-1-0.dll==问题\n#### 怎么安装anaconda？\n* 国内镜像地址 : \n> [清华大学开源软件镜像站](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/)\n\n> [如何安装Anaconda和Python](https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html)\n\n#### 安装anaconda过程\n* 安装好anaconda之后会自带：base(root)\n的python\n* 安装其他版本的python\n> * 添加清华镜像(不然安装会超时)\n```\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n    conda config --set show_channel_urls yes\n```\n#### Conda命令\n```\n    conda create --name python27 python=2.7 环境2.7名称python27\n    conda create –name cpu 创建一个名为cpu的环境 \n    source activate cpu 激活cpu环境 \n    source deactivate 禁用当前环境 \n    conda remove –name 环境名 –all \n    conda search 软件名 //可以查看到对应的不同版本 \n    conda install 软件名 安装软件 \n    conda list 查看已安装的package \n    conda list -n 环境名 查看指定环境已安装的package \n    conda install -n 环境名 软件名 指定环境名 安装软件 \n    如果不用-n指定环境名称，则被安装在当前活跃环境 \n    conda update -n 环境名 软件名 指定环境名更新软件 \n    conda remove -n 环境名 软件名 删除指定环境的指定软件包 \n    conda env list //查看现有的环境\n```\n\n\n","source":"_posts/2021-03-07-Python-Windows多版本安装.md","raw":"---\ntitle: Python-Windows多版本安装\ncomments: true\ndate: 2021-03-07 19:57:23\nauthor:\ntags:\n - Python\ncategories:\n - 效率工具\n---\n\n#### 可能的解决方案\n* 安装多个python版本，使用不同的命令进s行版本的区分\n```\n    C:\\Users\\hero\\python2\n    Python 2.7.X\n    >>>\n    \n    C:\\Users\\hero\\python3\n    Python 3.X.X\n    >>>\n    \n    两个python版本都装了pip以后怎么办?\n    python安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。\n```\n* virtualenv\n* anaconda(推荐)\n* ...(如果有更好的方案再补充)\n#### anaconda是什么？\n* Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换\n#### 为什么用anaconda？\n* 希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。\n* Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]\n* Win8.1安装Python==3.5==以上提示缺失==api-ms-win-crt-runtime-l1-1-0.dll==问题\n#### 怎么安装anaconda？\n* 国内镜像地址 : \n> [清华大学开源软件镜像站](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/)\n\n> [如何安装Anaconda和Python](https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html)\n\n#### 安装anaconda过程\n* 安装好anaconda之后会自带：base(root)\n的python\n* 安装其他版本的python\n> * 添加清华镜像(不然安装会超时)\n```\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n    conda config --set show_channel_urls yes\n```\n#### Conda命令\n```\n    conda create --name python27 python=2.7 环境2.7名称python27\n    conda create –name cpu 创建一个名为cpu的环境 \n    source activate cpu 激活cpu环境 \n    source deactivate 禁用当前环境 \n    conda remove –name 环境名 –all \n    conda search 软件名 //可以查看到对应的不同版本 \n    conda install 软件名 安装软件 \n    conda list 查看已安装的package \n    conda list -n 环境名 查看指定环境已安装的package \n    conda install -n 环境名 软件名 指定环境名 安装软件 \n    如果不用-n指定环境名称，则被安装在当前活跃环境 \n    conda update -n 环境名 软件名 指定环境名更新软件 \n    conda remove -n 环境名 软件名 删除指定环境的指定软件包 \n    conda env list //查看现有的环境\n```\n\n\n","slug":"Python-Windows多版本安装","published":1,"updated":"2021-03-07T11:58:14.322Z","_id":"cklz3p9br002fjvs6705v0s29","layout":"post","photos":[],"link":"","content":"<h4 id=\"可能的解决方案\"><a href=\"#可能的解决方案\" class=\"headerlink\" title=\"可能的解决方案\"></a>可能的解决方案</h4><ul>\n<li>安装多个python版本，使用不同的命令进s行版本的区分<pre class=\"line-numbers language-none\"><code class=\"language-none\">C:\\Users\\hero\\python2\nPython 2.7.X\n&gt;&gt;&gt;\n\nC:\\Users\\hero\\python3\nPython 3.X.X\n&gt;&gt;&gt;\n\n两个python版本都装了pip以后怎么办?\npython安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>virtualenv</li>\n<li>anaconda(推荐)</li>\n<li>…(如果有更好的方案再补充)<h4 id=\"anaconda是什么？\"><a href=\"#anaconda是什么？\" class=\"headerlink\" title=\"anaconda是什么？\"></a>anaconda是什么？</h4></li>\n<li>Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换<h4 id=\"为什么用anaconda？\"><a href=\"#为什么用anaconda？\" class=\"headerlink\" title=\"为什么用anaconda？\"></a>为什么用anaconda？</h4></li>\n<li>希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。</li>\n<li>Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]</li>\n<li>Win8.1安装Python==3.5==以上提示缺失==api-ms-win-crt-runtime-l1-1-0.dll==问题<h4 id=\"怎么安装anaconda？\"><a href=\"#怎么安装anaconda？\" class=\"headerlink\" title=\"怎么安装anaconda？\"></a>怎么安装anaconda？</h4></li>\n<li>国内镜像地址 : <blockquote>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">清华大学开源软件镜像站</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html\">如何安装Anaconda和Python</a></p>\n</blockquote>\n<h4 id=\"安装anaconda过程\"><a href=\"#安装anaconda过程\" class=\"headerlink\" title=\"安装anaconda过程\"></a>安装anaconda过程</h4><ul>\n<li>安装好anaconda之后会自带：base(root)<br>的python</li>\n<li>安装其他版本的python<blockquote>\n<ul>\n<li>添加清华镜像(不然安装会超时)</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;\nconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;\nconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;\nconda config --set show_channel_urls yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Conda命令\"><a href=\"#Conda命令\" class=\"headerlink\" title=\"Conda命令\"></a>Conda命令</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">conda create --name python27 python&#x3D;2.7 环境2.7名称python27\nconda create –name cpu 创建一个名为cpu的环境 \nsource activate cpu 激活cpu环境 \nsource deactivate 禁用当前环境 \nconda remove –name 环境名 –all \nconda search 软件名 &#x2F;&#x2F;可以查看到对应的不同版本 \nconda install 软件名 安装软件 \nconda list 查看已安装的package \nconda list -n 环境名 查看指定环境已安装的package \nconda install -n 环境名 软件名 指定环境名 安装软件 \n如果不用-n指定环境名称，则被安装在当前活跃环境 \nconda update -n 环境名 软件名 指定环境名更新软件 \nconda remove -n 环境名 软件名 删除指定环境的指定软件包 \nconda env list &#x2F;&#x2F;查看现有的环境<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"可能的解决方案\"><a href=\"#可能的解决方案\" class=\"headerlink\" title=\"可能的解决方案\"></a>可能的解决方案</h4><ul>\n<li>安装多个python版本，使用不同的命令进s行版本的区分<pre class=\"line-numbers language-none\"><code class=\"language-none\">C:\\Users\\hero\\python2\nPython 2.7.X\n&gt;&gt;&gt;\n\nC:\\Users\\hero\\python3\nPython 3.X.X\n&gt;&gt;&gt;\n\n两个python版本都装了pip以后怎么办?\npython安装路径找到Scripts文件夹，进入里面找到pip*-script.py，打开修改第一句为要指定的python解释器。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>virtualenv</li>\n<li>anaconda(推荐)</li>\n<li>…(如果有更好的方案再补充)<h4 id=\"anaconda是什么？\"><a href=\"#anaconda是什么？\" class=\"headerlink\" title=\"anaconda是什么？\"></a>anaconda是什么？</h4></li>\n<li>Anaconda是开源的python发行版本，包含了大量科学包。主要是可以用来进行python的环境管理，也就是说利用Conda可以在同一台机器上进行不同版本python的切换<h4 id=\"为什么用anaconda？\"><a href=\"#为什么用anaconda？\" class=\"headerlink\" title=\"为什么用anaconda？\"></a>为什么用anaconda？</h4></li>\n<li>希望自己的机器上同时拥有不同版本的python，以满足不同代码的需求。</li>\n<li>Windows环境下使用virtualenv对Python进行多版本隔离，但是前提是能安装上多个版本。[笑哭.jpg]</li>\n<li>Win8.1安装Python==3.5==以上提示缺失==api-ms-win-crt-runtime-l1-1-0.dll==问题<h4 id=\"怎么安装anaconda？\"><a href=\"#怎么安装anaconda？\" class=\"headerlink\" title=\"怎么安装anaconda？\"></a>怎么安装anaconda？</h4></li>\n<li>国内镜像地址 : <blockquote>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">清华大学开源软件镜像站</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://jingyan.baidu.com/article/3f16e0031e87522591c10320.html\">如何安装Anaconda和Python</a></p>\n</blockquote>\n<h4 id=\"安装anaconda过程\"><a href=\"#安装anaconda过程\" class=\"headerlink\" title=\"安装anaconda过程\"></a>安装anaconda过程</h4><ul>\n<li>安装好anaconda之后会自带：base(root)<br>的python</li>\n<li>安装其他版本的python<blockquote>\n<ul>\n<li>添加清华镜像(不然安装会超时)</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;\nconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;\nconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;\nconda config --set show_channel_urls yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Conda命令\"><a href=\"#Conda命令\" class=\"headerlink\" title=\"Conda命令\"></a>Conda命令</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">conda create --name python27 python&#x3D;2.7 环境2.7名称python27\nconda create –name cpu 创建一个名为cpu的环境 \nsource activate cpu 激活cpu环境 \nsource deactivate 禁用当前环境 \nconda remove –name 环境名 –all \nconda search 软件名 &#x2F;&#x2F;可以查看到对应的不同版本 \nconda install 软件名 安装软件 \nconda list 查看已安装的package \nconda list -n 环境名 查看指定环境已安装的package \nconda install -n 环境名 软件名 指定环境名 安装软件 \n如果不用-n指定环境名称，则被安装在当前活跃环境 \nconda update -n 环境名 软件名 指定环境名更新软件 \nconda remove -n 环境名 软件名 删除指定环境的指定软件包 \nconda env list &#x2F;&#x2F;查看现有的环境<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"Python-随机函数","comments":1,"date":"2021-03-07T12:01:22.000Z","author":null,"_content":"\n[菜鸟教程](http://www.runoob.com/python/python-numbers.html)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nimport random\n\nprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  \nprint random.choice(rande(10))\t   # 产生 0 到 9 的一个整数型随机数  \nprint random.random()              # 产生 [0,1) 之间的随机浮点数\nprint random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数\nprint random.choice('tomorrow')    # 从序列中随机选取一个元素\nprint random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数\n\nmylist = list(\"hello,world!\")      # 将序列a中的元素顺序打乱\nrandom.shuffle(mylist)\nprint mylist\n```","source":"_posts/2021-03-07-Python-随机函数.md","raw":"---\ntitle: Python-随机函数\ncomments: true\ndate: 2021-03-07 20:01:22\nauthor:\ntags:\n - Python\ncategories:\n - 后端开发\n---\n\n[菜鸟教程](http://www.runoob.com/python/python-numbers.html)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nimport random\n\nprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  \nprint random.choice(rande(10))\t   # 产生 0 到 9 的一个整数型随机数  \nprint random.random()              # 产生 [0,1) 之间的随机浮点数\nprint random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数\nprint random.choice('tomorrow')    # 从序列中随机选取一个元素\nprint random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数\n\nmylist = list(\"hello,world!\")      # 将序列a中的元素顺序打乱\nrandom.shuffle(mylist)\nprint mylist\n```","slug":"Python-随机函数","published":1,"updated":"2021-03-07T12:01:52.558Z","_id":"cklz3udva002ijvs64bfdaogs","layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.runoob.com/python/python-numbers.html\">菜鸟教程</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;usr&#x2F;bin&#x2F;python\n# -*- coding: UTF-8 -*-\n\nimport random\n\nprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  \nprint random.choice(rande(10))\t   # 产生 0 到 9 的一个整数型随机数  \nprint random.random()              # 产生 [0,1) 之间的随机浮点数\nprint random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数\nprint random.choice(&#39;tomorrow&#39;)    # 从序列中随机选取一个元素\nprint random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数\n\nmylist &#x3D; list(&quot;hello,world!&quot;)      # 将序列a中的元素顺序打乱\nrandom.shuffle(mylist)\nprint mylist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/python/python-numbers.html\">菜鸟教程</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;usr&#x2F;bin&#x2F;python\n# -*- coding: UTF-8 -*-\n\nimport random\n\nprint random.randint(1,10)         # 产生 1 到 10 的一个整数型随机数  \nprint random.choice(rande(10))\t   # 产生 0 到 9 的一个整数型随机数  \nprint random.random()              # 产生 [0,1) 之间的随机浮点数\nprint random.uniform(0,100)        # 产生  [0,100] 之间的随机浮点数，不是整数\nprint random.choice(&#39;tomorrow&#39;)    # 从序列中随机选取一个元素\nprint random.randrange(1,100,2)    # 生成从1到100的间隔为2的随机整数\n\nmylist &#x3D; list(&quot;hello,world!&quot;)      # 将序列a中的元素顺序打乱\nrandom.shuffle(mylist)\nprint mylist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"软件-Airflow进阶","comments":1,"date":"2021-03-07T12:04:45.000Z","author":null,"_content":"\n## 基本命令\n\n\n----------\n\n**用户界面也有以下相关操作按钮**\n* 查看\n```\n1、列出现有所有的活动的DAGS\n\tairflow list_dags\n\t\n2、列出 tutorial 的任务id\n\tairflow list_tasks tutorial\n\t\n3、以树形图的形式列出 tutorial 的任务id\n\tairflow list_tasks tutorial --tree\n```\n\n* 测试\n\n```\n1、模拟2015-06-01 执行tutorial的print_date任务\n\tairflow test tutorial print_date 2015-06-01\n```\n\n* 回填数据\n> 如果希望新写的DAG执行过去一段时间的任务怎么办？\n> backfill 可以执行一个时间段内应该执行的所有任务\n\n```\nairflow backfill tutorial -s 2018-06-01 -e 2015-08-01\n```\n\n* 重建元数据库\n\n```\nairflow resetdb [-h] [-y]\n\n-y --yes，不经过提示确认就重置，默认为False\n```\n##### 更多命令  [官方Command Line Interface](http://airflow.incubator.apache.org/cli.html)\n\n\n----------\n\n## BaseOperator\n官网例子，里面的各个属性有代表什么意思？\n```\n\"\"\"\nCode that goes along with the Airflow tutorial located at:\nhttps://github.com/apache/incubator-airflow/blob/master/airflow/example_dags/tutorial.py\n\"\"\"\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\n\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime(2015, 6, 1),\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n    # 'queue': 'bash_queue',\n    # 'pool': 'backfill',\n    # 'priority_weight': 10,\n    # 'end_date': datetime(2016, 1, 1),\n}\n\ndag = DAG('tutorial', default_args=default_args)\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\nt1 = BashOperator(\n    task_id='print_date',\n    bash_command='date',\n    dag=dag)\n\nt2 = BashOperator(\n    task_id='sleep',\n    bash_command='sleep 5',\n    retries=3,\n    dag=dag)\n\ntemplated_command = \"\"\"\n    {% for i in range(5) %}\n        echo \"{{ ds }}\"\n        echo \"{{ macros.ds_add(ds, 7)}}\"\n        echo \"{{ params.my_param }}\"\n    {% endfor %}\n\"\"\"\n\nt3 = BashOperator(\n    task_id='templated',\n    bash_command=templated_command,\n    params={'my_param': 'Parameter I passed in'},\n    dag=dag)\n\nt2.set_upstream(t1)\nt3.set_upstream(t1)\n\n```\n> 1. **retries** (int) 重试几次才标记为失败\n> 2. **retry_delay** (timedelta) 两次重试间隔多长时间\n> 3. **retry_exponential_backoff**（bool）在重试延迟上运用算法增加等待时间\n> 4. **max_retry_delay** (timedelta)  重试之间的最大时间间隔\n> 5. **start_time** （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。\n> 6. **end_time** （datetime）如果指定，调度程序将不会超出此日期。\n> 7. **depends_on_past** （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。\n> 8. **wait_for_downstream** （bool）TODO\n> 9. **dag** (DAG) 任务所附的dag的引用（如果有的话）\n> 10. parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism=15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。\n\n> 11. dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数\n\n> 12. max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量\n\n> 13. non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的\n> 14.  [更多配置](https://www.cnblogs.com/skyrim/p/7456166.html)\n\n## airflow执行组件\n * Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。\n * Executor：现在的Executor有三种：\n\n> * SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    \n> * LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    \n> * CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 \n> * 在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor\n\n* Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。\n## 配置文件\n* 配置元素优先级\n> 环境变量\n    airflow.cfg中的配置\n    airflow.cfg中的命令\n    默认\n\n## 数据库\n\n* 官方推荐 MySQL or Postgres 两种数据库\n* 本地配置好数据库后\n> 在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。\n\n\n\n\n##### 感谢\n[http://wingerted.com](http://wingerted.com)","source":"_posts/2021-03-07-软件-Airflow进阶.md","raw":"---\ntitle: 软件-Airflow进阶\ncomments: true\ndate: 2021-03-07 20:04:45\nauthor:\ntags:\n - Airflow\ncategories:\n---\n\n## 基本命令\n\n\n----------\n\n**用户界面也有以下相关操作按钮**\n* 查看\n```\n1、列出现有所有的活动的DAGS\n\tairflow list_dags\n\t\n2、列出 tutorial 的任务id\n\tairflow list_tasks tutorial\n\t\n3、以树形图的形式列出 tutorial 的任务id\n\tairflow list_tasks tutorial --tree\n```\n\n* 测试\n\n```\n1、模拟2015-06-01 执行tutorial的print_date任务\n\tairflow test tutorial print_date 2015-06-01\n```\n\n* 回填数据\n> 如果希望新写的DAG执行过去一段时间的任务怎么办？\n> backfill 可以执行一个时间段内应该执行的所有任务\n\n```\nairflow backfill tutorial -s 2018-06-01 -e 2015-08-01\n```\n\n* 重建元数据库\n\n```\nairflow resetdb [-h] [-y]\n\n-y --yes，不经过提示确认就重置，默认为False\n```\n##### 更多命令  [官方Command Line Interface](http://airflow.incubator.apache.org/cli.html)\n\n\n----------\n\n## BaseOperator\n官网例子，里面的各个属性有代表什么意思？\n```\n\"\"\"\nCode that goes along with the Airflow tutorial located at:\nhttps://github.com/apache/incubator-airflow/blob/master/airflow/example_dags/tutorial.py\n\"\"\"\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\n\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime(2015, 6, 1),\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n    # 'queue': 'bash_queue',\n    # 'pool': 'backfill',\n    # 'priority_weight': 10,\n    # 'end_date': datetime(2016, 1, 1),\n}\n\ndag = DAG('tutorial', default_args=default_args)\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\nt1 = BashOperator(\n    task_id='print_date',\n    bash_command='date',\n    dag=dag)\n\nt2 = BashOperator(\n    task_id='sleep',\n    bash_command='sleep 5',\n    retries=3,\n    dag=dag)\n\ntemplated_command = \"\"\"\n    {% for i in range(5) %}\n        echo \"{{ ds }}\"\n        echo \"{{ macros.ds_add(ds, 7)}}\"\n        echo \"{{ params.my_param }}\"\n    {% endfor %}\n\"\"\"\n\nt3 = BashOperator(\n    task_id='templated',\n    bash_command=templated_command,\n    params={'my_param': 'Parameter I passed in'},\n    dag=dag)\n\nt2.set_upstream(t1)\nt3.set_upstream(t1)\n\n```\n> 1. **retries** (int) 重试几次才标记为失败\n> 2. **retry_delay** (timedelta) 两次重试间隔多长时间\n> 3. **retry_exponential_backoff**（bool）在重试延迟上运用算法增加等待时间\n> 4. **max_retry_delay** (timedelta)  重试之间的最大时间间隔\n> 5. **start_time** （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。\n> 6. **end_time** （datetime）如果指定，调度程序将不会超出此日期。\n> 7. **depends_on_past** （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。\n> 8. **wait_for_downstream** （bool）TODO\n> 9. **dag** (DAG) 任务所附的dag的引用（如果有的话）\n> 10. parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism=15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。\n\n> 11. dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数\n\n> 12. max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量\n\n> 13. non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的\n> 14.  [更多配置](https://www.cnblogs.com/skyrim/p/7456166.html)\n\n## airflow执行组件\n * Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。\n * Executor：现在的Executor有三种：\n\n> * SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    \n> * LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    \n> * CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 \n> * 在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor\n\n* Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。\n## 配置文件\n* 配置元素优先级\n> 环境变量\n    airflow.cfg中的配置\n    airflow.cfg中的命令\n    默认\n\n## 数据库\n\n* 官方推荐 MySQL or Postgres 两种数据库\n* 本地配置好数据库后\n> 在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。\n\n\n\n\n##### 感谢\n[http://wingerted.com](http://wingerted.com)","slug":"软件-Airflow进阶","published":1,"updated":"2021-03-07T12:05:10.165Z","_id":"cklz3ypxz002ljvs6gfgn7bxj","layout":"post","photos":[],"link":"","content":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><hr>\n<p><strong>用户界面也有以下相关操作按钮</strong></p>\n<ul>\n<li><p>查看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、列出现有所有的活动的DAGS\n\tairflow list_dags\n\t\n2、列出 tutorial 的任务id\n\tairflow list_tasks tutorial\n\t\n3、以树形图的形式列出 tutorial 的任务id\n\tairflow list_tasks tutorial --tree<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、模拟2015-06-01 执行tutorial的print_date任务\n\tairflow test tutorial print_date 2015-06-01<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>回填数据<blockquote>\n<p>如果希望新写的DAG执行过去一段时间的任务怎么办？<br>backfill 可以执行一个时间段内应该执行的所有任务</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow backfill tutorial -s 2018-06-01 -e 2015-08-01<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>重建元数据库</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow resetdb [-h] [-y]\n\n-y --yes，不经过提示确认就重置，默认为False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"更多命令-官方Command-Line-Interface\"><a href=\"#更多命令-官方Command-Line-Interface\" class=\"headerlink\" title=\"更多命令  官方Command Line Interface\"></a>更多命令  <a href=\"http://airflow.incubator.apache.org/cli.html\">官方Command Line Interface</a></h5><hr>\n<h2 id=\"BaseOperator\"><a href=\"#BaseOperator\" class=\"headerlink\" title=\"BaseOperator\"></a>BaseOperator</h2><p>官网例子，里面的各个属性有代表什么意思？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\nCode that goes along with the Airflow tutorial located at:\nhttps:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;incubator-airflow&#x2F;blob&#x2F;master&#x2F;airflow&#x2F;example_dags&#x2F;tutorial.py\n&quot;&quot;&quot;\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\n\n\ndefault_args &#x3D; &#123;\n    &#39;owner&#39;: &#39;airflow&#39;,\n    &#39;depends_on_past&#39;: False,\n    &#39;start_date&#39;: datetime(2015, 6, 1),\n    &#39;email&#39;: [&#39;airflow@example.com&#39;],\n    &#39;email_on_failure&#39;: False,\n    &#39;email_on_retry&#39;: False,\n    &#39;retries&#39;: 1,\n    &#39;retry_delay&#39;: timedelta(minutes&#x3D;5),\n    # &#39;queue&#39;: &#39;bash_queue&#39;,\n    # &#39;pool&#39;: &#39;backfill&#39;,\n    # &#39;priority_weight&#39;: 10,\n    # &#39;end_date&#39;: datetime(2016, 1, 1),\n&#125;\n\ndag &#x3D; DAG(&#39;tutorial&#39;, default_args&#x3D;default_args)\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\nt1 &#x3D; BashOperator(\n    task_id&#x3D;&#39;print_date&#39;,\n    bash_command&#x3D;&#39;date&#39;,\n    dag&#x3D;dag)\n\nt2 &#x3D; BashOperator(\n    task_id&#x3D;&#39;sleep&#39;,\n    bash_command&#x3D;&#39;sleep 5&#39;,\n    retries&#x3D;3,\n    dag&#x3D;dag)\n\ntemplated_command &#x3D; &quot;&quot;&quot;\n    &#123;% for i in range(5) %&#125;\n        echo &quot;&#123;&#123; ds &#125;&#125;&quot;\n        echo &quot;&#123;&#123; macros.ds_add(ds, 7)&#125;&#125;&quot;\n        echo &quot;&#123;&#123; params.my_param &#125;&#125;&quot;\n    &#123;% endfor %&#125;\n&quot;&quot;&quot;\n\nt3 &#x3D; BashOperator(\n    task_id&#x3D;&#39;templated&#39;,\n    bash_command&#x3D;templated_command,\n    params&#x3D;&#123;&#39;my_param&#39;: &#39;Parameter I passed in&#39;&#125;,\n    dag&#x3D;dag)\n\nt2.set_upstream(t1)\nt3.set_upstream(t1)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ol>\n<li><strong>retries</strong> (int) 重试几次才标记为失败</li>\n<li><strong>retry_delay</strong> (timedelta) 两次重试间隔多长时间</li>\n<li><strong>retry_exponential_backoff</strong>（bool）在重试延迟上运用算法增加等待时间</li>\n<li><strong>max_retry_delay</strong> (timedelta)  重试之间的最大时间间隔</li>\n<li><strong>start_time</strong> （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。</li>\n<li><strong>end_time</strong> （datetime）如果指定，调度程序将不会超出此日期。</li>\n<li><strong>depends_on_past</strong> （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。</li>\n<li><strong>wait_for_downstream</strong> （bool）TODO</li>\n<li><strong>dag</strong> (DAG) 任务所附的dag的引用（如果有的话）</li>\n<li>parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism=15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"11\">\n<li>dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"12\">\n<li>max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"13\">\n<li>non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的</li>\n<li> <a href=\"https://www.cnblogs.com/skyrim/p/7456166.html\">更多配置</a></li>\n</ol>\n</blockquote>\n<h2 id=\"airflow执行组件\"><a href=\"#airflow执行组件\" class=\"headerlink\" title=\"airflow执行组件\"></a>airflow执行组件</h2><ul>\n<li>Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。</li>\n<li>Executor：现在的Executor有三种：</li>\n</ul>\n<blockquote>\n<ul>\n<li>SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    </li>\n<li>LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    </li>\n<li>CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 </li>\n<li>在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor</li>\n</ul>\n</blockquote>\n<ul>\n<li>Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2></li>\n<li>配置元素优先级<blockquote>\n<p>环境变量<br>  airflow.cfg中的配置<br>  airflow.cfg中的命令<br>  默认</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li>官方推荐 MySQL or Postgres 两种数据库</li>\n<li>本地配置好数据库后<blockquote>\n<p>在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h5><p><a href=\"http://wingerted.com/\">http://wingerted.com</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><hr>\n<p><strong>用户界面也有以下相关操作按钮</strong></p>\n<ul>\n<li><p>查看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、列出现有所有的活动的DAGS\n\tairflow list_dags\n\t\n2、列出 tutorial 的任务id\n\tairflow list_tasks tutorial\n\t\n3、以树形图的形式列出 tutorial 的任务id\n\tairflow list_tasks tutorial --tree<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、模拟2015-06-01 执行tutorial的print_date任务\n\tairflow test tutorial print_date 2015-06-01<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>回填数据<blockquote>\n<p>如果希望新写的DAG执行过去一段时间的任务怎么办？<br>backfill 可以执行一个时间段内应该执行的所有任务</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow backfill tutorial -s 2018-06-01 -e 2015-08-01<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>重建元数据库</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow resetdb [-h] [-y]\n\n-y --yes，不经过提示确认就重置，默认为False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"更多命令-官方Command-Line-Interface\"><a href=\"#更多命令-官方Command-Line-Interface\" class=\"headerlink\" title=\"更多命令  官方Command Line Interface\"></a>更多命令  <a href=\"http://airflow.incubator.apache.org/cli.html\">官方Command Line Interface</a></h5><hr>\n<h2 id=\"BaseOperator\"><a href=\"#BaseOperator\" class=\"headerlink\" title=\"BaseOperator\"></a>BaseOperator</h2><p>官网例子，里面的各个属性有代表什么意思？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\nCode that goes along with the Airflow tutorial located at:\nhttps:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;incubator-airflow&#x2F;blob&#x2F;master&#x2F;airflow&#x2F;example_dags&#x2F;tutorial.py\n&quot;&quot;&quot;\nfrom airflow import DAG\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\n\n\ndefault_args &#x3D; &#123;\n    &#39;owner&#39;: &#39;airflow&#39;,\n    &#39;depends_on_past&#39;: False,\n    &#39;start_date&#39;: datetime(2015, 6, 1),\n    &#39;email&#39;: [&#39;airflow@example.com&#39;],\n    &#39;email_on_failure&#39;: False,\n    &#39;email_on_retry&#39;: False,\n    &#39;retries&#39;: 1,\n    &#39;retry_delay&#39;: timedelta(minutes&#x3D;5),\n    # &#39;queue&#39;: &#39;bash_queue&#39;,\n    # &#39;pool&#39;: &#39;backfill&#39;,\n    # &#39;priority_weight&#39;: 10,\n    # &#39;end_date&#39;: datetime(2016, 1, 1),\n&#125;\n\ndag &#x3D; DAG(&#39;tutorial&#39;, default_args&#x3D;default_args)\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\nt1 &#x3D; BashOperator(\n    task_id&#x3D;&#39;print_date&#39;,\n    bash_command&#x3D;&#39;date&#39;,\n    dag&#x3D;dag)\n\nt2 &#x3D; BashOperator(\n    task_id&#x3D;&#39;sleep&#39;,\n    bash_command&#x3D;&#39;sleep 5&#39;,\n    retries&#x3D;3,\n    dag&#x3D;dag)\n\ntemplated_command &#x3D; &quot;&quot;&quot;\n    &#123;% for i in range(5) %&#125;\n        echo &quot;&#123;&#123; ds &#125;&#125;&quot;\n        echo &quot;&#123;&#123; macros.ds_add(ds, 7)&#125;&#125;&quot;\n        echo &quot;&#123;&#123; params.my_param &#125;&#125;&quot;\n    &#123;% endfor %&#125;\n&quot;&quot;&quot;\n\nt3 &#x3D; BashOperator(\n    task_id&#x3D;&#39;templated&#39;,\n    bash_command&#x3D;templated_command,\n    params&#x3D;&#123;&#39;my_param&#39;: &#39;Parameter I passed in&#39;&#125;,\n    dag&#x3D;dag)\n\nt2.set_upstream(t1)\nt3.set_upstream(t1)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ol>\n<li><strong>retries</strong> (int) 重试几次才标记为失败</li>\n<li><strong>retry_delay</strong> (timedelta) 两次重试间隔多长时间</li>\n<li><strong>retry_exponential_backoff</strong>（bool）在重试延迟上运用算法增加等待时间</li>\n<li><strong>max_retry_delay</strong> (timedelta)  重试之间的最大时间间隔</li>\n<li><strong>start_time</strong> （datatime）确定第一个任务实例的execution_date，最佳做法是将start_date四舍五入到DAG的schedule_interval。</li>\n<li><strong>end_time</strong> （datetime）如果指定，调度程序将不会超出此日期。</li>\n<li><strong>depends_on_past</strong> （bool）设置为true时，任务实例将依次运行，同时依赖上一个任务的计划成功。允许start_date的任务实例运行。</li>\n<li><strong>wait_for_downstream</strong> （bool）TODO</li>\n<li><strong>dag</strong> (DAG) 任务所附的dag的引用（如果有的话）</li>\n<li>parallelism：这个参数指定了整个Airflow系统，在任何一刻能同时运行的Task Instance的数量，这个数量跟DAG无关，只跟Executor和Task有关。举个例子：如果parallelism=15, 这时你有两个DAG，A和B，如果A需要同时开跑10个Task，B也要同时开跑10个Task，两个DAG同时触发，那么这时候同时在跑的Task数量只能是15，其余的5个会等之前的Task运行完了触发，这时的状态不会显示在web上。而且在这种情况下，触发的顺序是不确定的。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"11\">\n<li>dag_concurrency：这个参数指定了同一个Dag Run中能同时运行的Task Instance的个数</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"12\">\n<li>max_active_runs_per_dag：这个参数指定了同一个Dag能被同时激活的Dag Run的数量</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"13\">\n<li>non_pooled_task_slot_count：这个参数指定了默认的Pool能同时运行的Task Instance的数量，如果你的Task没有指定Pool选项，那么这个Task就是属于这个默认的Pool的</li>\n<li> <a href=\"https://www.cnblogs.com/skyrim/p/7456166.html\">更多配置</a></li>\n</ol>\n</blockquote>\n<h2 id=\"airflow执行组件\"><a href=\"#airflow执行组件\" class=\"headerlink\" title=\"airflow执行组件\"></a>airflow执行组件</h2><ul>\n<li>Scheduler：这个是整个Airflow的调度器，Airflow所有DAG的调度过程是由Scheduler轮询来处理的。触发条件达到后，会丢给Executor执行。</li>\n<li>Executor：现在的Executor有三种：</li>\n</ul>\n<blockquote>\n<ul>\n<li>SequnceExecutor：提供本地执行，并且串行执行一个DAG中的所有Task，基本上只用在初期的Airflow概念验证阶段    </li>\n<li>LocalExecutor：这个是比较常用的Executor，可以在本地并行执行一个DAG内的所有Task    </li>\n<li>CeleryExecutor：这个是在大型任务调度场景，或者是表较复杂的任务分离场景中需要用到的Executor。顾名思义，在这个Executor下，Airflow使用了Celery这个强大的Python分布式队列框架去分发任务，然后在这样的环境下，需要在执行任务的机器上启用Airflow Worker来处理队列中的请求。 </li>\n<li>在一个Airflow中同时只能一个Executor启动，不能给指定的DAG指定Executor</li>\n</ul>\n</blockquote>\n<ul>\n<li>Pool：这个Pool虽然不是Airflow的核心，但也跟整个Airflow的执行流程相关。任何一个Task其实都是指定了Pool这个参数的，即使没有自己指定，其实也是归结到了Default Pool这么个池子中。Pool本身是个抽象的概念，由Slot组成，可以建立任何一个Pool，指定Slot的数量。任何一个使用了这个Pool的Task Instance就需要占用一个Slot，Slot用完了，Task就处于等待状态。<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2></li>\n<li>配置元素优先级<blockquote>\n<p>环境变量<br>  airflow.cfg中的配置<br>  airflow.cfg中的命令<br>  默认</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li>官方推荐 MySQL or Postgres 两种数据库</li>\n<li>本地配置好数据库后<blockquote>\n<p>在airflow.cfg 中配置“executor”为“LocalExecutor”，可以在本地并行化任务实例的执行程序。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h5><p><a href=\"http://wingerted.com/\">http://wingerted.com</a></p>\n"},{"title":"软件-Airflow安装与简单使用","comments":1,"date":"2021-03-07T12:05:45.000Z","author":null,"_content":"\n## 一、安装\n* 1、新建一个虚拟环境\n```\nvirtualenv airflowenv\nsource airflowenv/bin/activate\n```\n* 2、安装airflow\n 需要等一段时间\n```\npip install airflow==1.8.0\n```\n \n\n* 3、查看安装结果\n\n```\nairflow version\n```\n> \n> 出现如下则说明安装成功\n>  \n> ```\n> ____________       _____________\n ____    |__( )_________  __/__  /________      __\n____  /| |_  /__  ___/_  /_ __  /_  __ \\_ | /| / /\n___  ___ |  / _  /   _  __/ _  / / /_/ /_ |/ |/ /\n _/_/  |_/_/  /_/    /_/    /_/  \\____/____/|__/\n   v1.8.0\n> ```\n\n\n* 4、cd 进入airflow文件夹\n\n```\n ls -al\n```\n> ```\n> 有以下两个文件\n> -rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg\n-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg\n> ```\n> airflow.cfg有许多**配置项**，后面会作简单解释\n\n* 5、初始化airflow数据库\n\n```\nairflow initdb\n默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）\n```\n* 6、启动服务\n\n```\nairflow webserver -p 8080\n执行之后在浏览器输入：localhost:8080/admin\n结果如下所示：\n```\n![airflow](https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### 安装工作结束\n## 二、更改数据库为Mysql\n* 1、安装MySQL，方法不限\n\n```\npip install mysql-python\n```\n\n* 2、成功进入MySQL之后\n\n```\n新建用户\nCREATE USER airflow;\n新建数据库\nCREATE DATABASE airflow;\nCREATE DATABASE celery_result_airflow;\n给权限\nGRANT all privileges on airflow.* TO 'airflow'@'%' IDENTIFIED BY 'airflow';\nGRANT all privileges on celery_result_airflow.* TO 'airflow'@'%' IDENTIFIED BY 'airflow';\n\n```\n* 3、打开上文提到的airflow.cfg\n将 sql_alchemy_conn，改为如下：\n```\nsql_alchemy_conn = mysql://airflow:airflow@localhost:3306/airflow\n```\n\n```\n初始化元数据库\nairflow initdb\n重置元数据库\nairflow resetdb\n```\n\n\n## 三、启动airflow\n* 运行命令（需要在不同窗口）\n```\nairflow webserver -p 8080\nairflow scheduler\n\n以非root用户运行\nairflow worker\n```\n\n* 浏览器输入 localhost:8080/admin\n* (o゜▽゜)o☆[BINGO!]\n\n## 四、实际项目中可能遇到的问题\n* 如何打开已有项目\n```\n在 airflow.cfg文件中将 dags_folder 指向已有项目\n原本为：dags_folder = /Users/liyuxing/airflow/dags\n改为：dags_folder = /Users/liyuxing/work/mive/dags\n```\n* 如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。\n* 报错 No module named pyutil.program.conf\n\n```\n‘*’号为Python版本\ncd airflowenv/lib/python*.*/site-packages\nvim data.pth\n\n在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如\n/Users/liyuxing/work/util\n```\n\n* 执行 airflow webserver之后提示缺少Redis或者其他包\n\n```\n通通\npip install 缺啥装啥\n```\n\n* schedule_interval 参数意义\n[官方文档](http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs)\n\n","source":"_posts/2021-03-07-软件-Airflow安装与简单使用.md","raw":"---\ntitle: 软件-Airflow安装与简单使用\ncomments: true\ndate: 2021-03-07 20:05:45\nauthor:\ntags:\n - Airflow\ncategories:\n---\n\n## 一、安装\n* 1、新建一个虚拟环境\n```\nvirtualenv airflowenv\nsource airflowenv/bin/activate\n```\n* 2、安装airflow\n 需要等一段时间\n```\npip install airflow==1.8.0\n```\n \n\n* 3、查看安装结果\n\n```\nairflow version\n```\n> \n> 出现如下则说明安装成功\n>  \n> ```\n> ____________       _____________\n ____    |__( )_________  __/__  /________      __\n____  /| |_  /__  ___/_  /_ __  /_  __ \\_ | /| / /\n___  ___ |  / _  /   _  __/ _  / / /_/ /_ |/ |/ /\n _/_/  |_/_/  /_/    /_/    /_/  \\____/____/|__/\n   v1.8.0\n> ```\n\n\n* 4、cd 进入airflow文件夹\n\n```\n ls -al\n```\n> ```\n> 有以下两个文件\n> -rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg\n-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg\n> ```\n> airflow.cfg有许多**配置项**，后面会作简单解释\n\n* 5、初始化airflow数据库\n\n```\nairflow initdb\n默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）\n```\n* 6、启动服务\n\n```\nairflow webserver -p 8080\n执行之后在浏览器输入：localhost:8080/admin\n结果如下所示：\n```\n![airflow](https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n#### 安装工作结束\n## 二、更改数据库为Mysql\n* 1、安装MySQL，方法不限\n\n```\npip install mysql-python\n```\n\n* 2、成功进入MySQL之后\n\n```\n新建用户\nCREATE USER airflow;\n新建数据库\nCREATE DATABASE airflow;\nCREATE DATABASE celery_result_airflow;\n给权限\nGRANT all privileges on airflow.* TO 'airflow'@'%' IDENTIFIED BY 'airflow';\nGRANT all privileges on celery_result_airflow.* TO 'airflow'@'%' IDENTIFIED BY 'airflow';\n\n```\n* 3、打开上文提到的airflow.cfg\n将 sql_alchemy_conn，改为如下：\n```\nsql_alchemy_conn = mysql://airflow:airflow@localhost:3306/airflow\n```\n\n```\n初始化元数据库\nairflow initdb\n重置元数据库\nairflow resetdb\n```\n\n\n## 三、启动airflow\n* 运行命令（需要在不同窗口）\n```\nairflow webserver -p 8080\nairflow scheduler\n\n以非root用户运行\nairflow worker\n```\n\n* 浏览器输入 localhost:8080/admin\n* (o゜▽゜)o☆[BINGO!]\n\n## 四、实际项目中可能遇到的问题\n* 如何打开已有项目\n```\n在 airflow.cfg文件中将 dags_folder 指向已有项目\n原本为：dags_folder = /Users/liyuxing/airflow/dags\n改为：dags_folder = /Users/liyuxing/work/mive/dags\n```\n* 如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。\n* 报错 No module named pyutil.program.conf\n\n```\n‘*’号为Python版本\ncd airflowenv/lib/python*.*/site-packages\nvim data.pth\n\n在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如\n/Users/liyuxing/work/util\n```\n\n* 执行 airflow webserver之后提示缺少Redis或者其他包\n\n```\n通通\npip install 缺啥装啥\n```\n\n* schedule_interval 参数意义\n[官方文档](http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs)\n\n","slug":"软件-Airflow安装与简单使用","published":1,"updated":"2021-03-07T12:06:05.443Z","_id":"cklz4006t002ojvs6aqn44npg","layout":"post","photos":[],"link":"","content":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><ul>\n<li><p>1、新建一个虚拟环境</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">virtualenv airflowenv\nsource airflowenv&#x2F;bin&#x2F;activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>2、安装airflow<br>需要等一段时间</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install airflow&#x3D;&#x3D;1.8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>3、查看安装结果</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>出现如下则说明安装成功</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">____________       _____________\n____    |__( )_________  __&#x2F;__  &#x2F;________      __\n____  &#x2F;| |_  &#x2F;__  ___&#x2F;_  &#x2F;_ __  &#x2F;_  __ \\_ | &#x2F;| &#x2F; &#x2F;\n___  ___ |  &#x2F; _  &#x2F;   _  __&#x2F; _  &#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;_ |&#x2F; |&#x2F; &#x2F;\n_&#x2F;_&#x2F;  |_&#x2F;_&#x2F;  &#x2F;_&#x2F;    &#x2F;_&#x2F;    &#x2F;_&#x2F;  \\____&#x2F;____&#x2F;|__&#x2F;\n  v1.8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<ul>\n<li>4、cd 进入airflow文件夹</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ls -al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">有以下两个文件\n-rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg\n-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>airflow.cfg有许多<strong>配置项</strong>，后面会作简单解释</p>\n</blockquote>\n<ul>\n<li>5、初始化airflow数据库</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow initdb\n默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>6、启动服务</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow webserver -p 8080\n执行之后在浏览器输入：localhost:8080&#x2F;admin\n结果如下所示：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"airflow\"></p>\n<h4 id=\"安装工作结束\"><a href=\"#安装工作结束\" class=\"headerlink\" title=\"安装工作结束\"></a>安装工作结束</h4><h2 id=\"二、更改数据库为Mysql\"><a href=\"#二、更改数据库为Mysql\" class=\"headerlink\" title=\"二、更改数据库为Mysql\"></a>二、更改数据库为Mysql</h2><ul>\n<li>1、安装MySQL，方法不限</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install mysql-python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>2、成功进入MySQL之后</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">新建用户\nCREATE USER airflow;\n新建数据库\nCREATE DATABASE airflow;\nCREATE DATABASE celery_result_airflow;\n给权限\nGRANT all privileges on airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;\nGRANT all privileges on celery_result_airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>3、打开上文提到的airflow.cfg<br>将 sql_alchemy_conn，改为如下：<pre class=\"line-numbers language-none\"><code class=\"language-none\">sql_alchemy_conn &#x3D; mysql:&#x2F;&#x2F;airflow:airflow@localhost:3306&#x2F;airflow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">初始化元数据库\nairflow initdb\n重置元数据库\nairflow resetdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"三、启动airflow\"><a href=\"#三、启动airflow\" class=\"headerlink\" title=\"三、启动airflow\"></a>三、启动airflow</h2><ul>\n<li><p>运行命令（需要在不同窗口）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow webserver -p 8080\nairflow scheduler\n\n以非root用户运行\nairflow worker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>浏览器输入 localhost:8080/admin</p>\n</li>\n<li><p>(o゜▽゜)o☆[BINGO!]</p>\n</li>\n</ul>\n<h2 id=\"四、实际项目中可能遇到的问题\"><a href=\"#四、实际项目中可能遇到的问题\" class=\"headerlink\" title=\"四、实际项目中可能遇到的问题\"></a>四、实际项目中可能遇到的问题</h2><ul>\n<li>如何打开已有项目<pre class=\"line-numbers language-none\"><code class=\"language-none\">在 airflow.cfg文件中将 dags_folder 指向已有项目\n原本为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;airflow&#x2F;dags\n改为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;mive&#x2F;dags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。</li>\n<li>报错 No module named pyutil.program.conf</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">‘*’号为Python版本\ncd airflowenv&#x2F;lib&#x2F;python*.*&#x2F;site-packages\nvim data.pth\n\n在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如\n&#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;util<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>执行 airflow webserver之后提示缺少Redis或者其他包</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">通通\npip install 缺啥装啥<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>schedule_interval 参数意义<br><a href=\"http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs\">官方文档</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><ul>\n<li><p>1、新建一个虚拟环境</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">virtualenv airflowenv\nsource airflowenv&#x2F;bin&#x2F;activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>2、安装airflow<br>需要等一段时间</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install airflow&#x3D;&#x3D;1.8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>3、查看安装结果</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>出现如下则说明安装成功</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">____________       _____________\n____    |__( )_________  __&#x2F;__  &#x2F;________      __\n____  &#x2F;| |_  &#x2F;__  ___&#x2F;_  &#x2F;_ __  &#x2F;_  __ \\_ | &#x2F;| &#x2F; &#x2F;\n___  ___ |  &#x2F; _  &#x2F;   _  __&#x2F; _  &#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;_ |&#x2F; |&#x2F; &#x2F;\n_&#x2F;_&#x2F;  |_&#x2F;_&#x2F;  &#x2F;_&#x2F;    &#x2F;_&#x2F;    &#x2F;_&#x2F;  \\____&#x2F;____&#x2F;|__&#x2F;\n  v1.8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<ul>\n<li>4、cd 进入airflow文件夹</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ls -al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">有以下两个文件\n-rw-r--r--   1 ***  staff  11602  8 28 18:06 airflow.cfg\n-rw-r--r--   1 ***  staff   1549  8 27 12:31 unittests.cfg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>airflow.cfg有许多<strong>配置项</strong>，后面会作简单解释</p>\n</blockquote>\n<ul>\n<li>5、初始化airflow数据库</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow initdb\n默认配置使用SQLLite，执行后在airflow文件夹生成一个airflow.db数据库文件（可以通过配置airflow.cfg的方式更改数据库类型如：mysql）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>6、启动服务</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow webserver -p 8080\n执行之后在浏览器输入：localhost:8080&#x2F;admin\n结果如下所示：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdn.net/20180828194455231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpeXV4aW5nNjYzOTgwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"airflow\"></p>\n<h4 id=\"安装工作结束\"><a href=\"#安装工作结束\" class=\"headerlink\" title=\"安装工作结束\"></a>安装工作结束</h4><h2 id=\"二、更改数据库为Mysql\"><a href=\"#二、更改数据库为Mysql\" class=\"headerlink\" title=\"二、更改数据库为Mysql\"></a>二、更改数据库为Mysql</h2><ul>\n<li>1、安装MySQL，方法不限</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install mysql-python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>2、成功进入MySQL之后</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">新建用户\nCREATE USER airflow;\n新建数据库\nCREATE DATABASE airflow;\nCREATE DATABASE celery_result_airflow;\n给权限\nGRANT all privileges on airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;\nGRANT all privileges on celery_result_airflow.* TO &#39;airflow&#39;@&#39;%&#39; IDENTIFIED BY &#39;airflow&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>3、打开上文提到的airflow.cfg<br>将 sql_alchemy_conn，改为如下：<pre class=\"line-numbers language-none\"><code class=\"language-none\">sql_alchemy_conn &#x3D; mysql:&#x2F;&#x2F;airflow:airflow@localhost:3306&#x2F;airflow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">初始化元数据库\nairflow initdb\n重置元数据库\nairflow resetdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"三、启动airflow\"><a href=\"#三、启动airflow\" class=\"headerlink\" title=\"三、启动airflow\"></a>三、启动airflow</h2><ul>\n<li><p>运行命令（需要在不同窗口）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">airflow webserver -p 8080\nairflow scheduler\n\n以非root用户运行\nairflow worker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>浏览器输入 localhost:8080/admin</p>\n</li>\n<li><p>(o゜▽゜)o☆[BINGO!]</p>\n</li>\n</ul>\n<h2 id=\"四、实际项目中可能遇到的问题\"><a href=\"#四、实际项目中可能遇到的问题\" class=\"headerlink\" title=\"四、实际项目中可能遇到的问题\"></a>四、实际项目中可能遇到的问题</h2><ul>\n<li>如何打开已有项目<pre class=\"line-numbers language-none\"><code class=\"language-none\">在 airflow.cfg文件中将 dags_folder 指向已有项目\n原本为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;airflow&#x2F;dags\n改为：dags_folder &#x3D; &#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;mive&#x2F;dags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>如果需要添加自己的dags，在airflow目录下新建dags文件夹，并将文件放入文件夹即可，airflow会自己找。</li>\n<li>报错 No module named pyutil.program.conf</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">‘*’号为Python版本\ncd airflowenv&#x2F;lib&#x2F;python*.*&#x2F;site-packages\nvim data.pth\n\n在文件中一行，添加pyutil的路径（其他类似问题也可这样解决），如\n&#x2F;Users&#x2F;liyuxing&#x2F;work&#x2F;util<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>执行 airflow webserver之后提示缺少Redis或者其他包</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">通通\npip install 缺啥装啥<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>schedule_interval 参数意义<br><a href=\"http://airflow.incubator.apache.org/scheduler.html?highlight=schedule_interval#dag-runs\">官方文档</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cklz07gsv000p6rs66pxpc2wo","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz07gsy000s6rs6afbfc4k6"},{"post_id":"cklz07vg4000t6rs6btkp978s","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz07vg5000w6rs6b6fj0l4u"},{"post_id":"cklz0gflb001k6rs6heyldfdz","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0h8qp001o6rs67hp9hb33"},{"post_id":"cklz0i42u001p6rs6fliparsn","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0iq9s001r6rs61kymbt9x"},{"post_id":"cklz0ji13001s6rs6bddo8pxq","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0k1v3001u6rs6129o04hl"},{"post_id":"cklz0kg32001v6rs6amk3h9q5","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0kx6c001x6rs6cvgvb27r"},{"post_id":"cklz0lcie001y6rs65v9j0pwp","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0lubv00206rs66glehtqx"},{"post_id":"cklz0mac900216rs63jy0gsve","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0mno300236rs683dv8wwr"},{"post_id":"cklz0n58300246rs68dxq8t89","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0nh3s00266rs64bdh8834"},{"post_id":"cklz0wo21002n6rs6cmey25uc","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0x8vg002p6rs6fgix7648"},{"post_id":"cklz0yhu8002q6rs66xgr5e9z","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz0z3ha002s6rs619ftanu8"},{"post_id":"cklz11jix002t6rs6dnbt62yf","category_id":"cklz02lpr000g6rs631v5a8j4","_id":"cklz11jiz002w6rs61igp2cjr"},{"post_id":"cklz11taa002x6rs607u566h8","category_id":"cklz02lpr000g6rs631v5a8j4","_id":"cklz11tab00306rs6f1v5hfsi"},{"post_id":"cklz12ptu00316rs64eoqh6bs","category_id":"cklz02lpr000g6rs631v5a8j4","_id":"cklz12pu000346rs69by824m0"},{"post_id":"cklz12u5t00356rs64tji9bam","category_id":"cklz02lpr000g6rs631v5a8j4","_id":"cklz12u5v00386rs64jk558d0"},{"post_id":"cklz14yek003e6rs66v4m77os","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz15kuv003g6rs6cyn4bbil"},{"post_id":"cklz174mv003j6rs6hixlaizp","category_id":"cklz18iaz003k6rs6ein759kb","_id":"cklz18ib0003n6rs64bp2atdj"},{"post_id":"cklz1a3jp003o6rs672sh2a0g","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz1bkru003q6rs6ebgaglw0"},{"post_id":"cklz1eesp003t6rs640uq2rsf","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz1etfj003v6rs6c4ofekft"},{"post_id":"cklz21ht30000jvs6bcy38rs6","category_id":"cklyz0o2n000b6rs663bae4b8","_id":"cklz2f4bn0002jvs6h9k85myv"},{"post_id":"cklz2rhyb000kjvs68pedcugg","category_id":"cklz18iaz003k6rs6ein759kb","_id":"cklz2s4gm000mjvs673kr0meu"},{"post_id":"cklz2thll000njvs6dr836eg1","category_id":"cklz18iaz003k6rs6ein759kb","_id":"cklz2u71x000pjvs6hr7q6ie5"},{"post_id":"cklz2vixt000qjvs67kgg4mub","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz2wjde000tjvs62m6h1xvw"},{"post_id":"cklz2x9sp000ujvs61fkb2s5g","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz2ytlo000zjvs6hivubrmb"},{"post_id":"cklz305ls0010jvs62ss7c4k1","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz30tye0013jvs69v02d61i"},{"post_id":"cklz31iqm0014jvs6c29jbj5i","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz32emq0017jvs696mad68g"},{"post_id":"cklz3456c0018jvs67aekekf1","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz34omg001ajvs6avrh074m"},{"post_id":"cklz35umy001bjvs6g9ko1a3c","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz36jss001djvs6c5ij9pe8"},{"post_id":"cklz2hnq00003jvs67nw0dbqb","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz39dnz001ijvs602mo0gxb"},{"post_id":"cklz3bwp8001kjvs60yza820o","category_id":"cklyz0o2n000b6rs663bae4b8","_id":"cklz3bwp9001njvs6fpxf0bz0"},{"post_id":"cklz3crf7001ojvs6bybhfymh","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz3crf8001rjvs6b8162yp0"},{"post_id":"cklz3gh1c001yjvs64ogzacz1","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz3gx2x0020jvs64zlrdza5"},{"post_id":"cklz3mmuc0029jvs6cj6o8eut","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz3n8in002bjvs647pp6zc3"},{"post_id":"cklz3nwjw002cjvs63w9qc213","category_id":"cklz0h8qn001l6rs65vzc8b68","_id":"cklz3o9gs002ejvs69zx99snh"},{"post_id":"cklz3p9br002fjvs6705v0s29","category_id":"cklyz0o2n000b6rs663bae4b8","_id":"cklz3q7wj002hjvs69qy74dsc"},{"post_id":"cklz3udva002ijvs64bfdaogs","category_id":"cklyyoqgf000320s6dzy09bsn","_id":"cklz3uyi6002kjvs6765lao40"}],"PostTag":[{"post_id":"cklz07gsv000p6rs66pxpc2wo","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz07gsy000q6rs6an9ygdkn"},{"post_id":"cklz07gsv000p6rs66pxpc2wo","tag_id":"cklyyvuhv00016rs6ai903y5z","_id":"cklz07gsy000r6rs67178bi13"},{"post_id":"cklz07vg4000t6rs6btkp978s","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz07vg5000u6rs60aaodkeb"},{"post_id":"cklz07vg4000t6rs6btkp978s","tag_id":"cklyyoqgg000420s69lv0cvl1","_id":"cklz07vg5000v6rs691x4czpi"},{"post_id":"cklz0gflb001k6rs6heyldfdz","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0h8qp001n6rs655nz2ceq"},{"post_id":"cklz0i42u001p6rs6fliparsn","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0iq9s001q6rs60rfj7bwo"},{"post_id":"cklz0ji13001s6rs6bddo8pxq","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0k1v3001t6rs6evda1zou"},{"post_id":"cklz0kg32001v6rs6amk3h9q5","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0kx6c001w6rs6g5b28kxg"},{"post_id":"cklz0lcie001y6rs65v9j0pwp","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0lubv001z6rs60xisamk8"},{"post_id":"cklz0mac900216rs63jy0gsve","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0mno300226rs6cy24asit"},{"post_id":"cklz0n58300246rs68dxq8t89","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0nh3s00256rs6dwz766xl"},{"post_id":"cklz0wo21002n6rs6cmey25uc","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0x8vf002o6rs63e8w1o4s"},{"post_id":"cklz0yhu8002q6rs66xgr5e9z","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz0z3ha002r6rs61ljw5au8"},{"post_id":"cklz11jix002t6rs6dnbt62yf","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz11jiz002u6rs6dwt6c42w"},{"post_id":"cklz11taa002x6rs607u566h8","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz11tab002y6rs6fo2uha33"},{"post_id":"cklz12ptu00316rs64eoqh6bs","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz12ptz00326rs63ynm52u2"},{"post_id":"cklz12u5t00356rs64tji9bam","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz12u5u00366rs61jwkadbd"},{"post_id":"cklz12ptu00316rs64eoqh6bs","tag_id":"cklz12y0g00396rs6e6vi6jm0","_id":"cklz12y0l003a6rs6e46t5f63"},{"post_id":"cklz11taa002x6rs607u566h8","tag_id":"cklz12y0g00396rs6e6vi6jm0","_id":"cklz12z2z003b6rs6799rg1rc"},{"post_id":"cklz12u5t00356rs64tji9bam","tag_id":"cklz12y0g00396rs6e6vi6jm0","_id":"cklz13089003c6rs61bas8k4g"},{"post_id":"cklz11jix002t6rs6dnbt62yf","tag_id":"cklz12y0g00396rs6e6vi6jm0","_id":"cklz131dt003d6rs6dxccfmm0"},{"post_id":"cklz14yek003e6rs66v4m77os","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz15kuv003h6rs64nr390jx"},{"post_id":"cklz14yek003e6rs66v4m77os","tag_id":"cklz15kuv003f6rs61dlf4u87","_id":"cklz15kuw003i6rs64rungrgj"},{"post_id":"cklz174mv003j6rs6hixlaizp","tag_id":"cklz18iaz003l6rs64n3cfs10","_id":"cklz18ib0003m6rs6170n3vjg"},{"post_id":"cklz1a3jp003o6rs672sh2a0g","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz1bkru003r6rs65d6gadjp"},{"post_id":"cklz1a3jp003o6rs672sh2a0g","tag_id":"cklz1bkrt003p6rs6hpxr3utx","_id":"cklz1bkru003s6rs6gzck8pz4"},{"post_id":"cklz1eesp003t6rs640uq2rsf","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz1etfj003u6rs6en6x76wf"},{"post_id":"cklz21ht30000jvs6bcy38rs6","tag_id":"cklyz06dw00076rs60ctx3w2g","_id":"cklz2f4bn0001jvs6cg556v6p"},{"post_id":"cklz2hnq00003jvs67nw0dbqb","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz2is1k0006jvs6745n5lrt"},{"post_id":"cklz2hnq00003jvs67nw0dbqb","tag_id":"cklz18iaz003l6rs64n3cfs10","_id":"cklz2is1k0007jvs6ap36glwn"},{"post_id":"cklz2l4jg000ajvs6b4b2gotg","tag_id":"cklz2m8u0000bjvs6caeieg3p","_id":"cklz2m8u2000djvs68qbr5xik"},{"post_id":"cklz2l4jg000ajvs6b4b2gotg","tag_id":"cklz2m8u0000cjvs6ci8k9t9z","_id":"cklz2m8u2000ejvs6523c63o8"},{"post_id":"cklz2o0sn000fjvs66k20fa59","tag_id":"cklz2olac000gjvs6hia29sgy","_id":"cklz2olad000hjvs67rv65xab"},{"post_id":"cklz2q70r000ijvs65zfh6or3","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz2qo4f000jjvs642c5fpgo"},{"post_id":"cklz2rhyb000kjvs68pedcugg","tag_id":"cklz18iaz003l6rs64n3cfs10","_id":"cklz2s4gm000ljvs65kay0odj"},{"post_id":"cklz2thll000njvs6dr836eg1","tag_id":"cklz18iaz003l6rs64n3cfs10","_id":"cklz2u71x000ojvs6561k13b9"},{"post_id":"cklz2vixt000qjvs67kgg4mub","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz2wjde000rjvs6hjr9fqjo"},{"post_id":"cklz2vixt000qjvs67kgg4mub","tag_id":"cklz2yfhj000vjvs633sx7bzi","_id":"cklz2yfhk000wjvs63ygr5fsr"},{"post_id":"cklz2x9sp000ujvs61fkb2s5g","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz2ytlo000xjvs61fqz0tly"},{"post_id":"cklz2x9sp000ujvs61fkb2s5g","tag_id":"cklz2yfhj000vjvs633sx7bzi","_id":"cklz2ytlo000yjvs6dt1o56l6"},{"post_id":"cklz305ls0010jvs62ss7c4k1","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz30tye0011jvs64bqbav3d"},{"post_id":"cklz305ls0010jvs62ss7c4k1","tag_id":"cklz2yfhj000vjvs633sx7bzi","_id":"cklz30tye0012jvs66tnv413m"},{"post_id":"cklz31iqm0014jvs6c29jbj5i","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz32emq0015jvs633ku5m3i"},{"post_id":"cklz31iqm0014jvs6c29jbj5i","tag_id":"cklz2yfhj000vjvs633sx7bzi","_id":"cklz32emq0016jvs6f3hv1hd6"},{"post_id":"cklz3456c0018jvs67aekekf1","tag_id":"cklz18iaz003l6rs64n3cfs10","_id":"cklz34omf0019jvs6f1xq5xkj"},{"post_id":"cklz35umy001bjvs6g9ko1a3c","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz36jss001cjvs60de8dcub"},{"post_id":"cklz3bwp8001kjvs60yza820o","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz3bwp9001ljvs6ehgu1a3j"},{"post_id":"cklz3bwp8001kjvs60yza820o","tag_id":"cklyz06dw00076rs60ctx3w2g","_id":"cklz3bwp9001mjvs63hxser10"},{"post_id":"cklz3crf7001ojvs6bybhfymh","tag_id":"cklyxsf1p0004q1s6djvn20mu","_id":"cklz3crf8001pjvs626cm9vw2"},{"post_id":"cklz3crf7001ojvs6bybhfymh","tag_id":"cklz0fmix001e6rs65zwydjiu","_id":"cklz3crf8001qjvs689l6gc48"},{"post_id":"cklz3crf7001ojvs6bybhfymh","tag_id":"cklz0fmiy001g6rs69gyxdxjo","_id":"cklz3crf8001sjvs661qf3kt9"},{"post_id":"cklz3exu6001tjvs68tov2oxa","tag_id":"cklz3fvb0001ujvs62n1rg0ir","_id":"cklz3fvb1001wjvs61iq9h7f0"},{"post_id":"cklz3exu6001tjvs68tov2oxa","tag_id":"cklz3fvb1001vjvs6703xhgz0","_id":"cklz3fvb1001xjvs6dy4hdfr9"},{"post_id":"cklz3gh1c001yjvs64ogzacz1","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz3gx2w001zjvs6023b7ec3"},{"post_id":"cklz3hk3l0021jvs61nuw24vc","tag_id":"cklz3fvb0001ujvs62n1rg0ir","_id":"cklz3hzhd0022jvs660elcqg4"},{"post_id":"cklz3iq8m0023jvs67t6gcn5o","tag_id":"cklz3j6p10024jvs67ojmc8q4","_id":"cklz3j6p10025jvs68hxcfv3u"},{"post_id":"cklz3kekj0026jvs61i1v0zo1","tag_id":"cklz3l6h40027jvs6b5gd479q","_id":"cklz3l6h50028jvs6bv5egz2u"},{"post_id":"cklz3mmuc0029jvs6cj6o8eut","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz3n8im002ajvs6faxf5yri"},{"post_id":"cklz3nwjw002cjvs63w9qc213","tag_id":"cklz0h8qo001m6rs61bpvaslr","_id":"cklz3o9gs002djvs60d5xg4ga"},{"post_id":"cklz3p9br002fjvs6705v0s29","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz3q7wi002gjvs6awqxa37w"},{"post_id":"cklz3udva002ijvs64bfdaogs","tag_id":"cklz2is1j0004jvs6hi55fkq1","_id":"cklz3uyi6002jjvs64seqhdey"},{"post_id":"cklz3ypxz002ljvs6gfgn7bxj","tag_id":"cklz3z91j002mjvs6345g2rpw","_id":"cklz3z91j002njvs66zsc3u4k"},{"post_id":"cklz4006t002ojvs6aqn44npg","tag_id":"cklz3z91j002mjvs6345g2rpw","_id":"cklz40fnu002pjvs6ewj5cdlt"}],"Tag":[{"name":"Golang","_id":"cklyxsf1p0004q1s6djvn20mu"},{"name":"tags","_id":"cklyxsf1s0008q1s6cqcw34ov"},{"name":"atomic包","_id":"cklyyoqgg000420s69lv0cvl1"},{"name":"AES","_id":"cklyyvuhv00016rs6ai903y5z"},{"name":"工具","_id":"cklyz06dw00076rs60ctx3w2g"},{"name":"LeetCode","_id":"cklz02lps000h6rs66p562glm"},{"name":"IP","_id":"cklz0fmix001e6rs65zwydjiu"},{"name":"Utils","_id":"cklz0fmiy001g6rs69gyxdxjo"},{"name":"Mysql","_id":"cklz0h8qo001m6rs61bpvaslr"},{"name":"算法导论","_id":"cklz12y0g00396rs6e6vi6jm0"},{"name":"面试","_id":"cklz15kuv003f6rs61dlf4u87"},{"name":"Redis","_id":"cklz18iaz003l6rs64n3cfs10"},{"name":"图片","_id":"cklz1bkrt003p6rs6hpxr3utx"},{"name":"Python","_id":"cklz2is1j0004jvs6hi55fkq1"},{"name":"Mac","_id":"cklz2m8u0000bjvs6caeieg3p"},{"name":"sshpass","_id":"cklz2m8u0000cjvs6ci8k9t9z"},{"name":"程序人生","_id":"cklz2olac000gjvs6hia29sgy"},{"name":"PIL","_id":"cklz2yfhj000vjvs633sx7bzi"},{"name":"Linux","_id":"cklz3fvb0001ujvs62n1rg0ir"},{"name":"Vim","_id":"cklz3fvb1001vjvs6703xhgz0"},{"name":"Git","_id":"cklz3j6p10024jvs67ojmc8q4"},{"name":"算法","_id":"cklz3l6h40027jvs6b5gd479q"},{"name":"Airflow","_id":"cklz3z91j002mjvs6345g2rpw"}]}}